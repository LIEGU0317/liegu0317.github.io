<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Blog重构之路|Blog进化之路</title>
    <link href="/2022/08/09/Blog%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF-Blog%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/08/09/Blog%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF-Blog%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/08/09/wtCnWMqGUS5D4ik.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p>佛系进展，随缘操作，随缘写<br>看不懂很正常，<a href="#%E5%9B%BE%E5%BA%8A%E6%8E%A8%E8%8D%90">唯一的营养</a></p></blockquote><blockquote><p>2022年8月7日22:28:02</p></blockquote><ol><li>安装Hexo脚手架<br>然后进入 hexo 目录，依次执行下面命令:<br><code>npm install -g hexo-cli</code>，安装hexo最新版<blockquote><p>2022年8月8日08:40:51</p></blockquote></li><li>初始化Hexo本地环境<br><code>hexo init foldername</code></li><li>进入博客目录<br><code>cd ./foldername</code></li><li>安装PDF插件<br>在线浏览PDF文件需要用得到，不是很好用勉强能用<br><code>npm install --save hexo-pdf</code></li><li>安装live2d组件看板娘<a href="https://github.com/EYHN/hexo-helper-live2d/blob/HEAD/README.zh-CN.md">【GitHub仓库不维护了】</a><br>就先往后放吧<br><img src="https://s2.loli.net/2022/08/08/EaWgwPNFGdoqfIc.png" srcset="/img/loading2.gif" lazyload></li><li>更换主题<br>之前一直用的是<br><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a><br><img src="https://camo.githubusercontent.com/48b250de82787ee8090df0e3a3088e10d09a12b58fe1df55045f2476aca20978/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f666c7569642d6465762f737461746963406d61737465722f6865786f2d7468656d652d666c7569642f73637265656e73686f74732f696e6465782e706e67" srcset="/img/loading2.gif" lazyload alt="fluid"><br>既然决定重构那么换个主题吧<br><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a><br><img src="https://camo.githubusercontent.com/cc33313189cc45d475faff9b2c4a9c5d5e4289e48ee333704ba7f105c9d04e95/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6a65727279633132372f43444e406d322f696d672f7468656d652d627574746572666c792d726561646d652e706e67" srcset="/img/loading2.gif" lazyload alt="hexo-theme-butterfly"><blockquote><p>It supports Hexo 5.0.0 or later</p><p>In Hexo site root directory<br><code>npm i hexo-theme-butterfly</code><br>后续步骤查看上文GitHub仓库链接即可</p></blockquote></li></ol><blockquote><p>2022年8月8日09:27:52</p></blockquote><ol start="6"><li>懒，不换主题了<br>fluid也是看GitHub仓库就好了</li><li>对比新旧配置文件保留需要的配置<br><code>_config.yml</code><br>找第一个好看的loading.gif<br><img src="https://s2.loli.net/2022/08/08/PUIVvtwkGAdXsCr.gif" srcset="/img/loading2.gif" lazyload><blockquote><p>2022年8月8日16:02:37</p></blockquote></li><li><code>hexo d</code>报错<code>Deployer not found: git</code><br>吼，途次遇见,<a href="https://developer.aliyun.com/article/764974">解决方法</a></li><li>再次执行hexo d 报错无法获取电子邮箱地址<blockquote><p>查看当前用户：<br><code>git config user.name</code><br>查看当前邮箱：<br><code>git config user.email</code><br>修改当前用户：<br><code>git config --global user.name &quot;liegu0317&quot;</code><br>修改当前邮箱：<br><code>git config --global user.email &quot;liegu0317@qq.com&quot;</code></p></blockquote></li><li>生成SSh并配置到Gitee<br><a href="https://www.jianshu.com/p/31cbbbc5f9fa/">如何生成SSH key</a></li></ol><h2 id="图床推荐"><a href="#图床推荐" class="headerlink" title="图床推荐"></a>图床推荐</h2><ol><li><p>路过图床 (<a href="https://imgtu.com/">https://imgtu.com</a>)<br>高速稳定，单图最大 10 MB</p></li><li><p>ImgURL (<a href="https://imgurl.org/">https://imgurl.org</a>)<br>游客每日限 10 次上传，单图最大 5 MB</p></li><li><p>SM.MS (<a href="https://sm.ms/">https://sm.ms</a>)<br>老牌图床，现在游客禁止上传，普通用户单图最大 5 MB， 5 GB 存储空间</p></li><li><p>KinhPicture (<a href="https://img.kinh.cc/">https://img.kinh.cc</a>)<br>岛主的聚合图床，支持阿里、百度、AWS S3 等 15 个接口，单图限制 2 ~ 32 MB</p></li><li><p>Catbox (<a href="https://catbox.moe/">https://catbox.moe/</a>) &amp; Litterbox<br>(<a href="https://litterbox.catbox.moe/)Catbox">https://litterbox.catbox.moe/)Catbox</a> 单文件限制 200 MB，永久保存；<br>Litterbox 单文件限制 1 GB，有时效。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>参与2022年C4的小经验（1）|Web点点</title>
    <link href="/2022/07/02/%E5%8F%82%E4%B8%8E2022%E5%B9%B4C4%E7%9A%84%E5%B0%8F%E7%BB%8F%E9%AA%8C-Web%E7%82%B9%E7%82%B9/"/>
    <url>/2022/07/02/%E5%8F%82%E4%B8%8E2022%E5%B9%B4C4%E7%9A%84%E5%B0%8F%E7%BB%8F%E9%AA%8C-Web%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://oss.moocollege.com/10688/skin/YYU7QYdI_1646543703035.png" srcset="/img/loading2.gif" lazyload alt="2022年C4"></p><blockquote><p>我参与的是<code>2022年网络技术挑战赛A系列赛项</code><br>选拔赛作品已经提交了，无论结果如何都是一次经历，在提升相关知识的同时更加培养了<strong>小组协作</strong>的能力，我认为后者相较于前者更有意义。</p><p>作品很<em>拉胯</em>，<code>接受嘲讽</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="毕竟作品写的实在是不成样子（仅否定我负责的那部分）。">[1]</span></a></sup>，第一次做还是完全从<code>0</code>开始</p><p>gitee仓库地址：<a href="https://gitee.com/liegu0317/e_school">https://gitee.com/liegu0317/e_school</a></p><p>最终提交在线演示链接：<a href="http://eschool.liegu0317.top/">http://eschool.liegu0317.top/</a><br>（演示服务器是借的，此链接随缘存活）</p></blockquote><blockquote><p>本文仅代表个人观点，如有不当之处，欢迎评论区留言！<br>本文仅描述个人参赛经验，详细参赛流程请参见<a href="http://net.c4best.cn/details/entryGuide">《参赛指南》</a></p></blockquote><h1 id="参赛经历总结"><a href="#参赛经历总结" class="headerlink" title="参赛经历总结"></a>参赛经历总结</h1><blockquote><p>本文中引用赛事官网文档可能会随时间更新、或被弃用。请前往官网以最新文档为准<a href="http://net.c4best.cn/">C4-网络技术挑战赛官网</a></p></blockquote><h2 id="一、正式参赛前准备"><a href="#一、正式参赛前准备" class="headerlink" title="一、正式参赛前准备"></a>一、正式参赛前准备</h2><ol><li>阅读<a href="http://net.c4best.cn/details/entryGuide">《参赛指南》</a><br>我认为阅读参赛指南参与赛事的第一步，毕竟我报名的时候是直接跟着医疗大数据科研室的学长们报的（报完一脸懵）。<code>组队也是在这个时候完成的</code><br>关于活动的全部基础问题都可以在<a href="http://net.c4best.cn/details/entryGuide">参赛指南</a>了解。</li><li>确定参与系列</li><li>确定选题</li></ol><h2 id="二、竞赛阶段"><a href="#二、竞赛阶段" class="headerlink" title="二、竞赛阶段"></a>二、竞赛阶段</h2><h3 id="（一）资格赛"><a href="#（一）资格赛" class="headerlink" title="（一）资格赛"></a>（一）资格赛</h3><p>A系列的本阶段总结下来就是探讨构思、写文档、探讨修改、写文档……</p><h4 id="1-构思"><a href="#1-构思" class="headerlink" title="1.构思"></a>1.构思</h4><p>对于首次参与此类竞赛的我们这一切是那么陌生。学长拿出了他们大一时参与《第七届河北省“互联网+”大学生创新创业大赛》的项目为我们提供了思路，参赛正是由此开始。</p><h4 id="2-写文档"><a href="#2-写文档" class="headerlink" title="2.写文档"></a>2.写文档</h4><p><img src="https://oss.moocollege.com/10688/edit/I8YBWUSt_1646549210219.JPG" srcset="/img/loading2.gif" lazyload></p><blockquote><ol><li><p>创意：设计理念、选题的创新性；</p></li><li><p>技术：所涉及技术的先进性、综合性与创新性；</p></li><li><p>应用：实用价值、市场潜力；</p></li></ol></blockquote><p>资格赛阶段文档内容要侧重这是这三个评分点写，可以有夸大的成分但是要尽量实际。<br>其中<code>创意</code>占比最多，因此文档中要更多的提及。<br>能用到的<code>技术</code>都可以写进去，哪怕最后不能完全实现。<br><code>应用</code>就展开想象就好了，在结合实际的情况下不局限于过去与当前，考虑未来也是很重要。</p><p>在文档编写前期，我们根据评分内容确定了八条主体内容，分别为</p><blockquote><p>一、执行摘要<br>二、产品创意概述<br>三、相关产业背景<br>四、用户需求<br>五、市场分析<br>六、软件设计<br>七、应用内容<br>八、参考资料  </p></blockquote><p>还有一个<code>项目介绍</code>，在提交文档时需要填写。这个建议是最后写，因为这需要与文档内容紧密联系，文档完成后可以直接在文档主体中找出主要内容作为项目介绍。</p><p>为了更加高效完成文档编写，我们的文档编写采用了<strong>线上协作</strong>的方式。这样队员们的构思会更加积极的碰撞，也可以跟进队员的<strong>实时进度</strong>（这很重要，可以及时地对于任务分配进行及时调整），同时避免了文档内容破碎最终产出了<code>N*1</code>份<em><strong>半成品</strong></em>的情况。</p><p>注意做好对任务的分配，在了解队员的情况下，<strong>“加以引导“</strong><del>（强制）</del>的让队员自己选择负责部分，做到能力越大责任越大（合理分配）。<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>毕竟作品写的实在是不成样子（仅否定我负责的那部分）。<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Web开发经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中国高校计算机大赛</tag>
      
      <tag>Vue</tag>
      
      <tag>Element plus</tag>
      
      <tag>Web开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux环境下PicGo-core、GitHub图床、Typora|inux云笔记</title>
    <link href="/2022/05/24/PicGo-core%E3%80%81GitHub%E5%9B%BE%E5%BA%8A%E3%80%81Typora-%E4%BA%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/24/PicGo-core%E3%80%81GitHub%E5%9B%BE%E5%BA%8A%E3%80%81Typora-%E4%BA%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/liegu0317/img/Blogimgpicgo-core-github-typora.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p>重复造车？不可能  以下内容截取、翻译自<a href="https://support.typora.io/Upload-Image/#option-1-edit-the-config-file">上床图片 -typora支持</a>  并做出注释。（注释以引用块形式出现）</p></blockquote><h3 id="PicGo-Core（命令行）（开源）"><a href="#PicGo-Core（命令行）（开源）" class="headerlink" title="PicGo-Core（命令行）（开源）"></a>PicGo-Core（命令行）（开源）</h3><p><a href="https://github.com/PicGo/PicGo-Core">PicGo-Core </a>是一个支持图片上传的开源节点模块。 它还支持插件来扩展其功能。 </p><p>由于它是一个节点模块，我们提供了两种安装和使用方式。 </p><blockquote><p>安装方式1</p></blockquote><h4 id="安装-PicGo-Core-的预编译二进制文件-Linux-x2F-Windows"><a href="#安装-PicGo-Core-的预编译二进制文件-Linux-x2F-Windows" class="headerlink" title="安装 PicGo-Core 的预编译二进制文件 (Linux &#x2F; Windows)"></a>安装 PicGo-Core 的预编译二进制文件 (Linux &#x2F; Windows)</h4><p>Typora 提供了 PicGo 的预构建二进制文件，使用 nexe 将节点模块打包成一个文件二进制文件。  您只需单击“下载”按钮即可安装 PicGo 二进制文件，Typora 将开始下载并将其直接放在 Typora 的支持文件夹下。 </p><details><summary><a name="picgo-location"></a><font style="vertical-align: inherit;">下载的 PicGo-Core 二进制文件的位置 </font></summary>二进制文件将放在“%AppData/Typora/picgo”下，“%AppData”在 Linux 上是“~/.config”，在 Windows 上是“C:/User/[username]/Roaming/AppData”。<br>您也可以尝试在 Typora 的首选项面板中单击“打开主题文件夹”，然后打开其父文件夹，其中将包含“picgo”文件夹。 </details><p>由于 macOS Catalina 的安全规则，预构建的二进制文件在 Catalina 上不起作用，因此您可以尝试以下选项： </p><blockquote><p>安装方式2</p></blockquote><h4 id="通过节点包管理器安装-PicGo-Core（需要提前安装-NodeJS-）"><a href="#通过节点包管理器安装-PicGo-Core（需要提前安装-NodeJS-）" class="headerlink" title="通过节点包管理器安装 PicGo-Core（需要提前安装 NodeJS ）"></a>通过节点包管理器安装 PicGo-Core（需要提前安装 <a href="https://liegu0317.top/2021/12/08/LieGu%E3%81%AEBlog-%E6%90%AD%E5%BB%BA%E7%AF%87/#2-%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85node-js">NodeJS</a> ）</h4><p>如果您安装了节点或纱线，您可以在终端中运行以下命令。 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">npm install picgo -g<br><br><span class="hljs-meta"># or</span><br><br>yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> picgo<br></code></pre></td></tr></table></figure><blockquote><p>基于debin的发行版，如<a href="https://home.uniontech.com/">统信UOS</a>、ubuntu，用<code>npm install picgo -g</code></p></blockquote><p>然后你可以在终端输入“which  picgo”得到它的实际安装位置，然后，选择“Custom Command”作为“Image Uploader”功能，输入<code>“[your  node path] [your picgo-core path] upload”</code>作为命令。  </p><blockquote><p>比如 &#x2F;home&#x2F;liegu&#x2F;applications&#x2F;node&#x2F;bin&#x2F;node &#x2F;home&#x2F;liegu&#x2F;applications&#x2F;node&#x2F;bin&#x2F;picgo upload</p><p>注意空格的书写</p></blockquote><p> 如果你在系统PATH中直接安装了“node”和“picgo”，也可以直接填写“picgo upload”作为自定义命令。 </p><p><img src="https://support.typora.io/media/image-upload/install-picgo.png" srcset="/img/loading2.gif" lazyload alt="安装-picgo"></p><p><img src="https://support.typora.io/media/image-upload/custom.png" srcset="/img/loading2.gif" lazyload alt="风俗"></p><h4 id="配置-PicGo-Core"><a href="#配置-PicGo-Core" class="headerlink" title="配置 PicGo-Core"></a>配置 PicGo-Core</h4><h5 id="选项-1：编辑配置文件"><a href="#选项-1：编辑配置文件" class="headerlink" title="选项 1：编辑配置文件"></a>选项 1：编辑配置文件</h5><p>请编辑 <code>config.json</code>在以下位置 </p><ul><li>Linux &#x2F; macOS → <code>~/.picgo/config.json</code>. </li><li>窗户 → <code>C:\Users\[your user name]\.picgo\config.json</code>.</li></ul><p>详情请参阅 <a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">本文档（只有中文） </a>。 </p><blockquote><p>省流：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;picBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;uploader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;github&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;current&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;github&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;transformer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;github&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;repo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 仓库名，格式是username/reponame</span><br>  <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// github token</span><br>  <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 自定义存储路径，比如img/</span><br>  <span class="hljs-attr">&quot;customUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 自定义域名，注意要加http://或者https://</span><br><span class="hljs-punctuation">&#125;</span><br><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;picgoPlugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>自定义域名可以写为如下格式，使用<a href="https://liegu0317.top/2022/03/29/Gitee%E5%9B%BE%E5%BA%8A%E5%B4%A9%E4%BA%86-%E6%88%91%E5%8F%88%E8%BD%AC%E5%88%B0%E4%BA%86Github/#GitHub-%E5%9B%BE%E5%BA%8A%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95%EF%BC%8C%E9%80%9A%E8%BF%87-jsDelivr-CDN-%E5%85%A8%E7%90%83%E5%8A%A0%E9%80%9F">jscdn加速图床访问</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>&#123;username&#125;/&#123;reponame&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="选项-2：通过-CLI-配置"><a href="#选项-2：通过-CLI-配置" class="headerlink" title="选项 2：通过 CLI 配置"></a>选项 2：通过 CLI 配置</h5><p>如果你是通过 node 安装 pico-core，请输入 <code>picgo -h</code>显示 picgo 的帮助，并按照它的帮助进行配置。 </p><p>如果您使用从 Typora 的首选项面板安装的 PicGo-Core 的预构建二进制文件，请从文件夹中找到二进制文件（请参阅 <a href="https://support.typora.io/Upload-Image/#picgo-location">此处 </a>），然后在终端中打开该文件夹，并通过 ( <code>./picgo -h</code>). </p><p>您可以在 <a href="https://github.com/PicGo/PicGo-Core#use-in-cli">https://github.com/PicGo/PicGo-Core#use-in-cli</a> 中找到它的 CLI 用法。 </p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>PicGo-core</tag>
      
      <tag>github</tag>
      
      <tag>typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统信UOS校园联盟第一次培训</title>
    <link href="/2022/04/14/%E7%BB%9F%E4%BF%A1UOS%E6%A0%A1%E5%9B%AD%E8%81%94%E7%9B%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9F%B9%E8%AE%AD/"/>
    <url>/2022/04/14/%E7%BB%9F%E4%BF%A1UOS%E6%A0%A1%E5%9B%AD%E8%81%94%E7%9B%9F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9F%B9%E8%AE%AD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>第一次培训结束了但<strong>校园联盟</strong>没有结束!</p><p>快来加入**<a href="https://jq.qq.com/?_wv=1027&k=ap6PDZJW">俱乐部</a>**吧！</p><p>点击链接加入群聊【河北北方学院国产操作】：<a href="https://jq.qq.com/?_wv=1027&amp;k=ap6PDZJW">https://jq.qq.com/?_wv=1027&amp;k=ap6PDZJW</a></p></blockquote><hr><h1 id="统信UOS校园联盟河北北方学院第一次培训"><a href="#统信UOS校园联盟河北北方学院第一次培训" class="headerlink" title="统信UOS校园联盟河北北方学院第一次培训"></a><strong>统信UOS校园联盟河北北方学院第一次培训</strong></h1><p>你还只知道Windows系统吗？</p><p>还以为除了Win与Mac之外中国就没有别的选择了吗？</p><p>是时候使用用国产统信UOS系统了！</p><p>统信UOS国产操作系统是什么？</p><p>✔职场就业必须要会使用</p><p>✔国家信息发展权的象征</p><p>✔国产化走向世界的证明</p><p>✔微软与苹果之外的另一个选择</p><p>​                 <img src="https://cdn.jsdelivr.net/gh/liegu0317/img@master/Blogimg/Ds9MZNeQnWorSoW2lvXMtg.jpeg" srcset="/img/loading2.gif" lazyload alt="img">        </p><p><strong>⏰官方在线培训时间：4月16日（周六）14点</strong></p><p><strong>扫码加入河北北方学院专属【统信UOS校园群】，参与培训，互动抽奖~</strong></p><p><strong>🎖培训完毕还可免费考取信创就业必备人才证书！加入风口圈子</strong></p><p>评论区：</p><p>跳出微软和苹果的局限给世界和未来一个新的选择      ——刘闻欢</p><p>这是首次面向高校，北院的小伙伴们要加油了！拿下第一波，就是骨灰级人物了！</p><p>还有还有，硬核朋友圈素材（新创人才证书）这不就来了吗！！！！</p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>统信UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统信UOS</tag>
      
      <tag>国产操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记p3</title>
    <link href="/2022/04/13/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0p3/"/>
    <url>/2022/04/13/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0p3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/550f2c7db0b5edcf7788a0acc35797e4.png" srcset="/img/loading2.gif" lazyload></p><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>字符数组是数组元素类型为字符的数组，字符数组中的一个元素存放一个字符。<br>字符数组说明的一般形式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Char数组名[常量表达式]<br><span class="hljs-type">char</span> ch[<span class="hljs-number">10</span>]  <br><span class="hljs-type">char</span> c[<span class="hljs-number">10</span>][<span class="hljs-number">20</span>]<br><span class="hljs-type">char</span> ch[<span class="hljs-number">10</span>]=[<span class="hljs-string">&#x27;c.p.r.o.g.&quot;ra&quot;m)</span><br></code></pre></td></tr></table></figure><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ch[] = <span class="hljs-string">&quot;C program&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s \n &quot;</span>, ch);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ch[<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>&#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ch[%d]=%c \n &quot;</span>, i, ch[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">ch[<span class="hljs-number">0</span>]=c <br> ch[<span class="hljs-number">1</span>]=  <br> ch[<span class="hljs-number">2</span>]=p <br> ch[<span class="hljs-number">3</span>]=r <br> ch[<span class="hljs-number">4</span>]=o <br> ch[<span class="hljs-number">5</span>]=g <br> ch[<span class="hljs-number">6</span>]=r <br> ch[<span class="hljs-number">7</span>]=a <br> ch[<span class="hljs-number">8</span>]=m <br> ch[<span class="hljs-number">9</span>]= <br></code></pre></td></tr></table></figure><h1 id="scanf-与-gets"><a href="#scanf-与-gets" class="headerlink" title="scanf() 与 gets()"></a>scanf() 与 gets()</h1><h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><blockquote><ol><li>scanf的功能是将键盘输入的字符串转换成整数、浮点数、字符或字符串。   </li><li>scanf是一个变参函数。   (参数的数量和类型不确定) scanf的第一个参数是字符串。 scanf的第一个参数是需要输入的字符串以及需要被读取的占位符。   </li><li>scanf的后续参数，是依次被读取并赋值的变量地址。 占位符的类型和数量需要与后续的参数类型和数量对应。   </li><li>如果用scanf ()读取基本变量类型的值，在变量名前加一个&amp;。 如果用scanf ()把字符串去读到字符数组中，不要使用&amp;。   </li><li>可以发现scanf是printf的逆向过程。 注意，键盘输入的时候，必须要和scanf的第一个参数的字符串对应。</li></ol></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">///要求：从键盘输入一个人名，并让其显示在屏幕上</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>]; <span class="hljs-comment">// name[20] name2[20]</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your name:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name); <span class="hljs-comment">// tom Ada</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s!\n&quot;</span>, name);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, name); <span class="hljs-comment">//读取输入缓冲区中余下的上次未被读走的字符(3.)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s!\n&quot;</span>, name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Enter your name:tom Ada<br>Hello tom!<br>Hello Ada!<br></code></pre></td></tr></table></figure><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><blockquote><p>与scanf（）区别在于gets（）在键入enter时才视为完成一次输入，可以有空格存在，而scanf（）在空格处便识别为完成一次输入[#scanf](# scanf())</p></blockquote><h3 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">///从键盘输入一个人名，并让其显示在屏幕上</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your name:&quot;</span>);<br>    gets(name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s!\n&quot;</span>, name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">Enter your name:tom Ada<br>Hello tom Ada!<br></code></pre></td></tr></table></figure><h1 id="printf-与-puts"><a href="#printf-与-puts" class="headerlink" title="printf() 与 puts()"></a>printf() 与 puts()</h1><p>printf( )的一般格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;格式控制字符串&quot;</span>,输出表列)；        <span class="hljs-comment">//输出表列各项用符号,分隔开</span><br></code></pre></td></tr></table></figure><p>puts( )函数是把字符串输出到电脑屏幕上并换行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);                            <span class="hljs-comment">//屏幕打印字符串消息并换行</span><br></code></pre></td></tr></table></figure><h3 id="C语言中的转化字符输出示例"><a href="#C语言中的转化字符输出示例" class="headerlink" title="C语言中的转化字符输出示例"></a>C语言中的转化字符输出示例</h3><table><thead><tr><th>转化字符</th><th>描述</th><th>输出示例</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>整数</td><td>printf(“%d”,16);</td><td>输出整数 16</td></tr><tr><td>%f</td><td>浮点数</td><td>printf(“%f”,3.14);</td><td>输出小数 3.140000</td></tr><tr><td>%c</td><td>字符</td><td>printf(“%c”,’x’);</td><td>输出字符 ‘x’</td></tr><tr><td>%s</td><td>字符串</td><td>printf(“%s”,”China”);</td><td>输出字符串 “China”</td></tr></tbody></table><h3 id="C语言常用的转义序列描述"><a href="#C语言常用的转义序列描述" class="headerlink" title="C语言常用的转义序列描述"></a>C语言常用的转义序列描述</h3><table><thead><tr><th>转义序列</th><th>描述</th><th>输出示例</th></tr></thead><tbody><tr><td>\n</td><td>换行</td><td>printf(“第一行 \n 第二行”);</td></tr><tr><td>\a</td><td>警报（电脑响铃）</td><td>printf(“电脑响铃一次 \a”);</td></tr><tr><td>\t</td><td>制表符</td><td>printf(“\t 首行缩进一个制表符位”);</td></tr><tr><td>\</td><td>反斜杠</td><td>printf(“显示两个反斜杠 \\“);</td></tr><tr><td>&quot;</td><td>双引号（英文半角字符）</td><td>printf(“显示双引号 &quot; 中国 &quot;!”);</td></tr></tbody></table><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> word[] = &#123;<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><ul><li>以0（整数0）结尾的一串字符</li><li>0或’\0’是一样的，但是和’0’不同</li><li>0标志字符串的结束，但它不是字符串的一部分</li><li>计算字符串长度的时候不包含这个0</li><li>字符串以数组的形式存在，以数组或指针的形式访问</li><li>更多的是以指针的形式</li><li>string.h里有很多处理字符串的函数</li></ul><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">word[0]</td><td>H</td></tr><tr><td align="center">word[1]</td><td>e</td></tr><tr><td align="center">word[2]</td><td>l</td></tr><tr><td align="center">word[3]</td><td>L</td></tr><tr><td align="center">word[4]</td><td>o</td></tr><tr><td align="center">word[5]</td><td>!</td></tr><tr><td align="center">word[6]</td><td>\0</td></tr></tbody></table><h1 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-strcpy"><a href="#1-strcpy" class="headerlink" title="1. strcpy"></a>1. strcpy</h3><p>原型：<code>char *strcpy (char * __dest, const char * __src);</code><br>功能：将一个字符串(<code>__src</code>)拷贝到另一个字符串缓冲区中(<code>__dest</code>)，并返回拷贝后的字符串指针；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>];<br>    <span class="hljs-built_in">strcpy</span>(str2,str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after copy, str2 = %s\n&quot;</span>,str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">after</span> <span class="hljs-keyword">copy</span>, str2 = abcdefg1<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>必须保证拷贝后的缓冲区即上例中str2的大小足够，否则造成内存溢出到未分配的地址，容易产生各种未知错误；</li><li>由于该函数原理是逐字节复制，所以如果str1和str2的空间有重叠，则会造成覆盖，可以看下面这个例子：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br>    <span class="hljs-built_in">strcpy</span>(str1+<span class="hljs-number">3</span>,str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;after copy, str1 = %s\n&quot;</span>,str1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>拷贝后的空间和源字符串的空间是有重合的，则源字符串内容会被修改，运行结果为：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">after</span> <span class="hljs-keyword">copy</span>, str1 = abcabcdefg1<br></code></pre></td></tr></table></figure><h3 id="2-strncpy"><a href="#2-strncpy" class="headerlink" title="2. strncpy"></a>2. strncpy</h3><p>原型：<code>char *strncpy (char * __dest, const char *__src, size_t __n);</code><br>功能：将一个字符串(<code>__src</code>)拷贝到另一个字符串缓冲区中(<code>__dest</code>)，拷贝<strong>最多不超过</strong><code>__n</code>字节，并返回拷贝后的字符串指针；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;allen junyu&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;anything you can write&quot;</span>;<br>    <span class="hljs-type">char</span>* p=<span class="hljs-built_in">strncpy</span>(str2,str1,<span class="hljs-number">7</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p=%s\n&quot;</span>,p);<br>    p[<span class="hljs-number">7</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p=%s\n&quot;</span>,p);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">p</span><span class="hljs-operator">=</span>allen jg you can write<br><span class="hljs-attribute">p</span><span class="hljs-operator">=</span>allen j12<br></code></pre></td></tr></table></figure><p><strong>注意</strong>: strncpy这个函数并不会自动的在字符串结尾加’\0’，需要我们去增加。</p><h3 id="3-strcat"><a href="#3-strcat" class="headerlink" title="3. strcat"></a>3. strcat</h3><p>原型：<code>char *strcat (char *__dest, const char *__src);</code><br>功能：将一个字符串(<code>__src</code>)拼接到另一个字符串缓冲区中(<code>__dest</code>)，并返回拼接后的字符串指针；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">32</span>] = <span class="hljs-string">&quot;allen&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2 = <span class="hljs-string">&quot;junyu&quot;</span>;<br>    <span class="hljs-type">char</span>* p=<span class="hljs-built_in">strcat</span>(str1,str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p=%s\n&quot;</span>,p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">p</span><span class="hljs-operator">=</span>allenjunyu1<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：同样地，需要保证str1有足够的存储空间，否则，程序会顺着内存地址往后写，破坏其他内存数据。</p><h3 id="4-strncat"><a href="#4-strncat" class="headerlink" title="4. strncat"></a>4. strncat</h3><p>原型：<code>char *strncat (char *__dest, const char *__src, size_t __n);</code><br>功能：将一个字符串(<code>__src</code>)拼接到另一个字符串缓冲区中(<code>__dest</code>)，<strong>最多不超过</strong><code>__n</code>个字节，并返回拼接后的字符串指针；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;allen &quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2=<span class="hljs-string">&quot;junyu&quot;</span>;<br><br>    <span class="hljs-built_in">strncat</span>(str1,str2,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1=%s,length=%d\n&quot;</span>,str1,<span class="hljs-built_in">strlen</span>(str1));<br>    <span class="hljs-built_in">strncat</span>(str1,str2,<span class="hljs-number">1000000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1=%s,length=%d\n&quot;</span>,str1,<span class="hljs-built_in">strlen</span>(str1));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">str1</span>=allen jun,<span class="hljs-attribute">length</span>=9<br><span class="hljs-attribute">str1</span>=allen junjunyu,<span class="hljs-attribute">length</span>=1412<br></code></pre></td></tr></table></figure><h3 id="5-strlen"><a href="#5-strlen" class="headerlink" title="5. strlen"></a>5. strlen</h3><p>原型：<code>size_t strlen (const char *__s);</code><br>功能：返回一个字符串(<code>__src</code>)的长度，即字节(符)数，这里仅考虑ASCII字符；</p><h3 id="6-strcmp"><a href="#6-strcmp" class="headerlink" title="6. strcmp"></a>6. strcmp</h3><p>原型： <code>int strcmp (const char *__s1, const char *__s2);</code><br>功能：比较字符串<code>__s1</code>和字符串<code>__s2</code>，返回比较结果，如果相等，则返回0；<br>比较方式：两个字符串自左向右逐个字符相比（按ASCII值大小相比较），直到出现不同的字符或遇’\0’为止；<br>返回结果：当<code>s1&lt;s2</code>时，返回值&lt;0；当<code>s1=s2</code>时，返回值&#x3D;0；当<code>s1&gt;s2</code>时，返回值&gt;0；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;allen junyu&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;allen junyu&quot;</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strcmp</span>(str1,str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret=%d\n&quot;</span>,ret);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">123456789101112</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ret</span><span class="hljs-operator">=</span><span class="hljs-number">01</span><br></code></pre></td></tr></table></figure><h3 id="7-strncmp"><a href="#7-strncmp" class="headerlink" title="7. strncmp"></a>7. strncmp</h3><p>原型： <code>int strncmp (const char *__s1, const char *__s2, size_t __n);</code><br>功能：比较字符串<code>__s1</code>和字符串<code>__s2</code>的<code>__n</code>个字符，返回比较结果，如果相等，则返回0；<br>比较方式：同strcmp；<br>返回结果：同strcmp；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;allen junyu&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;allen bob&quot;</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strncmp</span>(str1,str2,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ret=%d\n&quot;</span>,ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ret</span><span class="hljs-operator">=</span><span class="hljs-number">01</span><br></code></pre></td></tr></table></figure><h3 id="8-strcasecmp"><a href="#8-strcasecmp" class="headerlink" title="8. strcasecmp"></a>8. strcasecmp</h3><p>原型： <code>int strcasecmp (const char *__s1, const char *__s2);</code><br>功能：比较字符串<code>__s1</code>和字符串<code>__s2</code>，忽略大小写的比较，返回比较结果，如果相等，则返回0；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;allen&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;AlleN&quot;</span>;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strcasecmp</span>(str1,str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcasecmp ret=%d\n&quot;</span>,ret);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">strcasecmp <span class="hljs-attribute">ret</span>=01<br></code></pre></td></tr></table></figure><h3 id="9-strncasecmp"><a href="#9-strncasecmp" class="headerlink" title="9. strncasecmp"></a>9. strncasecmp</h3><p>原型： <code>int strncasecmp (const char *__s1, const char *__s2, size_t __n);</code><br>功能：比较字符串<code>__s1</code>和字符串<code>__s2</code>的<code>__n</code>个字符，忽略大小写的比较，返回比较结果，如果相等，则返回0；<br>例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;allen&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;AlleN junyu&quot;</span>;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">strncasecmp</span>(str1,str2,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strncasecmp ret=%d\n&quot;</span>,ret);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">strncasecmp <span class="hljs-attribute">ret</span>=0<br></code></pre></td></tr></table></figure><h3 id="10-strupr-x2F-strlwr"><a href="#10-strupr-x2F-strlwr" class="headerlink" title="10. strupr&#x2F;strlwr"></a>10. strupr&#x2F;strlwr</h3><p>原型：<code>char *strupr(char *str);</code><br>功能：将字符小写&#x2F;大写字母转换成大写&#x2F;小写<br>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;liegu0317.top&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, strlwr(str));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例-字符串–-gt-整型数"><a href="#案例-字符串–-gt-整型数" class="headerlink" title="案例 - 字符串–&gt;整型数"></a>案例 - 字符串–&gt;整型数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//编写一个程序，将一个有数字构成的字符串转换成一个整型数，例：“1234”--&gt;1234</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;string.h&quot;</span></span><br>main()<br>&#123;<br>    <span class="hljs-type">int</span> i,len,sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个数字字符串：\n&quot;</span>);<br>    gets(ch);<br>    len=<span class="hljs-built_in">strlen</span>(ch);<span class="hljs-comment">//&quot;1234&quot; len =4</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        sum = sum + (ch[i] - ‘<span class="hljs-number">0</span>’)*<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span> ,( len- <span class="hljs-number">1</span>- i));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\&quot;%s\&quot;--&gt;j\&quot;%d\&quot;\n&quot;</span>,ch,sum)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>笔记</tag>
      
      <tag>字符串处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习杂记2|基本数据类型</title>
    <link href="/2022/04/06/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B02-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/04/06/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B02-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/550f2c7db0b5edcf7788a0acc35797e4.png" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/6e92272ba3cd4187b222a709c0574fd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/c6690655a4614c30845b5bc8e2a19e83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/57a345b66d9b4f5ebe704cedb4cc0663.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="请添加图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>基本数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About统信UOS安装</title>
    <link href="/2022/04/01/About%E7%BB%9F%E4%BF%A1UOS%E5%AE%89%E8%A3%85/"/>
    <url>/2022/04/01/About%E7%BB%9F%E4%BF%A1UOS%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="统信UOS安装方式合集"><a href="#统信UOS安装方式合集" class="headerlink" title="统信UOS安装方式合集"></a>统信UOS安装方式合集</h1><p><br> <div class="row">    <embed src="https://liegu0317.gitee.io/AboutUOS/installs.pdf" width="100%" height="550" type="application/pdf"></div> <br></p><h1 id="统信-UOS-镜像安装教程"><a href="#统信-UOS-镜像安装教程" class="headerlink" title="统信 UOS 镜像安装教程"></a>统信 UOS 镜像安装教程</h1><p><br> <div class="row">    <embed src="https://liegu0317.gitee.io/AboutUOS/UOSinstall.pdf" width="100%" height="550" type="application/pdf"></div> <br></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>统信UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统信UOS</tag>
      
      <tag>国产操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gitee图床崩了 我又转到了Github | 封面无法加载</title>
    <link href="/2022/03/29/Gitee%E5%9B%BE%E5%BA%8A%E5%B4%A9%E4%BA%86-%E6%88%91%E5%8F%88%E8%BD%AC%E5%88%B0%E4%BA%86Github/"/>
    <url>/2022/03/29/Gitee%E5%9B%BE%E5%BA%8A%E5%B4%A9%E4%BA%86-%E6%88%91%E5%8F%88%E8%BD%AC%E5%88%B0%E4%BA%86Github/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/5a786df14bc848f19069765c1eeb1bc6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><blockquote><p>2022&#x2F;3&#x2F;24  Gitee图床崩了-博客许多封面无法加载</p></blockquote><p>建站刚开始我是用的GitHub仓库来当做图床，但是国内访问GitHub并不是很方便，还经常进不去</p><p>因此我将图片转到了Gitee上，体验那是相当的好（白嫖怪狂笑）</p><p>但3月24日Gitee图床塌了，不知什么时候能恢复，也不知道能不能恢复</p><p>所以我又把图片迁回了GitHub，然后就有了现在文章封面加载不出来的情况（网络原因）</p><p>如你所见，上面的图片来自<a href="https://blog.csdn.net/liegu0317">我的CSDN</a>，应急用。</p><hr><h1 id="2022-x2F-4-x2F-17"><a href="#2022-x2F-4-x2F-17" class="headerlink" title="2022&#x2F;4&#x2F;17"></a>2022&#x2F;4&#x2F;17</h1><h1 id="GitHub-图床的正确用法，通过-jsDelivr-CDN-全球加速"><a href="#GitHub-图床的正确用法，通过-jsDelivr-CDN-全球加速" class="headerlink" title="GitHub 图床的正确用法，通过 jsDelivr CDN 全球加速"></a><a href="https://cloud.tencent.com/developer/article/1918412">GitHub 图床的正确用法，通过 jsDelivr CDN 全球加速</a></h1>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>Gitee</tag>
      
      <tag>Github</tag>
      
      <tag>jsDelivr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ASCII</title>
    <link href="/2022/03/21/ASC2/"/>
    <url>/2022/03/21/ASC2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/ASC.png" srcset="/img/loading2.gif" lazyload></p><h1 id="ASCII-在线懒人工具"><a href="#ASCII-在线懒人工具" class="headerlink" title="ASCII-在线懒人工具"></a>ASCII-<a href="http://www.ab173.com/doc/ascii.php">在线懒人工具</a></h1><blockquote><p>以下内容来自<a href="http://www.ab173.com/doc/ascii.php">在线懒人工具</a></p></blockquote><blockquote><p>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码，ASCⅡ）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO&#x2F;IEC 646。</p></blockquote><blockquote><p>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符，其中33个字符无法显示（这是以现今操作系统为依归，但在DOS模式下可显示出一些诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符，控制字符的用途主要是用来操控已经处理过的文字，在33个字符之外的是95个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。</p></blockquote><table width="100%" cellspacing="0" cellpadding="0" class="layui-table toolTable"><tbody><tr><th class="separateColor">ASCII值</th><th>控制字符</th><th class="separateColor">ASCII值</th><th>控制字符</th><th class="separateColor">ASCII值</th><th>控制字符</th><th class="separateColor">ASCII值</th><th>控制字符</th></tr><tr><td class="separateColor">0</td><td>NUT</td><td class="separateColor">32</td><td>(space)</td><td class="separateColor">64</td><td>@</td><td class="separateColor">96</td><td>、</td></tr><tr><td class="separateColor">1</td><td>SOH</td><td class="separateColor">33</td><td>!</td><td class="separateColor">65</td><td>A</td><td class="separateColor">97</td><td>a</td></tr><tr><td class="separateColor">2</td><td>STX</td><td class="separateColor">34</td><td>"</td><td class="separateColor">66</td><td>B</td><td class="separateColor">98</td><td>b</td></tr><tr><td class="separateColor">3</td><td>ETX</td><td class="separateColor">35</td><td>#</td><td class="separateColor">67</td><td>C</td><td class="separateColor">99</td><td>c</td></tr><tr><td class="separateColor">4</td><td>EOT</td><td class="separateColor">36</td><td>$</td><td class="separateColor">68</td><td>D</td><td class="separateColor">100</td><td>d</td></tr><tr><td class="separateColor">5</td><td>ENQ</td><td class="separateColor">37</td><td>%</td><td class="separateColor">69</td><td>E</td><td class="separateColor">101</td><td>e</td></tr><tr><td class="separateColor">6</td><td>ACK</td><td class="separateColor">38</td><td>&amp;</td><td class="separateColor">70</td><td>F</td><td class="separateColor">102</td><td>f</td></tr><tr><td class="separateColor">7</td><td>BEL</td><td class="separateColor">39</td><td>,</td><td class="separateColor">71</td><td>G</td><td class="separateColor">103</td><td>g</td></tr><tr><td class="separateColor">8</td><td>BS</td><td class="separateColor">40</td><td>(</td><td class="separateColor">72</td><td>H</td><td class="separateColor">104</td><td>h</td></tr><tr><td class="separateColor">9</td><td>HT</td><td class="separateColor">41</td><td>)</td><td class="separateColor">73</td><td>I</td><td class="separateColor">105</td><td>i</td></tr><tr><td class="separateColor">10</td><td>LF</td><td class="separateColor">42</td><td>*</td><td class="separateColor">74</td><td>J</td><td class="separateColor">106</td><td>j</td></tr><tr><td class="separateColor">11</td><td>VT</td><td class="separateColor">43</td><td>+</td><td class="separateColor">75</td><td>K</td><td class="separateColor">107</td><td>k</td></tr><tr><td class="separateColor">12</td><td>FF</td><td class="separateColor">44</td><td>,</td><td class="separateColor">76</td><td>L</td><td class="separateColor">108</td><td>l</td></tr><tr><td class="separateColor">13</td><td>CR</td><td class="separateColor">45</td><td>-</td><td class="separateColor">77</td><td>M</td><td class="separateColor">109</td><td>m</td></tr><tr><td class="separateColor">14</td><td>SO</td><td class="separateColor">46</td><td>.</td><td class="separateColor">78</td><td>N</td><td class="separateColor">110</td><td>n</td></tr><tr><td class="separateColor">15</td><td>SI</td><td class="separateColor">47</td><td>/</td><td class="separateColor">79</td><td>O</td><td class="separateColor">111</td><td>o</td></tr><tr><td class="separateColor">16</td><td>DLE</td><td class="separateColor">48</td><td>0</td><td class="separateColor">80</td><td>P</td><td class="separateColor">112</td><td>p</td></tr><tr><td class="separateColor">17</td><td>DCI</td><td class="separateColor">49</td><td>1</td><td class="separateColor">81</td><td>Q</td><td class="separateColor">113</td><td>q</td></tr><tr><td class="separateColor">18</td><td>DC2</td><td class="separateColor">50</td><td>2</td><td class="separateColor">82</td><td>R</td><td class="separateColor">114</td><td>r</td></tr><tr><td class="separateColor">19</td><td>DC3</td><td class="separateColor">51</td><td>3</td><td class="separateColor">83</td><td>S</td><td class="separateColor">115</td><td>s</td></tr><tr><td class="separateColor">20</td><td>DC4</td><td class="separateColor">52</td><td>4</td><td class="separateColor">84</td><td>T</td><td class="separateColor">116</td><td>t</td></tr><tr><td class="separateColor">21</td><td>NAK</td><td class="separateColor">53</td><td>5</td><td class="separateColor">85</td><td>U</td><td class="separateColor">117</td><td>u</td></tr><tr><td class="separateColor">22</td><td>SYN</td><td class="separateColor">54</td><td>6</td><td class="separateColor">86</td><td>V</td><td class="separateColor">118</td><td>v</td></tr><tr><td class="separateColor">23</td><td>TB</td><td class="separateColor">55</td><td>7</td><td class="separateColor">87</td><td>W</td><td class="separateColor">119</td><td>w</td></tr><tr><td class="separateColor">24</td><td>CAN</td><td class="separateColor">56</td><td>8</td><td class="separateColor">88</td><td>X</td><td class="separateColor">120</td><td>x</td></tr><tr><td class="separateColor">25</td><td>EM</td><td class="separateColor">57</td><td>9</td><td class="separateColor">89</td><td>Y</td><td class="separateColor">121</td><td>y</td></tr><tr><td class="separateColor">26</td><td>SUB</td><td class="separateColor">58</td><td>:</td><td class="separateColor">90</td><td>Z</td><td class="separateColor">122</td><td>z</td></tr><tr><td class="separateColor">27</td><td>ESC</td><td class="separateColor">59</td><td>;</td><td class="separateColor">91</td><td>[</td><td class="separateColor">123</td><td>{</td></tr><tr><td class="separateColor">28</td><td>FS</td><td class="separateColor">60</td><td>&lt;</td><td class="separateColor">92</td><td>/</td><td class="separateColor">124</td><td>|</td></tr><tr><td class="separateColor">29</td><td>GS</td><td class="separateColor">61</td><td>=</td><td class="separateColor">93</td><td>]</td><td class="separateColor">125</td><td>}</td></tr><tr><td class="separateColor">30</td><td>RS</td><td class="separateColor">62</td><td>&gt;</td><td class="separateColor">94</td><td>^</td><td class="separateColor">126</td><td>`</td></tr><tr><td class="separateColor">31</td><td>US</td><td class="separateColor">63</td><td>?</td><td class="separateColor">95</td><td>_</td><td class="separateColor">127</td><td>DEL</td></tr></tbody></table><table class="layui-table toolTable" width="100%" cellspacing="0" cellpadding="0"><caption>特殊字符解释</caption><tbody><tr><th>NUL空</th><th>VT 垂直制表</th><th>SYN 空转同步</th></tr><tr><td>STX 正文开始</td><td>CR 回车</td><td>CAN 作废</td></tr><tr><td>ETX 正文结束</td><td>SO 移位输出</td><td>EM 纸尽</td></tr><tr><td>EOY 传输结束</td><td>SI 移位输入</td><td>SUB 换置</td></tr><tr><td>ENQ 询问字符</td><td>DLE 空格</td><td>ESC 换码</td></tr><tr><td>ACK 承认</td><td>DC1 设备控制1</td><td>FS 文字分隔符</td></tr><tr><td>BEL 报警</td><td>DC2 设备控制2</td><td>GS 组分隔符</td></tr><tr><td>BS 退一格</td><td>DC3 设备控制3</td><td>RS 记录分隔符</td></tr><tr><td>HT 横向列表</td><td>DC4 设备控制4</td><td>US 单元分隔符</td></tr><tr><td>LF 换行</td><td>NAK 否定</td><td>DEL 删除</td></tr></tbody></table><h1 id="ASCII-C语言学习中文网"><a href="#ASCII-C语言学习中文网" class="headerlink" title="ASCII- C语言学习中文网"></a>ASCII- <a href="http://c.biancheng.net/c/ascii/">C语言学习中文网</a></h1><blockquote><p>以下内容来自<a href="http://c.biancheng.net/c/ascii/">C语言学习中文网</a></p></blockquote><div id="arc-body"><style type="text/css">table tr.bg-ctrl{background-color: #ffffe0;}#art-body ul h4{background-color:#eee;}</style>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）是一套基于拉丁字母的字符编码，共收录了 128 个字符，用一个字节就可以存储，它等同于国际标准&nbsp;ISO/IEC 646。<br><br>ASCII 规范于 1967 年第一次发布，最后一次更新是在 1986 年，它包含了 33 个控制字符（具有某些特殊功能但是无法显示的字符）和 95 个可显示字符。<br><br><table><caption>ASCII 编码一览表（淡黄色背景为控制字符，白色背景为可显示字符）</caption><tbody><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>字符/缩写</th><th>解释</th></tr><tr class="bg-ctrl"><td>00000000</td><td>0</td><td>00</td><td>NUL (NULL)</td><td>空字符</td></tr><tr class="bg-ctrl"><td>00000001</td><td>1</td><td>01</td><td>SOH (Start Of Headling)</td><td>标题开始</td></tr><tr class="bg-ctrl"><td>00000010</td><td>2</td><td>02</td><td>STX (Start Of Text)</td><td>正文开始</td></tr><tr class="bg-ctrl"><td>00000011</td><td>3</td><td>03</td><td>ETX (End Of Text)</td><td>正文结束</td></tr><tr class="bg-ctrl"><td>00000100</td><td>4</td><td>04</td><td>EOT (End Of Transmission)</td><td>传输结束</td></tr><tr class="bg-ctrl"><td>00000101</td><td>5</td><td>05</td><td>ENQ (Enquiry)</td><td>请求</td></tr><tr class="bg-ctrl"><td>00000110</td><td>6</td><td>06</td><td>ACK (Acknowledge)</td><td>回应/响应/收到通知</td></tr><tr class="bg-ctrl"><td>00000111</td><td>7</td><td>07</td><td>BEL (Bell)</td><td>响铃</td></tr><tr class="bg-ctrl"><td>00001000</td><td>8</td><td>08</td><td>BS (Backspace)</td><td>退格</td></tr><tr class="bg-ctrl"><td>00001001</td><td>9</td><td>09</td><td>HT (Horizontal Tab)</td><td>水平制表符</td></tr><tr class="bg-ctrl"><td>00001010</td><td>10</td><td>0A</td><td>LF/NL(Line Feed/New Line)</td><td>换行键</td></tr><tr class="bg-ctrl"><td>00001011</td><td>11</td><td>0B</td><td>VT (Vertical Tab)</td><td>垂直制表符</td></tr><tr class="bg-ctrl"><td>00001100</td><td>12</td><td>0C</td><td>FF/NP (Form Feed/New Page)</td><td>换页键</td></tr><tr class="bg-ctrl"><td>00001101</td><td>13</td><td>0D</td><td>CR (Carriage Return)</td><td>回车键</td></tr><tr class="bg-ctrl"><td>00001110</td><td>14</td><td>0E</td><td>SO (Shift Out)</td><td>不用切换</td></tr><tr class="bg-ctrl"><td>00001111</td><td>15</td><td>0F</td><td>SI (Shift In)</td><td>启用切换</td></tr><tr class="bg-ctrl"><td>00010000</td><td>16</td><td>10</td><td>DLE (Data Link Escape)</td><td>数据链路转义</td></tr><tr class="bg-ctrl"><td>00010001</td><td>17</td><td>11</td><td>DC1/XON<br>(Device Control 1/Transmission On)</td><td>设备控制1/传输开始</td></tr><tr class="bg-ctrl"><td>00010010</td><td>18</td><td>12</td><td>DC2 (Device Control 2)</td><td>设备控制2</td></tr><tr class="bg-ctrl"><td>00010011</td><td>19</td><td>13</td><td>DC3/XOFF<br>(Device Control 3/Transmission Off)</td><td>设备控制3/传输中断</td></tr><tr class="bg-ctrl"><td>00010100</td><td>20</td><td>14</td><td>DC4 (Device Control 4)</td><td>设备控制4</td></tr><tr class="bg-ctrl"><td>00010101</td><td>21</td><td>15</td><td>NAK (Negative Acknowledge)</td><td>无响应/非正常响应/拒绝接收</td></tr><tr class="bg-ctrl"><td>00010110</td><td>22</td><td>16</td><td>SYN (Synchronous Idle)</td><td>同步空闲</td></tr><tr class="bg-ctrl"><td>00010111</td><td>23</td><td>17</td><td>ETB (End of Transmission Block)</td><td>传输块结束/块传输终止</td></tr><tr class="bg-ctrl"><td>00011000</td><td>24</td><td>18</td><td>CAN (Cancel)</td><td>取消</td></tr><tr class="bg-ctrl"><td>00011001</td><td>25</td><td>19</td><td>EM (End of Medium)</td><td>已到介质末端/介质存储已满/介质中断</td></tr><tr class="bg-ctrl"><td>00011010</td><td>26</td><td>1A</td><td>SUB (Substitute)</td><td>替补/替换</td></tr><tr class="bg-ctrl"><td>00011011</td><td>27</td><td>1B</td><td>ESC (Escape)</td><td>逃离/取消</td></tr><tr class="bg-ctrl"><td>00011100</td><td>28</td><td>1C</td><td>FS (File Separator)</td><td>文件分割符</td></tr><tr class="bg-ctrl"><td>00011101</td><td>29</td><td>1D</td><td>GS (Group Separator)</td><td>组分隔符/分组符</td></tr><tr class="bg-ctrl"><td>00011110</td><td>30</td><td>1E</td><td>RS (Record Separator)</td><td>记录分离符</td></tr><tr class="bg-ctrl"><td>00011111</td><td>31</td><td>1F</td><td>US (Unit Separator)</td><td>单元分隔符</td></tr><tr><td>00100000</td><td>32</td><td>20</td><td>(Space)</td><td>空格</td></tr><tr><td>00100001</td><td>33</td><td>21</td><td>!</td><td>&nbsp;</td></tr><tr><td>00100010</td><td>34</td><td>22</td><td>"</td><td>&nbsp;</td></tr><tr><td>00100011</td><td>35</td><td>23</td><td>#</td><td>&nbsp;</td></tr><tr><td>00100100</td><td>36</td><td>24</td><td>$</td><td>&nbsp;</td></tr><tr><td>00100101</td><td>37</td><td>25</td><td>%</td><td>&nbsp;</td></tr><tr><td>00100110</td><td>38</td><td>26</td><td>&amp;</td><td>&nbsp;</td></tr><tr><td>00100111</td><td>39</td><td>27</td><td>'</td><td>&nbsp;</td></tr><tr><td>00101000</td><td>40</td><td>28</td><td>(</td><td>&nbsp;</td></tr><tr><td>00101001</td><td>41</td><td>29</td><td>)</td><td>&nbsp;</td></tr><tr><td>00101010</td><td>42</td><td>2A</td><td>*</td><td>&nbsp;</td></tr><tr><td>00101011</td><td>43</td><td>2B</td><td>+</td><td>&nbsp;</td></tr><tr><td>00101100</td><td>44</td><td>2C</td><td>,</td><td>&nbsp;</td></tr><tr><td>00101101</td><td>45</td><td>2D</td><td>-</td><td>&nbsp;</td></tr><tr><td>00101110</td><td>46</td><td>2E</td><td>.</td><td>&nbsp;</td></tr><tr><td>00101111</td><td>47</td><td>2F</td><td>/</td><td>&nbsp;</td></tr><tr><td>00110000</td><td>48</td><td>30</td><td>0</td><td>&nbsp;</td></tr><tr><td>00110001</td><td>49</td><td>31</td><td>1</td><td>&nbsp;</td></tr><tr><td>00110010</td><td>50</td><td>32</td><td>2</td><td>&nbsp;</td></tr><tr><td>00110011</td><td>51</td><td>33</td><td>3</td><td>&nbsp;</td></tr><tr><td>00110100</td><td>52</td><td>34</td><td>4</td><td>&nbsp;</td></tr><tr><td>00110101</td><td>53</td><td>35</td><td>5</td><td>&nbsp;</td></tr><tr><td>00110110</td><td>54</td><td>36</td><td>6</td><td>&nbsp;</td></tr><tr><td>00110111</td><td>55</td><td>37</td><td>7</td><td>&nbsp;</td></tr><tr><td>00111000</td><td>56</td><td>38</td><td>8</td><td>&nbsp;</td></tr><tr><td>00111001</td><td>57</td><td>39</td><td>9</td><td>&nbsp;</td></tr><tr><td>00111010</td><td>58</td><td>3A</td><td>:</td><td>&nbsp;</td></tr><tr><td>00111011</td><td>59</td><td>3B</td><td>;</td><td>&nbsp;</td></tr><tr><td>00111100</td><td>60</td><td>3C</td><td>&lt;</td><td>&nbsp;</td></tr><tr><td>00111101</td><td>61</td><td>3D</td><td>=</td><td>&nbsp;</td></tr><tr><td>00111110</td><td>62</td><td>3E</td><td>&gt;</td><td>&nbsp;</td></tr><tr><td>00111111</td><td>63</td><td>3F</td><td>?</td><td>&nbsp;</td></tr><tr><td>01000000</td><td>64</td><td>40</td><td>@</td><td>&nbsp;</td></tr><tr><td>01000001</td><td>65</td><td>41</td><td>A</td><td>&nbsp;</td></tr><tr><td>01000010</td><td>66</td><td>42</td><td>B</td><td>&nbsp;</td></tr><tr><td>01000011</td><td>67</td><td>43</td><td>C</td><td>&nbsp;</td></tr><tr><td>01000100</td><td>68</td><td>44</td><td>D</td><td>&nbsp;</td></tr><tr><td>01000101</td><td>69</td><td>45</td><td>E</td><td>&nbsp;</td></tr><tr><td>01000110</td><td>70</td><td>46</td><td>F</td><td>&nbsp;</td></tr><tr><td>01000111</td><td>71</td><td>47</td><td>G</td><td>&nbsp;</td></tr><tr><td>01001000</td><td>72</td><td>48</td><td>H</td><td>&nbsp;</td></tr><tr><td>01001001</td><td>73</td><td>49</td><td>I</td><td>&nbsp;</td></tr><tr><td>01001010</td><td>74</td><td>4A</td><td>J</td><td>&nbsp;</td></tr><tr><td>01001011</td><td>75</td><td>4B</td><td>K</td><td>&nbsp;</td></tr><tr><td>01001100</td><td>76</td><td>4C</td><td>L</td><td>&nbsp;</td></tr><tr><td>01001101</td><td>77</td><td>4D</td><td>M</td><td>&nbsp;</td></tr><tr><td>01001110</td><td>78</td><td>4E</td><td>N</td><td>&nbsp;</td></tr><tr><td>01001111</td><td>79</td><td>4F</td><td>O</td><td>&nbsp;</td></tr><tr><td>01010000</td><td>80</td><td>50</td><td>P</td><td>&nbsp;</td></tr><tr><td>01010001</td><td>81</td><td>51</td><td>Q</td><td>&nbsp;</td></tr><tr><td>01010010</td><td>82</td><td>52</td><td>R</td><td>&nbsp;</td></tr><tr><td>01010011</td><td>83</td><td>53</td><td>S</td><td>&nbsp;</td></tr><tr><td>01010100</td><td>84</td><td>54</td><td>T</td><td>&nbsp;</td></tr><tr><td>01010101</td><td>85</td><td>55</td><td>U</td><td>&nbsp;</td></tr><tr><td>01010110</td><td>86</td><td>56</td><td>V</td><td>&nbsp;</td></tr><tr><td>01010111</td><td>87</td><td>57</td><td>W</td><td>&nbsp;</td></tr><tr><td>01011000</td><td>88</td><td>58</td><td>X</td><td>&nbsp;</td></tr><tr><td>01011001</td><td>89</td><td>59</td><td>Y</td><td>&nbsp;</td></tr><tr><td>01011010</td><td>90</td><td>5A</td><td>Z</td><td>&nbsp;</td></tr><tr><td>01011011</td><td>91</td><td>5B</td><td>[</td><td>&nbsp;</td></tr><tr><td>01011100</td><td>92</td><td>5C</td><td>\</td><td>&nbsp;</td></tr><tr><td>01011101</td><td>93</td><td>5D</td><td>]</td><td>&nbsp;</td></tr><tr><td>01011110</td><td>94</td><td>5E</td><td>^</td><td>&nbsp;</td></tr><tr><td>01011111</td><td>95</td><td>5F</td><td>_</td><td>&nbsp;</td></tr><tr><td>01100000</td><td>96</td><td>60</td><td>`</td><td>&nbsp;</td></tr><tr><td>01100001</td><td>97</td><td>61</td><td>a</td><td>&nbsp;</td></tr><tr><td>01100010</td><td>98</td><td>62</td><td>b</td><td>&nbsp;</td></tr><tr><td>01100011</td><td>99</td><td>63</td><td>c</td><td>&nbsp;</td></tr><tr><td>01100100</td><td>100</td><td>64</td><td>d</td><td>&nbsp;</td></tr><tr><td>01100101</td><td>101</td><td>65</td><td>e</td><td>&nbsp;</td></tr><tr><td>01100110</td><td>102</td><td>66</td><td>f</td><td>&nbsp;</td></tr><tr><td>01100111</td><td>103</td><td>67</td><td>g</td><td>&nbsp;</td></tr><tr><td>01101000</td><td>104</td><td>68</td><td>h</td><td>&nbsp;</td></tr><tr><td>01101001</td><td>105</td><td>69</td><td>i</td><td>&nbsp;</td></tr><tr><td>01101010</td><td>106</td><td>6A</td><td>j</td><td>&nbsp;</td></tr><tr><td>01101011</td><td>107</td><td>6B</td><td>k</td><td>&nbsp;</td></tr><tr><td>01101100</td><td>108</td><td>6C</td><td>l</td><td>&nbsp;</td></tr><tr><td>01101101</td><td>109</td><td>6D</td><td>m</td><td>&nbsp;</td></tr><tr><td>01101110</td><td>110</td><td>6E</td><td>n</td><td>&nbsp;</td></tr><tr><td>01101111</td><td>111</td><td>6F</td><td>o</td><td>&nbsp;</td></tr><tr><td>01110000</td><td>112</td><td>70</td><td>p</td><td>&nbsp;</td></tr><tr><td>01110001</td><td>113</td><td>71</td><td>q</td><td>&nbsp;</td></tr><tr><td>01110010</td><td>114</td><td>72</td><td>r</td><td>&nbsp;</td></tr><tr><td>01110011</td><td>115</td><td>73</td><td>s</td><td>&nbsp;</td></tr><tr><td>01110100</td><td>116</td><td>74</td><td>t</td><td>&nbsp;</td></tr><tr><td>01110101</td><td>117</td><td>75</td><td>u</td><td>&nbsp;</td></tr><tr><td>01110110</td><td>118</td><td>76</td><td>v</td><td>&nbsp;</td></tr><tr><td>01110111</td><td>119</td><td>77</td><td>w</td><td>&nbsp;</td></tr><tr><td>01111000</td><td>120</td><td>78</td><td>x</td><td>&nbsp;</td></tr><tr><td>01111001</td><td>121</td><td>79</td><td>y</td><td>&nbsp;</td></tr><tr><td>01111010</td><td>122</td><td>7A</td><td>z</td><td>&nbsp;</td></tr><tr><td>01111011</td><td>123</td><td>7B</td><td>{</td><td>&nbsp;</td></tr><tr><td>01111100</td><td>124</td><td>7C</td><td>|</td><td>&nbsp;</td></tr><tr><td>01111101</td><td>125</td><td>7D</td><td>}</td><td>&nbsp;</td></tr><tr><td>01111110</td><td>126</td><td>7E</td><td>~</td><td>&nbsp;</td></tr><tr class="bg-ctrl"><td>01111111</td><td>127</td><td>7F</td><td>DEL (Delete)</td><td>删除</td></tr></tbody></table><h2>对控制字符的解释</h2>ASCII 编码中第 0~31 个字符（开头的 32 个字符）以及第 127 个字符（最后一个字符）都是不可见的（无法显示），但是它们都具有一些特殊功能，所以称为<span style="color:#008000;">控制字符（&nbsp;Control Character）</span>或者<span style="color:#008000;">功能码（Function Code）</span>。<br><br>这 33 个控制字符大都与通信、数据存储以及老式设备有关，有些在现代电脑中的含义已经改变了。<blockquote>有些控制符需要一定的计算机功底才能理解，初学者可以跳过，选择容易的理解即可。</blockquote>下面列出了部分控制字符的具体功能：<ul><li><h4>NUL (0)</h4>NULL，空字符。空字符起初本意可以看作为 NOP（中文意为空操作，就是啥都不做的意思），此位置可以忽略一个字符。<br><br>之所以有这个空字符，主要是用于计算机早期的记录信息的纸带，此处留个 NUL 字符，意思是先占这个位置，以待后用，比如你哪天想起来了，在这个位置在放一个别的啥字符之类的。<br><br>后来呢，NUL 被用于C语言中，表示字符串的结束，当一个字符串中间出现 NUL 时，就意味着这个是一个字符串的结尾了。这样就方便按照自己需求去定义字符串，多长都行，当然只要你内存放得下，然后最后加一个\0，即空字符，意思是当前字符串到此结束。</li><li><h4>SOH (1)</h4>Start Of Heading，标题开始。如果信息沟通交流主要以命令和消息的形式的话，SOH 就可以用于标记每个消息的开始。<br><br>1963年，最开始 ASCII 标准中，把此字符定义为 Start of Message，后来又改为现在的 Start Of Heading。<br><br>现在，这个 SOH 常见于主从（master-slave）模式的 RS232 的通信中，一个主设备，以 SOH 开头，和从设备进行通信。这样方便从设备在数据传输出现错误的时候，在下一次通信之前，去实现重新同步（resynchronize）。如果没有一个清晰的类似于 SOH 这样的标记，去标记每个命令的起始或开头的话，那么重新同步，就很难实现了。</li><li><h4>STX (2) 和 ETX (3)</h4>STX 表示 Start Of Text，意思是“文本开始”；ETX 表示 End Of Text，意思是“文本结束”。<br><br>通过某种通讯协议去传输的一个数据（包），称为一帧的话，常会包含一个帧头，包含了寻址信息，即你是要发给谁，要发送到目的地是哪里，其后跟着真正要发送的数据内容。<br><br>而 STX，就用于标记这个数据内容的开始。接下来是要传输的数据，最后是 ETX，表明数据的结束。<br><br>而中间具体传输的数据内容，ASCII 并没有去定义，它和你所用的传输协议有关。<table><tbody><tr><th colspan="2">帧头</th><th colspan="3">数据或文本内容</th></tr><tr><td>SOH（表明帧头开始）</td><td>......（帧头信息，比如包含了目的地址，表明你发送给谁等等）</td><td>STX（表明数据开始）</td><td>......（真正要传输的数据）</td><td>ETX（表明数据结束</td></tr></tbody></table></li><li><h4>BEL (7)</h4>BELl，响铃。在 ASCII 编码中，BEL 是个比较有意思的东西。BEL 用一个可以听得见的声音来吸引人们的注意，既可以用于计算机，也可以用于周边设备（比如打印机）。<br><br>注意，BEL 不是声卡或者喇叭发出的声音，而是蜂鸣器发出的声音，主要用于报警，比如硬件出现故障时就会听到这个声音，有的计算机操作系统正常启动也会听到这个声音。蜂鸣器没有直接安装到主板上，而是需要连接到主板上的一种外设，现代很多计算机都不安装蜂鸣器了，即使输出 BEL 也听不到声音，这个时候 BEL 就没有任何作用了。</li><li><h4>BS (8)</h4>BackSpace，退格键。退格键的功能，随着时间变化，意义也变得不同了。<br><br>退格键起初的意思是，在打印机和电传打字机上，往回移动一格光标，以起到强调该字符的作用。比如你想要打印一个 a，然后加上退格键后，就成了 aBS^。在机械类打字机上，此方法能够起到实际的强调字符的作用，但是对于后来的 CTR 下时期来说，就无法起到对应效果了。<br><br>而现代所用的退格键，不仅仅表示光标往回移动了一格，同时也删除了移动后该位置的字符。</li><li><h4>HT (9)</h4>Horizontal Tab，水平制表符，相当于 Table/Tab 键。<br><br>水平制表符的作用是用于布局，它控制输出设备前进到下一个表格去处理。而制表符 Table/Tab 的宽度也是灵活不固定的，只不过在多数设备上制表符 Tab 都预定义为 4 个空格的宽度。<br><br>水平制表符 HT 不仅能减少数据输入者的工作量，对于格式化好的文字来说，还能够减少存储空间，因为一个Tab键，就代替了 4 个空格。</li><li><h4>LF (10)</h4>Line Feed，直译为“给打印机等喂一行”，也就是“换行”的意思。LF 是 ASCII 编码中常被误用的字符之一。<br><br>LF 的最原始的含义是，移动打印机的头到下一行。而另外一个 ASCII 字符，CR（Carriage Return）才是将打印机的头移到最左边，即一行的开始（行首）。很多串口协议和 MS-DOS 及 Windows 操作系统，也都是这么实现的。<br><br>而C语言和 Unix 操作系统将 LF 的含义重新定义为“新行”，即 LF 和 CR 的组合效果，也就是回车且换行的意思。<br><br>从程序的角度出发，C语言和 Unix 对 LF 的定义显得更加自然，而 MS-DOS 的实现更接近于 LF 的本意。<br><br>现在人们常将 LF 用做“新行（newline）”的功能，大多数文本编辑软件也都可以处理单个 LF 或者 CR/LF 的组合了。</li><li><h4>VT (11)</h4>Vertical Tab，垂直制表符。它类似于水平制表符 Tab，目的是为了减少布局中的工作，同时也减少了格式化字符时所需要存储字符的空间。VT 控制符用于跳到下一个标记行。<br><br>说实话，还真没看到有些地方需要用 VT，因为一般在换行的时候都是用 LF 代替 VT 了。</li><li><h4>FF (12)</h4>Form Feed，换页。设计换页键，是用来控制打印机行为的。当打印机收到此键码的时候，打印机移动到下一页。<br><br>不同的设备的终端对此控制符所表现的行为各不同，有些会清除屏幕，有些只是显示<code>^L</code>字符，有些只是新换一行而已。例如，Unix/Linux 下的 Bash Shell 和 Tcsh 就把 FF 看做是一个清空屏幕的命令。</li><li><h4>CR (13)</h4>Carriage return，回车，表示机器的滑动部分（或者底座）返回。<br><br>CR 回车的原意是让打印头回到左边界，并没有移动到下一行的意思。随着时间的流逝，后来人们把 CR 的意思弄成了 Enter 键，用于示意输入完毕。<br><br>在数据以屏幕显示的情况下，人们按下 Enter 的同时，也希望把光标移动到下一行，因此C语言和 Unix 重新定义了 CR 的含义，将其表示为移动到下一行。当输入 CR 时，系统也常常隐式地将其转换为LF。</li><li><h4>SO (14) 和 SI (15)</h4>SO，Shift Out，不用切换；SI，Shift In，启用切换。<br><br>早在 1960s 年代，设计 ASCII 编码的美国人就已经想到了，ASCII 编码不仅仅能用于英文，也要能用于外文字符集，这很重要，定义 Shift In 和 Shift Out 正是考虑到了这点。<br><br>最开始，其意为在西里尔语和拉丁语之间切换。西里尔语 ASCII（也即 KOI-7 编码）将 Shift 作为一个普通字符，而拉丁语 ASCII（也就是我们通常所说的 ASCII）用 Shift 去改变打印机的字体，它们完全是两种含义。<br><br>在拉丁语 ASCII 中，SO 用于产生双倍宽度的字符（类似于全角），而用 SI 打印压缩的字体（类似于半角）。</li><li><h4>DLE (16)</h4>Data Link Escape，数据链路转义。<br><br>有时候我们需要在通信过程中发送一些控制字符，但是总有一些情况下，这些控制字符被看成了普通的数据流，而没有起到对应的控制效果，ASCII 编码引入 DLE 来解决这类问题。<br><br>如果数据流中检测到了 DLE，数据接收端会对数据流中接下来的字符另作处理。但是具体如何处理，ASCII 规范中并没有定义，只是弄了个 DLE 去打断正常的数据流，告诉接下来的数据要特殊对待。</li><li><h4>DC1 (17)</h4>Device Control 1，或者 XON – Transmission on。<br><br>这个 ASCII 控制符尽管原先定义为 DC1， 但是现在常表示为 XON，用于串行通信中的软件流控制。其主要作用为，在通信被控制符 XOFF 中断之后，重新开始信息传输。<br><br>用过串行终端的人应该还记得，当有时候数据出错了，按 Ctrl+Q（等价于XON）有时候可以起到重新传输的效果。这是因为，此 Ctrl+Q 键盘序列实际上就是产生 XON 控制符，它可以将那些由于终端或者主机方面，由于偶尔出现的错误的 XOFF 控制符而中断的通信解锁，使其正常通信。</li><li><h4>DC3 (19)</h4>Device Control 3，或者 XOFF（Transmission off，传输中断）。<h4>EM (25)</h4>End of Medium，已到介质末端，介质存储已满。<br><br>EM 用于，当数据存储到达串行存储介质末尾的时候，就像磁带或磁头滚动到介质末尾一样。其用于表述数据的逻辑终点，即不必非要是物理上的达到数据载体的末尾。</li><li><h4>FS(28)</h4>File Separator，文件分隔符。FS 是个很有意思的控制字符，它可以让我们看到 1960s 年代的计算机是如何组织的。<br><br>我们现在习惯于随机访问一些存储介质，比如 RAM、磁盘等，但是在设计 ASCII 编码的那个年代，大部分数据还是顺序的、串行的，而不是随机访问的。此处所说的串行，不仅仅指的是串行通信，还指的是顺序存储介质，比如穿孔卡片、纸带、磁带等。<br><br>在串行通信的时代，设计这么一个用于表示文件分隔的控制字符，用于分割两个单独的文件，是一件很明智的事情。</li><li><h4>GS(29)</h4>Group Separator，分组符。<br><br>ASCII 定义控制字符的原因之一就是考虑到了数据存储。<br><br>大部分情况下，数据库的建立都和表有关，表包含了多条记录。同一个表中的所有记录属于同一类型，不同的表中的记录属于不同的类型。<br><br>而分组符 GS 就是用来分隔串行数据存储系统中的不同的组。值得注意的是，当时还没有使用 Excel 表格，ASCII 时代的人把它叫做组。</li><li><h4>RS(30)</h4>Record Separator，记录分隔符，用于分隔一个组或表中的多条记录。</li><li><h4>US(31)</h4>Unit Separator，单元分隔符。<br><br>在 ASCII 定义中，数据库中所存储的最小的数据项叫做单元（Unit）。而现在我们称其字段（Field）。单元分隔符 US 用于分割串行数据存储环境下的不同单元。<br><br>现在的数据库实现都要求大部分类型都拥有固定的长度，尽管有时候可能用不到，但是对于每一个字段，却都要分配足够大的空间，用于存放最大可能的数据。<br><br>这种做法的弊端就是占用了大量的存储空间，而 US 控制符允许字段具有可变的长度。在 1960s 年代，数据存储空间很有限，用 US 将不同单元分隔开，能节省很多空间。</li><li><h4>DEL (127)</h4>Delete，删除。<br><br>有人也许会问，为何 ASCII 编码中其它控制字符的值都很小（即 0~31），而 DEL 的值却很大呢（为 127）？<br><br>这是由于这个特殊的字符是为纸带而定义的。在那个年代，绝大多数的纸带都是用7个孔洞去编码数据的。而 127 这个值所对应的二进制值为111 1111（所有 7 个比特位都是1），将 DEL 用在现存的纸带上时，所有的洞就都被穿孔了，就把已经存在的数据都擦除掉了，就起到了删除的作用。</li></ul><br>也有人将 ASCII 编码分成两部分：<ul><li>前 128 个字符称为基本 ASCII，包含常见字符；</li><li>后 128 个字符称为扩展 ASCII，包含一些特殊字符。</li></ul><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASCII</tag>
      
      <tag>国际标准</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从深度deepin到统信UOS，因理想而出生，为责任而成长</title>
    <link href="/2022/03/18/UOS01/"/>
    <url>/2022/03/18/UOS01/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/b8e1631aee8f441a956a440665f311b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" srcset="/img/loading2.gif" lazyload><br>视频发布于2021年10月，<em>当时系统体验并不好</em>，但经过大版本更新，现在（2022&#x2F;3&#x2F;19 20.1版本）<strong>系统体验一定会惊艳到你</strong></p><blockquote><p> 有些事情不亲自体验，你永远不会知道他有多好</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=975863371&bvid=BV1K44y1t7mn&cid=416935593&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p><img src="https://img-blog.csdnimg.cn/0bb0836f6144449fb57909a94c543577.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>统信UOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>统信UOS</tag>
      
      <tag>国产操作系统</tag>
      
      <tag>统信软件</tag>
      
      <tag>深度操作系统</tag>
      
      <tag>Deepin</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记P2|7-10课</title>
    <link href="/2022/03/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0p2/"/>
    <url>/2022/03/18/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0p2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/img_convert/550f2c7db0b5edcf7788a0acc35797e4.png" srcset="/img/loading2.gif" lazyload></p><p><a href="#%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0">点击此处跳转至最近更新</a></p><h1 id="第七课"><a href="#第七课" class="headerlink" title="第七课"></a>第七课</h1><h2 id="printf使用"><a href="#printf使用" class="headerlink" title="printf使用"></a>printf使用</h2><blockquote><p>printf函数称为格式输出函数，其关键字最末一个字母f即为“格式”(format)之意。其功能是按用户指定的格式，把指定的数据显示到显示器屏幕上。  </p></blockquote><ul><li><a href="http://c.biancheng.net/cpp/html/33.html">C语言格式输出函数printf()详解</a></li></ul><table><thead><tr><th align="left">一语句，两个参数，三个选项</th><th align="left">格式控制</th><th align="left">操作对象列表</th></tr></thead><tbody><tr><td align="left">printf(“格式控制”,输出列表);<br>功能：按照“格式控制”格式输出一个或多个任意数据</td><td align="left">1 格式字符；<br>2 有提示串原样输出；<br>3 转义字符用于输出操作行为，如退格、换行、回车</td><td align="left">可以是常量，变量，表达式，其个数与格式控制参数中的格式字符数相同</td></tr><tr><td align="left">scanf(“格式控制”,地址列表);<br>功能：按照“格式控制”格式从键盘接收若干个数据，依次存入“地址列表“对应的变量</td><td align="left">1 格式字符<br>2 有提示串，则输入数据时原样输入；<br>3 输入数据可用空格、回车和跳格键Tab作为间隔</td><td align="left">是变量的地址而不是变量</td></tr></tbody></table><h2 id="1-局部变量与全局变量"><a href="#1-局部变量与全局变量" class="headerlink" title="1. 局部变量与全局变量"></a><a href="http://c.biancheng.net/view/1858.html">1. <strong>局部变量与全局变量</strong></a></h2><blockquote><p>在《C语言形参和实参的区别》中提到，形参变量要等到函数被调用时才分配内存，调用结束后立即释放内存。这说明形参变量的作用域非常有限，只能在函数内部使用，离开该函数就无效了。所谓作用域（Scope），就是变量的有效范围。</p></blockquote><blockquote><p>不仅对于形参变量，C语言中所有的变量都有自己的作用域。决定变量作用域的是变量的定义位置。</p></blockquote><blockquote><p>自定义函数和主函数中变量不相干扰，可以使用相同字符</p></blockquote><h3 id="案例-jiojio表"><a href="#案例-jiojio表" class="headerlink" title="案例-jiojio表"></a>案例-jiojio表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> m, n;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt; <span class="hljs-number">10</span>; m++)<br>&#123;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= m; n++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d=%d &quot;</span>, m, n, m * n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例_2"></a>案例_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a = <span class="hljs-number">100</span>, b = <span class="hljs-number">10</span>; <span class="hljs-comment">//外部变量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>           <span class="hljs-comment">//变量的定义在所有函数外部</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, c;<br>    c = a + b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, c);<br>    &#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>, b = <span class="hljs-number">2</span>; <span class="hljs-comment">//内部变量</span><br>        c = a + b;        <span class="hljs-comment">//变量的定义在函数内部或复合语句内部</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,&quot;</span>, c);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a + b); <span class="hljs-comment">// 11,4,11</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-auto"><a href="#案例-auto" class="headerlink" title="案例_auto"></a>案例_auto</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br>    <span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;   <span class="hljs-comment">/*自动，auto可省*/</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> c = <span class="hljs-number">3</span>; <span class="hljs-comment">/*静态，值保留*/</span><br>    b++;<br>    c++;<br>    <span class="hljs-keyword">return</span> (a + b + c);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>, l;<br>    <span class="hljs-keyword">for</span> (l = <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">3</span>; l++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, f(a));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第八课"><a href="#第八课" class="headerlink" title="第八课"></a>第八课</h1><h2 id="函数的调用过程"><a href="#函数的调用过程" class="headerlink" title="函数的调用过程"></a><a href="https://liegu0317.github.io/2022/02/28/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/#%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8Bv">函数的调用过程</a></h2><h2 id="变量的存储属性"><a href="#变量的存储属性" class="headerlink" title="变量的存储属性"></a>变量的存储属性</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<span class="hljs-comment">//首先声明函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">2</span>, i;<br>    <span class="hljs-comment">/*自动,默认auto*/</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, f(a));<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br>    <span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;   <span class="hljs-comment">/*自动,auto可省*/</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> c = <span class="hljs-number">3</span>; <span class="hljs-comment">/*静态，值保留*/</span><br>    <span class="hljs-comment">//做一次定义，c对应的存储单元一直存在</span><br>    b++;<br>    c++;<br>    <span class="hljs-keyword">return</span> (a + b + c);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202203161644389.png" srcset="/img/loading2.gif" lazyload></p><h2 id="递归调用-小循环"><a href="#递归调用-小循环" class="headerlink" title="递归调用-小循环"></a>递归调用-小循环</h2><h3 id="求n的递推公式"><a href="#求n的递推公式" class="headerlink" title="求n的递推公式"></a>求n的递推公式</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">a</span><span class="hljs-punctuation">(</span><span class="hljs-variable">n</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">=</span> <span class="hljs-variable">n</span><span class="hljs-operator">*</span><span class="hljs-variable">a</span><span class="hljs-punctuation">(</span><span class="hljs-variable">n</span><span class="hljs-operator">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">n</span><span class="hljs-operator">&gt;</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>【n为1或0时值为1】</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br><span class="hljs-type">int</span> v;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>)v = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> v = n*f(n<span class="hljs-number">-1</span>);<span class="hljs-comment">//直接或间接调用自己</span><br>    <span class="hljs-keyword">return</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><p>迄今为止，使用的变主都是单一的变量，相互之间没有联系，这样的变旦又叫离散性变量。当需要大量相同数据类型的变量时，必然想到变量的组合，数组就是这样一种结构。</p></li><li><p>数组是具有相同数据类型的元素所组成的有序集合，而每1个数组元素就是1个类型相同的变量。每个数组是用1个统一的名称表示数组元素的集合，数组中的每一元素具有惟一索引号（即下标），可以用数组名及下标惟一地识别1个数组元素，下标的个数决定数练的维数，1个下标的数组称为一维数组，两个下标的数组称为二维数组。</p></li></ul><h2 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h2><ul><li><p>数组是一种容器（放东西的东西），特点是：所有的元素具有相同的数据类型。</p></li><li><p>数组的声明并不是声明一个个单独的变量，比如 runoob0、runoob1、…、runoob99，而是声明一个数组变量，比如 runoob，然后使用 runoob[0]、runoob[1]、、…、runoob[99]来代表一个个单独的变量。(下表索引)</p></li><li><p>在 C �����要声明一个数组，需要指定元素的类型和元素的数量，一旦声明后续不可更改，如下所示：</p></li><li><p>&lt;类型&gt; 变量名称[元素数量]; int runoob[100]; double balance [10]</p></li><li><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> runoob[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">223</span>,<span class="hljs-number">666</span>,<span class="hljs-number">888</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="数组的输出"><a href="#数组的输出" class="headerlink" title="数组的输出"></a>数组的输出</h2><h3 id="下标、索引"><a href="#下标、索引" class="headerlink" title="下标、索引"></a>下标、索引</h3><p><strong>规定下标从0开始  0,1,2,3,4…</strong></p><p>[0]代表第一个元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(plants[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><ul><li>定义数组后元素数小于数组容量，自动补0</li></ul><h2 id="输入月份返回天数"><a href="#输入月份返回天数" class="headerlink" title="输入月份返回天数"></a>输入月份返回天数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#inclue<span class="hljs-string">&quot;studio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getmonthdays</span><span class="hljs-params">(<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> year)</span>;<br>main()<br>&#123;<br>    <span class="hljs-type">int</span> days;<br>    days = getmonthdays(<span class="hljs-number">3</span>,<span class="hljs-number">2022</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;总共天数&quot;</span>,days);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//输入一个月份，返回这个月天数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gatmonthdays</span><span class="hljs-params">(<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> year)</span><br>&#123;<br>    <span class="hljs-type">int</span> days_arry[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;<br>    <span class="hljs-keyword">return</span> days_arry[month - <span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="二维数组一般形式"><a href="#二维数组一般形式" class="headerlink" title="二维数组一般形式"></a>二维数组一般形式</h2><p>&lt;类型&gt; 变量名称[常量表达式1(行数)][常量表达式2(列数)]</p><p><code>int a[6][6]   double b[6][3]</code></p><h2 id="二维数组的访问"><a href="#二维数组的访问" class="headerlink" title="二维数组的访问"></a>二维数组的访问</h2><p><code>数组名[下标][下标] </code></p><p><code>int a[3][3]  0-2 0-4</code></p><blockquote><p>C语言<strong>下标越界</strong>无警告，输出垃圾值</p></blockquote><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;&#123;<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">9</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>, a[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h2><ol><li><pre><code class="c">int a[3]\[4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">2</span>. ```c<br>   <span class="hljs-attribute">int</span> b[<span class="hljs-number">3</span>]\[<span class="hljs-number">4</span>]=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;&#125;;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;cint b[3][4]&#x3D;<br>   {<br>   {1,2,3,4},<br>   {5,6,7,8},<br>   {9,10,11,12}<br>   };</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">4</span>. ```c<br>   <span class="hljs-attribute">int</span> d[<span class="hljs-number">3</span>]\[<span class="hljs-number">4</span>]=&#123;&#123;<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">9</span>&#125;&#125;;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">5</span><br><span class="hljs-number">5</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">9</span><br><span class="hljs-number">9</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0686177312</span><br></code></pre></td></tr></table></figure></blockquote><ol start="5"><li>&#96;&#96;&#96;c<br>int e[][4] &#x3D; {1,2,3,4,5,6,7,8,9,10,11,12}<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>自动识别为  `e[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>]`<br><br>## 案例<br>```c<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-built_in">main</span>()<br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] = &#123; &#123;<span class="hljs-number">12</span>,<span class="hljs-number">76</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">-19</span>,<span class="hljs-number">28</span>,<span class="hljs-number">55</span>,<span class="hljs-number">-6</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">-2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">-9</span>,<span class="hljs-number">112</span>,<span class="hljs-number">111</span>&#125; &#125;;<br><span class="hljs-type">int</span> i,j,min,row = <span class="hljs-number">0</span>,column = <span class="hljs-number">0</span>;<br>min = a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>, a[i][j]);<br><span class="hljs-keyword">if</span> (a[i][j] &lt; min) &#123;<br>min = a[i][j];<br>row = i;<br>column = j;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最小值=%d，位于矩阵第%d行，第%d列&quot;</span>, min, row + <span class="hljs-number">1</span>, column + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="经典案例1-矩阵的转置"><a href="#经典案例1-矩阵的转置" class="headerlink" title="经典案例1 - 矩阵的转置"></a>经典案例1 - 矩阵的转置</h2><p><img src="https://img-blog.csdnimg.cn/9c93f39b6d5d4a93abbf97a72ae2868c.png#pic_center" srcset="/img/loading2.gif" lazyload alt="矩阵的转置"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">a[<span class="hljs-number">0</span>][j] ---→ b[j][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 经典案例1 - 矩阵的转置</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>], b[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> j, i;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入A矩阵元素，一个元素一个回车\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; j++)<br>&#123;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>&#125;;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A矩阵：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; j++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i][j]); <span class="hljs-comment">//输出矩阵</span><br>b[j][i] = a[i][j];  <span class="hljs-comment">//矩阵A转置给B</span><br>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;B矩阵：\n&quot;</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d&quot;</span>, b[i][j]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="经典案例1-成绩均值计算"><a href="#经典案例1-成绩均值计算" class="headerlink" title="经典案例1 - 成绩均值计算"></a>经典案例1 - 成绩均值计算</h2><p><img src="https://img-blog.csdnimg.cn/e22d38a8d5304cadaf7fb5ac4a61b871.png#pic_center" srcset="/img/loading2.gif" lazyload alt="成绩均值计算"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br>main()<br>&#123;<br>    <span class="hljs-type">int</span> i, j, score[<span class="hljs-number">5</span>][<span class="hljs-number">3</span>], sum, aver[<span class="hljs-number">5</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请依次输入每名同学的各科成绩：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) <span class="hljs-comment">// if代表的是学生的序号：</span><br>    &#123;<br>        sum = <span class="hljs-number">0</span>;                <span class="hljs-comment">//在每名同学成锁输入前，让其总成锁赋初值为0</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) <span class="hljs-comment">// J理解为课程</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;score[i][j]); <span class="hljs-comment">//输入第i号学生第j门成绩</span><br>            sum += score[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第九课-我划水了"><a href="#第九课-我划水了" class="headerlink" title="第九课-我划水了"></a>第九课-我划水了</h1><blockquote><p>无</p></blockquote><h1 id="第十课-优先级与结合性"><a href="#第十课-优先级与结合性" class="headerlink" title="第十课-优先级与结合性"></a>第十课-优先级与结合性</h1><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a= <span class="hljs-number">5</span>;<br>a-=a+=a;<br></code></pre></td></tr></table></figure><h2 id="C语言中文网"><a href="#C语言中文网" class="headerlink" title="C语言中文网"></a><a href="http://c.biancheng.net/cpp/html/462.html">C语言中文网</a></h2><div id="art-body">C语言的运算符众多，具有不同的优先级和结合性，我们将它们全部列了出来，方便大家对比和记忆：<table><tbody><tr><th><p>优先级</p></th><th><p>运算符</p></th><th><p>名称或含义</p></th><th><p>使用形式</p></th><th><p>结合方向</p></th><th><p>说明</p></th></tr><tr><td rowspan="4"><p>1</p></td><td><p>[]</p></td><td><p>数组下标</p></td><td><p>数组名[常量表达式]</p></td><td rowspan="4"><p>左到右</p></td><td> </td></tr><tr><td><p>()</p></td><td><p>圆括号</p></td><td><p>（表达式）/函数名(形参表)</p></td><td> </td></tr><tr><td><p>.</p></td><td><p>成员选择（对象）</p></td><td><p>对象.成员名</p></td><td> </td></tr><tr><td><p>-></p></td><td><p>成员选择（指针）</p></td><td><p>对象指针->成员名</p></td><td> </td></tr><tr><td rowspan="9"><p>2</p></td><td><p>-</p></td><td><p>负号运算符</p></td><td><p>-表达式</p></td><td rowspan="9"><p>右到左</p></td><td><p>单目运算符</p></td></tr><tr><td><p>(类型)</p></td><td><p>强制类型转换</p></td><td><p>(数据类型)表达式</p></td><td> </td></tr><tr><td><p>++</p></td><td><p>自增运算符</p></td><td><p>++变量名/变量名++</p></td><td><p>单目运算符</p></td></tr><tr><td><p>--</p></td><td><p>自减运算符</p></td><td><p>--变量名/变量名--</p></td><td><p>单目运算符</p></td></tr><tr><td><p>*</p></td><td><p>取值运算符</p></td><td><p>*指针变量</p></td><td><p>单目运算符</p></td></tr><tr><td><p>&</p></td><td><p>取地址运算符</p></td><td><p>&变量名</p></td><td><p>单目运算符</p></td></tr><tr><td><p>!</p></td><td><p>逻辑非运算符</p></td><td><p>!表达式</p></td><td><p>单目运算符</p></td></tr><tr><td><p>~</p></td><td><p>按位取反运算符</p></td><td><p>~表达式</p></td><td><p>单目运算符</p></td></tr><tr><td><p>sizeof</p></td><td><p>长度运算符</p></td><td><p>sizeof(表达式)</p></td><td> </td></tr><tr><td rowspan="3"><p>3</p></td><td><p>/</p></td><td><p>除</p></td><td><p>表达式/表达式</p></td><td rowspan="3"><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>*</p></td><td><p>乘</p></td><td><p>表达式*表达式</p></td><td><p>双目运算符</p></td></tr><tr><td><p>%</p></td><td><p>余数（取模）</p></td><td><p>整型表达式/整型表达式</p></td><td><p>双目运算符</p></td></tr><tr><td rowspan="2"><p>4</p></td><td><p>+</p></td><td><p>加</p></td><td><p>表达式+表达式</p></td><td rowspan="2"><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>-</p></td><td><p>减</p></td><td><p>表达式-表达式</p></td><td><p>双目运算符</p></td></tr><tr><td rowspan="2"><p>5</p></td><td><p><<</p></td><td><p>左移</p></td><td><p>变量<<表达式</p></td><td rowspan="2"><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>>></p></td><td><p>右移</p></td><td><p>变量>>表达式</p></td><td><p>双目运算符</p></td></tr><tr><td rowspan="4"><p>6</p></td><td><p>></p></td><td><p>大于</p></td><td><p>表达式>表达式</p></td><td rowspan="4"><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>>=</p></td><td><p>大于等于</p></td><td><p>表达式>=表达式</p></td><td><p>双目运算符</p></td></tr><tr><td><p><</p></td><td><p>小于</p></td><td><p>表达式<表达式</p></td><td><p>双目运算符</p></td></tr><tr><td><p><=</p></td><td><p>小于等于</p></td><td><p>表达式<=表达式</p></td><td><p>双目运算符</p></td></tr><tr><td rowspan="2"><p>7</p></td><td><p>==</p></td><td><p>等于</p></td><td><p>表达式==表达式</p></td><td rowspan="2"><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>!=</p></td><td><p>不等于</p></td><td><p>表达式!= 表达式</p></td><td><p>双目运算符</p></td></tr><tr><td><p>8</p></td><td><p>&</p></td><td><p>按位与</p></td><td><p>表达式&表达式</p></td><td><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>9</p></td><td><p>^</p></td><td><p>按位异或</p></td><td><p>表达式^表达式</p></td><td><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>10</p></td><td><p>|</p></td><td><p>按位或</p></td><td><p>表达式|表达式</p></td><td><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>11</p></td><td><p>&&</p></td><td><p>逻辑与</p></td><td><p>表达式&&表达式</p></td><td><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>12</p></td><td><p>||</p></td><td><p>逻辑或</p></td><td><p>表达式||表达式</p></td><td><p>左到右</p></td><td><p>双目运算符</p></td></tr><tr><td><p>13</p></td><td><p>?:</p></td><td><p>条件运算符</p></td><td><p>表达式1? 表达式2: 表达式3</p></td><td><p>右到左</p></td><td><p>三目运算符</p></td></tr><tr><td rowspan="11"><p>14</p></td><td><p>=</p></td><td><p>赋值运算符</p></td><td><p>变量=表达式</p></td><td rowspan="11"><p>右到左</p></td><td> </td></tr><tr><td><p>/=</p></td><td><p>除后赋值</p></td><td><p>变量/=表达式</p></td><td> </td></tr><tr><td><p>*=</p></td><td><p>乘后赋值</p></td><td><p>变量*=表达式</p></td><td> </td></tr><tr><td><p>%=</p></td><td><p>取模后赋值</p></td><td><p>变量%=表达式</p></td><td> </td></tr><tr><td><p>+=</p></td><td><p>加后赋值</p></td><td><p>变量+=表达式</p></td><td> </td></tr><tr><td><p>-=</p></td><td><p>减后赋值</p></td><td><p>变量-=表达式</p></td><td> </td></tr><tr><td><p><<=</p></td><td><p>左移后赋值</p></td><td><p>变量<<=表达式</p></td><td> </td></tr><tr><td><p>>>=</p></td><td><p>右移后赋值</p></td><td><p>变量>>=表达式</p></td><td> </td></tr><tr><td><p>&=</p></td><td><p>按位与后赋值</p></td><td><p>变量&=表达式</p></td><td> </td></tr><tr><td><p>^=</p></td><td><p>按位异或后赋值</p></td><td><p>变量^=表达式</p></td><td> </td></tr><tr><td><p>|=</p></td><td><p>按位或后赋值</p></td><td><p>变量|=表达式</p></td><td> </td></tr><tr><td><p>15</p></td><td><p>,</p></td><td><p>逗号运算符</p></td><td><p>表达式,表达式,…</p></td><td><p>左到右</p></td><td><p>从左向右顺序运算</p></td></tr></tbody></table><br><span style="color:#a52a2a;">注：同一优先级的运算符，运算次序由结合方向所决定。</span><br><br>上面的表无需死记硬背，很多运算符的规则和数学中是相同的，用得多，看得多自然就记得了。如果你是在记不住，可以使用( )。<br><h2>一些容易出错的优先级问题</h2>上表中，优先级同为1 的几种运算符如果同时出现，那怎么确定表达式的优先级呢？这是很多初学者迷糊的地方。下表就整理了这些容易出错的情况：<div style="text-align: center; "><img alt="" src="http://c.biancheng.net/cpp/uploads/allimg/120205/1-120205192420113.jpg" srcset="/img/loading2.gif" lazyload style="width: 500px; height: 318px; "></div>这些容易出错的情况，希望读者好好在编译器上调试调试，这样印象会深一些。一定要多调试，光靠看代码，水平是很难提上来的。调试代码才是最长水平的。</div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://c.biancheng.net/cpp/html/33.html">http://c.biancheng.net/cpp/html/33.html</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决警告 FixedFormatter should only be used together with FixedLocator|Python点点</title>
    <link href="/2022/02/28/FixedFormatter-should-only-be-used-together-with-FixedLocator/"/>
    <url>/2022/02/28/FixedFormatter-should-only-be-used-together-with-FixedLocator/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112222052316.png" srcset="/img/loading2.gif" lazyload></p><h1 id="警告内容"><a href="#警告内容" class="headerlink" title="警告内容"></a>警告内容</h1><p>当我在给柱状图 添加 x轴标签 时出现了此警告</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">UserWarning: FixedFormatter should only be used together <span class="hljs-keyword">with</span> FixedLocator<br></code></pre></td></tr></table></figure><blockquote><p>FixedFormatter(标签数据)只能和FixedLocator(定位器）一起使用</p></blockquote><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><p>操作系统：<code>win11 专业版 21H2</code><br>Python版本：<code>Python 3.9.7（anaconda）</code></p><h1 id="警告代码（截取）"><a href="#警告代码（截取）" class="headerlink" title="警告代码（截取）"></a>警告代码（截取）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">data = pd.DataFrame(np.random.rand(<span class="hljs-number">30</span>,<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>,<br>                   columns = [<span class="hljs-string">&#x27;A_sale&#x27;</span>,<span class="hljs-string">&#x27;B_sale&#x27;</span>],<br>                   index = pd.period_range(<span class="hljs-string">&#x27;20020317&#x27;</span>, periods = <span class="hljs-number">30</span>))<span class="hljs-comment"># 创建模拟数据</span><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data))<br>y = data[<span class="hljs-string">&quot;A_sale&quot;</span>] - data[<span class="hljs-string">&#x27;B_sale&#x27;</span>]<br><br>fig = plt.figure(figsize = (<span class="hljs-number">20</span>,<span class="hljs-number">6</span>)) <span class="hljs-comment"># 创建图形</span><br>plt.subplots_adjust(hspace = <span class="hljs-number">0.3</span>) <span class="hljs-comment"># 调节水平间距</span><br>ax = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 创建子图</span><br>plt.plot(x,y,<span class="hljs-string">&#x27;--go&#x27;</span>) <span class="hljs-comment"># 填充子图</span><br><br>ax.set_xtichlabels(data.nadex[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment"># 将时间戳作为x轴标签</span><br></code></pre></td></tr></table></figure><h1 id="警告原因"><a href="#警告原因" class="headerlink" title="警告原因"></a>警告原因</h1><p>未将FixedFormatter(标签数据)只能和FixedLocator(定位器）一起使用，通俗点讲   就是<strong>即将添加的标签无法找到对应的位置。</strong>这会导致添加的标签出现在非预想的位置</p><h2 id="matplotlib官网中写到："><a href="#matplotlib官网中写到：" class="headerlink" title="matplotlib官网中写到："></a><a href="https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.axes.Axes.set_xticklabels.html">matplotlib官网中写到</a>：</h2><blockquote><p>原文：This method should only be used after fixing the tick positions using Axes.set_xticks. Otherwise, the labels may end up in unexpected positions.</p></blockquote><blockquote><p>翻译：该方法只能在使用axis .set_xticks固定刻度位置之后使用。否则，标签可能会出现在意想不到的位置。</p></blockquote><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><em>由于初学Python对工具认知较浅，加上英语水平极差，我并未在第一时间读透彻官方文档的意思。这使我浪费了很多时间去浏览些对我帮助不大的的文章</em></p><p>按照matplotlib官方文档所述：</p><ol><li>使用axis .set_xticks固定刻度位置  <code>ax.set_xticks(x[::5])</code></li><li>进行标签修改&#x2F;添加的操作  <code>ax.set_xtichlabels(data.nadex[0:0:5])</code></li></ol><h1 id="修改后代码"><a href="#修改后代码" class="headerlink" title="修改后代码"></a>修改后代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">data = pd.DataFrame(np.random.rand(<span class="hljs-number">30</span>,<span class="hljs-number">2</span>)*<span class="hljs-number">100</span>,<br>                   columns = [<span class="hljs-string">&#x27;A_sale&#x27;</span>,<span class="hljs-string">&#x27;B_sale&#x27;</span>],<br>                   index = pd.period_range(<span class="hljs-string">&#x27;20020317&#x27;</span>, periods = <span class="hljs-number">30</span>))<span class="hljs-comment"># 创建模拟数据</span><br>x = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data))<br>y = data[<span class="hljs-string">&quot;A_sale&quot;</span>] - data[<span class="hljs-string">&#x27;B_sale&#x27;</span>]<br>fig = plt.figure(figsize = (<span class="hljs-number">20</span>,<span class="hljs-number">6</span>)) <span class="hljs-comment"># 创建图形</span><br>plt.subplots_adjust(hspace = <span class="hljs-number">0.3</span>) <span class="hljs-comment"># 调节水平间距</span><br>ax = fig.add_subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 创建子图</span><br>plt.plot(x,y,<span class="hljs-string">&#x27;--go&#x27;</span>) <span class="hljs-comment"># 填充子图</span><br>ax.set_xticks(x[::<span class="hljs-number">5</span>]) <span class="hljs-comment"># 使用axis.set_xticks固定刻度位置   (新添加内容)</span><br>ax.set_xtichlabels(data.nadex[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment"># 将时间戳作为x轴标签</span><br></code></pre></td></tr></table></figure><h1 id="经验总结（个人见解）"><a href="#经验总结（个人见解）" class="headerlink" title="经验总结（个人见解）"></a>经验总结（个人见解）</h1><ol><li>官方文档是最好的参考书，要学会参见官方文档</li><li>学会使用Google搜索，获取更有价值的内容</li><li><a href="https://stackoverflow.com/"> Stack<strong>overflow</strong></a>，一个值得推荐的程序员交流社区</li><li>解决遇到的难题（个人编程水品限制），真的心情舒畅</li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.axes.Axes.set_xticklabels.html">matplotlib官方文档</a></li><li><a href="https://stackoverflow.com/questions/63723514/userwarning-fixedformatter-should-only-be-used-together-with-fixedlocator">stackoverflow</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python3.9.7</tag>
      
      <tag>代码警告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习笔记P1|第1-6课</title>
    <link href="/2022/02/28/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/"/>
    <url>/2022/02/28/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202211019720.png" srcset="/img/loading2.gif" lazyload></p><p><a href="#%E7%AC%AC%E5%85%AD%E8%AF%BE-%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%8C%E5%87%BD%E6%95%B0">点击此处转到最近更新</a></p><h1 id="高级语言学习主线"><a href="#高级语言学习主线" class="headerlink" title="高级语言学习主线"></a>高级语言学习主线</h1><blockquote><p>基本符号<br> 数据<br> 函数<br> 运算符<br> 表达式<br> 语句<br> 格式控制<br> 程序</p></blockquote><h1 id="第一课"><a href="#第一课" class="headerlink" title="第一课"></a>第一课</h1><h2 id="1-简单sin案例"><a href="#1-简单sin案例" class="headerlink" title="1. 简单sin案例"></a>1. 简单sin案例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;complex.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;math.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">float</span> x, y;<br><span class="hljs-built_in">scanf_s</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;x);<br>y = <span class="hljs-built_in">sin</span>(x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p><strong>变量声明 → 储存单位→地址关联→变量操作</strong></p><h2 id="2-变量的命名规则"><a href="#2-变量的命名规则" class="headerlink" title="2. 变量的命名规则"></a>2. <strong>变量的命名规则</strong></h2><blockquote><ol><li>只能用字母,数字,下划线</li><li>必须用字母下划线开头</li><li>区分大小写字符</li><li>关键字不能用作标志符</li></ol></blockquote><blockquote><p>此规则适用于所有语言</p></blockquote><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>变量定义：变量值类型 变量名；<br>地址关联：变量名对应存储单元地址；<br>变量赋值：变量名&#x3D;变量值类型；  </p><h2 id="4-f-浮点型；-d-整型；-1"><a href="#4-f-浮点型；-d-整型；-1" class="headerlink" title="4. %f 浮点型；%d 整型；[^1]"></a>4. %f 浮点型；%d 整型；[^1]</h2><h3 id="什么是运算符？"><a href="#什么是运算符？" class="headerlink" title="什么是运算符？"></a>什么是运算符？</h3><p>举个简单的例子 <strong>4 +5 &#x3D; 9</strong> 。 例子中，<strong>4</strong> 和 <strong>5</strong> 被称为<strong>操作数</strong>，”<strong>+</strong>“ 称为<strong>运算符</strong>。</p><p><strong>C</strong>支持以下类型运算符：</p><ul><li><p>算术运算符</p></li><li><p>比较（关系）运算符</p></li><li><p>赋值运算符</p></li><li><p>逻辑运算符</p></li><li><p>位操作运算符</p></li><li><p>条件运算符</p></li><li><p>逗号运算符</p></li><li><p>指针运算符</p></li><li><p>求字节数运算符</p></li><li><p>特殊运算符</p></li></ul><hr><h3 id="算术运算符-※"><a href="#算术运算符-※" class="headerlink" title="算术运算符 ※"></a>算术运算符 ※</h3><p>以下假设变量： <strong>a&#x3D;10，b&#x3D;20</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除 - x除以y</td><td align="left">b &#x2F; a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">++</td><td align="left">自增 - 变量 +1的值重新赋值给变量</td><td align="left">a++ 输出结果 11</td></tr><tr><td align="left">–</td><td align="left">自减 - 变量 -1的值重新赋值给变量</td><td align="left">a– 输出结果 9</td></tr></tbody></table><hr><h3 id="比较（关系）运算符"><a href="#比较（关系）运算符" class="headerlink" title="比较（关系）运算符"></a>比较（关系）运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a !&#x3D; b) 返回 true.</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;&#x3D; b) 返回 true。</td></tr></tbody></table><hr><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符</td><td align="left">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+&#x3D;</td><td align="left">加法赋值运算符</td><td align="left">c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td align="left">-&#x3D;</td><td align="left">减法赋值运算符</td><td align="left">c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td align="left">*&#x3D;</td><td align="left">乘法赋值运算符</td><td align="left">c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">除法赋值运算符</td><td align="left">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td align="left">%&#x3D;</td><td align="left">取模赋值运算符</td><td align="left">c %&#x3D; a 等效于 c &#x3D; c % a</td></tr></tbody></table><p><em>复合位运算赋值(&amp;&#x3D;,|&#x3D;,^&#x3D;,&gt;&gt;&#x3D;,&lt;&lt;&#x3D;)</em></p><hr><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">1100</span><br><br><span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">0000 </span><span class="hljs-number">1101</span><br><br><span class="hljs-string">-----------------</span><br><br><span class="hljs-string">a&amp;b</span> <span class="hljs-string">=</span> <span class="hljs-number">0000 </span><span class="hljs-number">1100</span><br><br><span class="hljs-string">a|b</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">1101</span><br><br><span class="hljs-string">a^b</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">0001</span><br><br><span class="hljs-string">~a</span>  <span class="hljs-string">=</span> <span class="hljs-number">1100 </span><span class="hljs-number">0011</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><hr><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">结合性</th><th align="left">举例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">与运算，双目，对应数学中的“且”</td><td align="center">左结合</td><td align="left">1&amp;&amp;0、(9&gt;3)&amp;&amp;(b&gt;a)</td></tr><tr><td align="center">||</td><td align="center">或运算，双目，对应数学中的“或”</td><td align="center">左结合</td><td align="left">1||0、(9&gt;3)||(b&gt;a)</td></tr><tr><td align="center">!</td><td align="center">非运算，单目，对应数学中的“非”</td><td align="center">右结合</td><td align="left">!a、!(2&lt;5)</td></tr></tbody></table><hr><h3 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h3><p>这是一个<a href="https://baike.baidu.com/item/%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/6434591">三目运算符</a>，用于条件求值(?:)。</p><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>用于把若干表达式组合成一个表达式(，)。</p><h3 id="指针运算符"><a href="#指针运算符" class="headerlink" title="指针运算符"></a><a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88%E8%BF%90%E7%AE%97%E7%AC%A6/6616693">指针运算符</a></h3><p>用于取内容(*)和取地址(&amp;)二种运算。</p><h3 id="求字节数运算符"><a href="#求字节数运算符" class="headerlink" title="求字节数运算符"></a>求字节数运算符</h3><p>用于计算数据类型所占的字节数(sizeof)。</p><h3 id="特殊运算符"><a href="#特殊运算符" class="headerlink" title="特殊运算符"></a>特殊运算符</h3><p>有括号()，下标[]，成员(→，.)等几种。</p><h2 id="5-初始化、计数器、复合运算符"><a href="#5-初始化、计数器、复合运算符" class="headerlink" title="5. 初始化、计数器、复合运算符"></a>5. 初始化、计数器、复合运算符</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br>  main_1()<br>  &#123;<br><br><span class="hljs-type">int</span> x;<span class="hljs-comment">//int x = 2021; //定义同时赋值，称为变量的初始化//</span><br>x = <span class="hljs-number">2021</span>;<br>x = x + <span class="hljs-number">1</span>;<span class="hljs-comment">//计数器//</span><br>x += <span class="hljs-number">1</span>;<span class="hljs-comment">//复合运算//</span><br>x++;<span class="hljs-comment">//计数器//</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-累加器，累乘器"><a href="#6-累加器，累乘器" class="headerlink" title="6. 累加器，累乘器"></a>6. 累加器，累乘器</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br>   main_2()<br>   &#123;<br>   <span class="hljs-type">float</span> x, y = <span class="hljs-number">70</span>, sum = <span class="hljs-number">0</span>;<br>   x = <span class="hljs-number">3.14</span>;<br>   sum = sum + x;<br>   sum += x;<br>   sum += y;<span class="hljs-comment">/*累加器，累乘器*/</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f\n&quot;</span>, sum);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h1><h2 id="0-运算符"><a href="#0-运算符" class="headerlink" title="0. 运算符"></a>0. <a href="https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/1349432?fr=aladdin">运算符</a></h2><h3 id="算术运算符-※-1"><a href="#算术运算符-※-1" class="headerlink" title="算术运算符 ※"></a>算术运算符 ※</h3><p>以下假设变量： <strong>a&#x3D;10，b&#x3D;20</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除 - x除以y</td><td align="left">b &#x2F; a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">++</td><td align="left">自增 - 变量 +1的值重新赋值给变量</td><td align="left">a++ 输出结果 11</td></tr><tr><td align="left">–</td><td align="left">自减 - 变量 -1的值重新赋值给变量</td><td align="left">a– 输出结果 9</td></tr></tbody></table><hr><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a !&#x3D; b) 返回 true.</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;&#x3D; b) 返回 true。</td></tr></tbody></table><hr><h3 id="赋值运算符-1"><a href="#赋值运算符-1" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符</td><td align="left">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+&#x3D;</td><td align="left">加法赋值运算符</td><td align="left">c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td align="left">-&#x3D;</td><td align="left">减法赋值运算符</td><td align="left">c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td align="left">*&#x3D;</td><td align="left">乘法赋值运算符</td><td align="left">c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">除法赋值运算符</td><td align="left">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td align="left">%&#x3D;</td><td align="left">取模赋值运算符</td><td align="left">c %&#x3D; a 等效于 c &#x3D; c % a</td></tr></tbody></table><p><em>复合位运算赋值(&amp;&#x3D;,|&#x3D;,^&#x3D;,&gt;&gt;&#x3D;,&lt;&lt;&#x3D;)</em></p><h2 id="1-分解自然数完整程序，引入循环概念及控制语句"><a href="#1-分解自然数完整程序，引入循环概念及控制语句" class="headerlink" title="1. 分解自然数完整程序，引入循环概念及控制语句"></a>1. 分解自然数完整程序，引入循环概念及控制语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*分解自然数完整程序，引入循环概念及控制语句*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main() &#123;<br><span class="hljs-type">int</span> n, x;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">do</span> &#123;<br>x = n % <span class="hljs-number">10</span>;<span class="hljs-comment">/*取个位*/</span>  <span class="hljs-comment">//取余运算</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>n = n / <span class="hljs-number">10</span>; <span class="hljs-comment">/*去个位*/</span><br>&#125; <span class="hljs-keyword">while</span> (n);<span class="hljs-comment">//n=0时，表false，n&gt;0时，表true</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-循环控制语句"><a href="#2-循环控制语句" class="headerlink" title="2.循环控制语句"></a>2.<strong>循环控制语句</strong></h2><h3 id="for，while，do…while"><a href="#for，while，do…while" class="headerlink" title="for，while，do…while"></a><a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/1877758?fr=aladdin">for，while，do…while</a></h3><blockquote><p>同一个问题，往往既可以用 while语句解决，也可以用 do-while或者for语句来解决，但在实际应用中，应根据具体情况来选用不同的循环语句。选用的一般原则是：</p><p>(1) 如果循环次数在执行循环体之前就已确定，一般用 for语句。如果循环次数是由循环体的执行情况确定的，一般用 while语句或者do- while语句。</p><p>(2) 当循环体至少执行一次时，用 do-while语句，反之，如果循环体可能一次也不执行，则选用while语句。</p><p>C++&#x2F;C循环语句中，for语句使用频率最高，while语句其次，do语句很少用。</p><p>三种循环语句for、while、do-while可以互相嵌套自由组合。但要注意的是，各循环必须完整，相互之间绝不允许交叉。</p></blockquote><blockquote><p>C语言9种控制语句</p><p>①if( )~else 条件语句</p><p>②for( )~ 循环语句</p><p>③while( )~ 循环语句</p><p>④do~while( ) 循环语句</p><p>⑤continue 结束本次循环语句</p><p>⑥break 中止执行switch或循环语句</p><p>⑦switch 多分支选择语句</p><p>⑧goto 转向语句</p><p>⑨return 从函数返回语句</p></blockquote><h2 id="3-闰年的判断-逻辑运算符"><a href="#3-闰年的判断-逻辑运算符" class="headerlink" title="3.闰年的判断(逻辑运算符)"></a>3.闰年的判断(逻辑运算符)</h2><p>计算闰年方法：公历纪年法中，能被4整除的大多是闰年，能<br>被100整除而不能被400整除的年份不是闰年。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>mian() &#123;<br><span class="hljs-type">int</span> x;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br><span class="hljs-keyword">if</span> ((x % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; x % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || (x % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>, <span class="hljs-string">&#x27;N&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">结合性</th><th align="left">举例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">与运算，双目，对应数学中的“且”</td><td align="center">左结合</td><td align="left">1&amp;&amp;0、(9&gt;3)&amp;&amp;(b&gt;a)</td></tr><tr><td align="center">||</td><td align="center">或运算，双目，对应数学中的“或”</td><td align="center">左结合</td><td align="left">1||0、(9&gt;3)||(b&gt;a)</td></tr><tr><td align="center">!</td><td align="center">非运算，单目，对应数学中的“非”</td><td align="center">右结合</td><td align="left">!a、!(2&lt;5)</td></tr></tbody></table><h2 id="4-求n的阶乘"><a href="#4-求n的阶乘" class="headerlink" title="4. 求n的阶乘"></a>4. 求n的阶乘</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br>main()<br>&#123;<br><span class="hljs-type">int</span> n, y;<br>y = <span class="hljs-number">1</span>;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">do</span> &#123; y = y * n;<br>        n = n - <span class="hljs-number">1</span>; &#125; <br>    <span class="hljs-keyword">while</span> (n);<span class="hljs-comment">//阶乘器//</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-阶乘求和"><a href="#5-阶乘求和" class="headerlink" title="5. 阶乘求和"></a>5. 阶乘求和</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*阶乘求和 by 21大数据1班多双升*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span> x, y, s, t, ss = <span class="hljs-number">0</span>;<br>scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>t = x;<span class="hljs-comment">/*t计量循环次数*/</span><br><span class="hljs-keyword">do</span> &#123;<span class="hljs-comment">/*阶乘求和*/</span><br>y = x;<br><span class="hljs-keyword">do</span> &#123;<span class="hljs-comment">/*求取阶乘*/</span><br>y *= (x - <span class="hljs-number">1</span>);<br>x -= <span class="hljs-number">1</span>;<br>s = y;<br>&#125; <span class="hljs-keyword">while</span> (x - <span class="hljs-number">1</span>);<span class="hljs-comment">/*内循环用x计量循环次数*/</span><br>x = t - <span class="hljs-number">1</span>;<span class="hljs-comment">/*借助t实现外循环x的递减*/</span><br>t--;<span class="hljs-comment">/*t计量循环次数*/</span><br>ss += s;<br>&#125; <span class="hljs-keyword">while</span> (t - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ss + <span class="hljs-number">1</span>);<span class="hljs-comment">/*最后‘1’未进入循环*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h1><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><blockquote><p>自上而下，前后分级</p></blockquote><table><thead><tr><th align="center">运算类型</th><th align="center">运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">算数</td><td align="center">*,&#x2F;,%（取余）<br/>  +,-</td><td align="left">1. int、loat运算结果分别为整数、实数。<br/>2. “%”结果的符号与被除数的符号相同。</td></tr><tr><td align="center">关系</td><td align="center">&lt;,&lt;&#x3D;,&gt;,&gt;&#x3D;  <br/> &#x3D;&#x3D;,!&#x3D;</td><td align="left">1. C语言用0表示“假”，1表示“真”，而1,0都是整型。<br/>2. 在关系运算中，规定关系成立，则其结果为1，反之为0。</td></tr><tr><td align="center">逻辑</td><td align="center">!  not,否 <br/>&amp;&amp; and，与，而且 <br/>|| or，或，或者</td><td align="left">1.&amp;&amp; 和||低于关系运算，!高与算术运算（特味）。<br/>2. C编译系线在判斯一逻辑到变量时以非0表示“真”，如a&#x3D;5,则!a&#x3D;0。</td></tr><tr><td align="center">赋值</td><td align="center">&#x3D;，st&#x3D;</td><td align="left">1. “&#x3D;”将一个数赋值给另一个变量，如：c&#x3D;c+1 ，c++。<br/>2.”&#x3D;”两侧的类型不一致时进行类型转化。<br/>3. “st&#x3D;”是复合赋价运算符；“st” 可以算术或其它二目运算符，逻辑关系符（除外），注：x st &#x3D; y相当于对x &#x3D; x st y。</td></tr></tbody></table><h2 id="编写程序（累加）"><a href="#编写程序（累加）" class="headerlink" title="编写程序（累加）"></a>编写程序（累加）</h2><h3 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h3><p>问题： s &#x3D; 1+2+3+…+100<br>分析：累加<br>模型：s&#x3D;s+t;t&#x3D;t+1<br>程序：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>c += <span class="hljs-number">1</span>;<br>s += c;<br><br>&#125; <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-number">100</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, s);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>变量 → 先定义后使用<br>此处计数器  c  定为int<br>累加器看累积数据类型</p></blockquote><blockquote><p>此循环，循环次数已知</p></blockquote><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="数控循环"><a href="#数控循环" class="headerlink" title="数控循环"></a>数控循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> c,s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (c = <span class="hljs-number">1</span>; c &lt;= <span class="hljs-number">100</span>; c++) <br><span class="hljs-comment">//最后一句后勿加分号 错误：&quot;c++;&quot;(×)</span><br>&#123;<br>s = s + c;<br>&#125;;<br>    <span class="hljs-comment">/*  for循环语句执行顺序</span><br><span class="hljs-comment">    ①c = 0 循环变量-赋初值 仅执行一次</span><br><span class="hljs-comment">    ②c &lt; 100做判断</span><br><span class="hljs-comment">    ③&#123;s= s+c&#125; 然后执行循环体，循环执行</span><br><span class="hljs-comment">    ④c ++ 计数器</span><br><span class="hljs-comment">    */</span><br>    print(<span class="hljs-string">&quot;%d&quot;</span>,s);<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>重点：for循环语句执行顺序</p></blockquote><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(c&lt;<span class="hljs-number">100</span>)&#123;c++; s+=c;&#125;<br></code></pre></td></tr></table></figure><h3 id="期待输出”-”（5-5矩阵）"><a href="#期待输出”-”（5-5矩阵）" class="headerlink" title="期待输出”#”（5*5矩阵）"></a>期待输出”#”（5*5矩阵）</h3><table><thead><tr><th align="left"></th><th></th><th></th></tr></thead><tbody><tr><td align="left">字符串</td><td>%s</td><td>sting</td></tr><tr><td align="left">单字符</td><td>%c</td><td></td></tr><tr><td align="left">实数</td><td>%f</td><td></td></tr><tr><td align="left">整型</td><td>%d</td><td></td></tr></tbody></table><blockquote><p>putchar(); 只能输出单字符，转义字符</p></blockquote><ol><li>问题：期待输出”#”（5*5矩阵）  </li><li>分析：循环<br>过程分析：</li></ol><blockquote><ol><li>putchar(‘#’);  </li><li>for(n &#x3D; 1;n &lt;&#x3D; 5;n ++)putchar(‘#’);&#x2F;&#x2F;外循环语句为单语句时，不加“{}”  </li><li>putchar(‘\n’)  </li><li>{for(n &#x3D; 1;n &lt;&#x3D; 5;n ++)putchar(‘#’);<br/>putchar(‘\n’);} </li><li>for (m &#x3D; 1; m &lt;&#x3D; 5; m++) {for (n &#x3D; 1; n &lt;&#x3D; 5; n++)putchar(‘#’);putchar(‘\n’);};</li></ol></blockquote><ol start="3"><li>程序：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span> m, n;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= <span class="hljs-number">5</span>; m++) &#123;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;#&#x27;</span>);<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="第五课-巩固循环语句，嵌套"><a href="#第五课-巩固循环语句，嵌套" class="headerlink" title="第五课-巩固循环语句，嵌套"></a>第五课-巩固循环语句，嵌套</h1><h2 id="第四课课后作业"><a href="#第四课课后作业" class="headerlink" title="第四课课后作业"></a><a href="#%E9%80%92%E5%A2%9E%E5%9E%8B">第四课课后作业</a></h2><h2 id="最新更新"><a href="#最新更新" class="headerlink" title="最新更新"></a>最新更新</h2><blockquote><p><strong>一个语言对象的出现在语言体系中，都有其因需要而设定产生的过程，最终约定成俗，学习的过程需要知道它的来龙去脉。</strong></p></blockquote><h2 id="for循环-点击回顾"><a href="#for循环-点击回顾" class="headerlink" title="for循环(点击回顾)"></a><a href="#for%E5%BE%AA%E7%8E%AF">for循环(点击回顾)</a></h2><h3 id="数控循环-点击回顾"><a href="#数控循环-点击回顾" class="headerlink" title="数控循环(点击回顾)"></a><a href="#%E7%AC%AC%E5%9B%9B%E8%AF%BE">数控循环(点击回顾)</a></h3><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><h3 id="问题-”-”-5x5矩阵"><a href="#问题-”-”-5x5矩阵" class="headerlink" title="问题:”*” 5x5矩阵"></a>问题:”*” 5x5矩阵</h3><ul><li>模型：<blockquote><ul><li><code>putchar(&quot;&quot;); </code> &#x2F;&#x2F;输出单字符   </li><li><code>for (m = 1; m &lt;= 5; m++)&#123;putchar(&#39;*&#39;)&#125;;   </code><br><code>putchar(&#39;\n&#39;)//内循环</code></li></ul></blockquote></li><li>模型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>    <span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)  <br>&#123; <br>    <span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= <span class="hljs-number">5</span>; m++)&#123;<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;*&#x27;</span>);&#125;;   <br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);&#125;;  <br>&#125;  <span class="hljs-comment">//外循环，控制行数</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="递增型"><a href="#递增型" class="headerlink" title="递增型"></a>递增型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span>  m, n;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)<br>&#123;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;=  n<span class="hljs-comment">/*内循环受外循环变量控制*/</span>; m++) &#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;*&#x27;</span>); &#125;;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递减型"><a href="#递减型" class="headerlink" title="递减型"></a>递减型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span>  m, n;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)<br>&#123;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= <span class="hljs-number">6</span> - n<span class="hljs-comment">/*逐渐减小*/</span>; m++) &#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;*&#x27;</span>); &#125;;<br><span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="右侧递增型"><a href="#右侧递增型" class="headerlink" title="右侧递增型"></a>右侧递增型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main() <br>&#123;<br><span class="hljs-type">int</span>  m = <span class="hljs-number">1</span>, n, r;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)<br>&#123;<br>    <span class="hljs-keyword">for</span> (r = <span class="hljs-number">1</span>; r &lt;= <span class="hljs-number">6</span> - n <span class="hljs-comment">/*逐渐减小*/</span>; r++) &#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>); &#125;;<br>    <span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= n<span class="hljs-comment">/*逐渐增大*/</span>; m++) &#123; <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;*&#x27;</span>); &#125;;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="金字塔"><a href="#金字塔" class="headerlink" title="金字塔"></a>金字塔</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br>    <span class="hljs-type">int</span>  m, n, r;<br>    <span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">5</span>; n++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (r = <span class="hljs-number">1</span>; r &lt;= <span class="hljs-number">6</span> - n; r++)<br>        &#123;<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>        &#125;;<br>        <span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; m++)<br>        &#123;<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>        &#125;;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="csanf"><a href="#csanf" class="headerlink" title="csanf"></a>csanf</h2><blockquote><p><code>scanf(&quot;%f%f%f&quot;, &amp;a, &amp;b, &amp;c);</code><br>%f实数   **%f%f%f  这段内容要求与输入严格对齐 ** </p></blockquote><h2 id="百分之与五分制转换-if-else"><a href="#百分之与五分制转换-if-else" class="headerlink" title="百分之与五分制转换_if else"></a>百分之与五分制转换_if else</h2><blockquote><p>多次嵌套时，效率较低</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">float</span> score;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;score);<br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;B&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;C&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>)<span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;D&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;E&#x27;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="百分之与五分制转换-switch"><a href="#百分之与五分制转换-switch" class="headerlink" title="百分之与五分制转换_switch"></a>百分之与五分制转换_switch</h2><blockquote><p>一次运算出结果，相比多次嵌套的<code>if else</code>更有效率<br>为实现多重判断而生</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main() &#123;<br><span class="hljs-type">int</span>  e, grade;<br><span class="hljs-type">float</span> score;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>, &amp;score);<br>e = (<span class="hljs-type">int</span>)(score / <span class="hljs-number">10.0</span>);<span class="hljs-comment">/*重点·强制运算*/</span><br><span class="hljs-keyword">switch</span> (e)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:grade = <span class="hljs-string">&#x27;S&#x27;</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:grade = <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:grade = <span class="hljs-string">&#x27;B&#x27;</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:grade = <span class="hljs-string">&#x27;C&#x27;</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:grade = <span class="hljs-string">&#x27;D&#x27;</span>; <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:grade = <span class="hljs-string">&#x27;E&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n分数score:=%.2f\n\n等级grade=%c\n&quot;</span>, score, grade);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第六课-代码的模块化，函数"><a href="#第六课-代码的模块化，函数" class="headerlink" title="第六课-代码的模块化，函数"></a>第六课-代码的模块化，函数</h1><h2 id="第五课课后作业"><a href="#第五课课后作业" class="headerlink" title="第五课课后作业"></a>第五课课后作业</h2><p><strong>生成99乘法表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//自编</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br><span class="hljs-type">int</span> m, n = <span class="hljs-number">1</span>, s;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt;= n; m++)<br>&#123;<br>s = n * m;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d=%d &quot;</span>, n, m, s);<br>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>n++;<br>&#125; <span class="hljs-keyword">while</span> (n &lt;= <span class="hljs-number">9</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//教案</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> m, n;<br><span class="hljs-keyword">for</span> (m = <span class="hljs-number">1</span>; m &lt; <span class="hljs-number">10</span>; m++)<br>&#123;<br><span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= m; n++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d*%d=%d &quot;</span>, m, n, m * n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="#%E7%AC%AC%E4%B8%80%E8%AF%BE">简单sin案例(点击回顾)</a></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a><a href="https://baike.baidu.com/item/%E5%A4%B4%E6%96%87%E4%BB%B6/10978258?fr=aladdin">头文件</a></h2><p>例如: <code>#incude &quot;math.h&quot;</code></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="求n的阶乘-1"><a href="#求n的阶乘-1" class="headerlink" title="求n的阶乘_1"></a>求n的阶乘_1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br>    <span class="hljs-type">int</span> n, y;<br>    y = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        y = y * n;<br>        n--;<br>    &#125; <span class="hljs-keyword">while</span> (n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求n的阶乘-2"><a href="#求n的阶乘-2" class="headerlink" title="求n的阶乘_2"></a>求n的阶乘_2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>    &#123;<br>        <span class="hljs-type">int</span> n,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        y = fac(n);<br>        <span class="hljs-comment">//该程序中fac未定义,直接运行会报错</span><br>        <span class="hljs-comment">//自定义函数的调用</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,y);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br><span class="hljs-comment">/*int fac()最终返回数据类型*/</span><br><span class="hljs-comment">// n为已赋值变量,int标明数据类型</span><br>&#123;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        y = y * x;<br>        x--;<br>    &#125; <span class="hljs-keyword">while</span> (x);<br>    <span class="hljs-keyword">return</span> (y); <span class="hljs-comment">//返回运行结果y</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义函数应用"><a href="#自定义函数应用" class="headerlink" title="自定义函数应用"></a>自定义函数应用</h3><p><strong>求n的阶乘</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fac</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        y = y * x;<br>        x--;<br>    &#125; <span class="hljs-keyword">while</span> (x);<br>    <span class="hljs-keyword">return</span> (y);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n, y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    y = fac(n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="double-long-float-int-双精度浮点数"><a href="#double-long-float-int-双精度浮点数" class="headerlink" title="double long (float int)-双精度浮点数"></a><a href="https://baike.baidu.com/item/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/4502803">double long (float int)-双精度浮点数</a></h2><blockquote><p>C、C++中使用到的双精度浮点数（double）类型是在IEEE二进制浮点数算术标准（ANSI&#x2F;IEEE Std 754-1985）中定义的。<br>双精度浮点数（Double）用来表示带有小数部分的实数，一般用于计算机编程中定义变量，占用8个字节存储空间，其数值范围为-1.7E-308～1.7E+308，双精度浮点数最多有15或16位十进制有效数字。  </p></blockquote><blockquote><p>%f和%lf分别是float类型和double类型用于格式化输入输出时对应的格式符号。<br>其中：  </p><ul><li>float，单精度浮点型，对应%f.<br>double,双精度浮点型，对应%lf.   </li><li>在用于输出时:<br>float类型可以使用%lf格式，但不会有任何好处。<br>double类型如果使用了%f格式可能会导致输出错误。  </li><li>在用于输入时:<br>double 类型使用了%f格式，会导致输入值错误。<br>float类型使用double类型不仅会导致输入错误，还可能引起程序崩溃。<br>所以在输入输出时，一定要区分好double和float，而使用对应的格式符号。  </li><li>%ld用来输出长整型数。<br>%d用来输出整型数。<br>因为格式符指明了输出指定的起始地址开始的若干个字节的内容（把它们作为长整型数或整型数来解释），所以，如果用错了对象，就会得出意想不到的结果。如果用%d来输出长整型数，就会只取它的头上几个字节，相当于对原来的长整型数取了模；而如果用%ld来输出整型数，因为实际的数字节数少而硬要取更多的字节，就会发生“把别人家的孩子领回家”的事，把别的数据解释为当前的值了。<br><a href="https://blog.csdn.net/danxibaoxxx/article/details/81236180"><em>摘录自CSDN</em></a></li></ul></blockquote><blockquote><p>程序始终从主函数main开始</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">long</span> <span class="hljs-title function_">myfac</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> <span class="hljs-comment">//自定义函数</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">long</span> y = <span class="hljs-number">1</span>； <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) y = y * i;<br>    <span class="hljs-keyword">return</span> (y);<br>&#125;<br>dou<br><span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">double</span> y;<br>    <span class="hljs-type">long</span> z;<br>    <span class="hljs-comment">// double，long双精度数值</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    y = <span class="hljs-built_in">sqrt</span>(n);<br>    z = myfac(n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n=%d,y=*%lf,z= %ld \n&quot;</span>,n,y,z);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数定义角度-认识函数名"><a href="#函数定义角度-认识函数名" class="headerlink" title="函数定义角度 认识函数名"></a>函数定义角度 认识函数名</h2><blockquote><p><code>int fac (int n)&#123;&#125;</code>  </p></blockquote><ul><li><code>int</code>函数值的类型  </li><li><code>fac</code>函数名  </li><li><code>int n</code>参数的个数与类型  </li><li><code>&#123;&#125;</code>函数体</li></ul><h2 id="函数的调用过程"><a href="#函数的调用过程" class="headerlink" title="函数的调用过程"></a>函数的调用过程</h2><blockquote><p>自定义函数和主函数中变量不相干扰，可以使用相同字符</p></blockquote><h3 id="1-局部变量与全局变量"><a href="#1-局部变量与全局变量" class="headerlink" title="1. 局部变量与全局变量"></a><a href="http://c.biancheng.net/view/1858.html">1. <strong>局部变量与全局变量</strong></a></h3><blockquote><p>在《C语言形参和实参的区别》中提到，形参变量要等到函数被调用时才分配内存，调用结束后立即释放内存。这说明形参变量的作用域非常有限，只能在函数内部使用，离开该函数就无效了。所谓作用域（Scope），就是变量的有效范围。</p></blockquote><blockquote><p>不仅对于形参变量，C语言中所有的变量都有自己的作用域。决定变量作用域的是变量的定义位置。</p></blockquote><h3 id="2-值传递和地址传递"><a href="#2-值传递和地址传递" class="headerlink" title="2. 值传递和地址传递"></a><a href="http://c.biancheng.net/view/371.html">2. <strong>值传递和地址传递</strong></a></h3><blockquote><p>点击标题查看 <strong>C语言中文网</strong> 对于 <strong>地址传递</strong> 的详解</p></blockquote><h3 id="3-指针"><a href="#3-指针" class="headerlink" title="3. 指针"></a><a href="https://www.runoob.com/cprogramming/c-pointers.html">3. <strong>指针</strong></a></h3><blockquote><p>点击标题查看 <strong>菜鸟教程</strong> 对于 <strong>指针</strong> 的详解</p></blockquote><blockquote><p><strong>以上三点一定要看</strong><br><strong>以上三点一定要看</strong><br><strong>以上三点一定要看</strong></p></blockquote><h3 id="案例-指针"><a href="#案例-指针" class="headerlink" title="案例-指针"></a>案例-指针</h3><h4 id="未用指针"><a href="#未用指针" class="headerlink" title="未用指针"></a>未用指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">myswap1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-type">int</span> z;<br>    z = x;<br>    x = y;<br>    y = z;<br>    <span class="hljs-comment">//返回y的值为x的输入值，返回x的值为y的输入值</span><br>    <span class="hljs-comment">//注意：此自定义函数中的x，y的作用域仅为此自定义函数的范围</span><br>&#125;<br><span class="hljs-comment">//程序总是从主函数开始执行</span><br>main()<br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">3</span>, y = <span class="hljs-number">5</span>; <span class="hljs-comment">// x，y为实参</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d,y =%d\n&quot;</span>, x, y);<br>    myswap1(x, y);                  <span class="hljs-comment">// x,y为形参</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d,y =%d\n&quot;</span>, x, y); <span class="hljs-comment">// x，y为实参</span><br>    <span class="hljs-comment">//实参将值传递给形参，形参值发生互换后的值不能回传给主调函数。因此，主调函数中的数值不变，输出仍为“x = 3, y = 5”</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202203102112431.png" srcset="/img/loading2.gif" lazyload alt="未使用指针"></p><h4 id="采用指针"><a href="#采用指针" class="headerlink" title="采用指针"></a>采用指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">myswap1</span><span class="hljs-params">(<span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span><br>&#123;<br>    <span class="hljs-type">int</span> z;<br>    z = *x;<br>    *x = *y;<br>    *y = z;<br>    <span class="hljs-comment">//返回y的值为x的输入值，返回x的值为y的输入值</span><br>&#125;<br><span class="hljs-comment">//程序总是从主函数开始执行</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">3</span>, y = <span class="hljs-number">5</span>; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d,y =%d\n&quot;</span>, x, y);<br>    myswap1(&amp;x, &amp;y); <span class="hljs-comment">//</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x = %d,y =%d\n&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202203102113774.png" srcset="/img/loading2.gif" lazyload alt="使用指针"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/1349432?fr=aladdin">https://baike.baidu.com/item/c%E8%AF%AD%E8%A8%80%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%B7/1349432?fr=aladdin</a><br><a href="https://www.runoob.com/python/python-operators.html">https://www.runoob.com/python/python-operators.html</a><br><a href="http://c.biancheng.net/">http://c.biancheng.net/</a><br><a href="https://blog.csdn.net/danxibaoxxx/article/details/81236180">https://blog.csdn.net/danxibaoxxx/article/details/81236180</a> </p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言学习杂记1|学习软件选择</title>
    <link href="/2022/02/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/"/>
    <url>/2022/02/24/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="学习软件"><a href="#学习软件" class="headerlink" title="学习软件"></a>学习软件</h1><p>很多学习教材推荐  VS C++ 6.0 ,但他太老了，对于现在的操作系统版本都不支持<br><em>这里提供下载地址<a href="http://c.biancheng.net/view/463.html">C语言中文网</a></em></p><blockquote><p>以下两个软件下载一个使用就好，<strong>Microsoft Visual Studio上手难度略高</strong>，Dev-C++更易上手，相比之下<strong>Microsoft Visual Studio实用</strong>范围更广，更值得学习使用。  </p></blockquote><blockquote><p>B站up猪<a href="https://space.bilibili.com/19658621"><strong>Micro_Frank</strong></a>有针对性Microsoft Visual Studio的上手教学视频，<strong>非常</strong>值得的学习！</p></blockquote><h2 id="1-Microsoft-Visual-Studio"><a href="#1-Microsoft-Visual-Studio" class="headerlink" title="1. Microsoft Visual Studio"></a>1. Microsoft Visual Studio</h2><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202241756109.png" srcset="/img/loading2.gif" lazyload alt="Mirosoft Visual Studio"></p><blockquote><p>这个启动界面超酷的好吧</p></blockquote><ol><li><p>下载地址：<a href="https://visualstudio.microsoft.com/zh-hans/">https://visualstudio.microsoft.com/zh-hans/</a>  </p></li><li><p>安装过程来自B站<a href="https://space.bilibili.com/19658621">Micro_Frank</a><br>up猪有一系列教学视频可以学习</p></li></ol><iframe src="//player.bilibili.com/player.html?aid=59608520&bvid=BV1Xt411g7jT&cid=439731943&page=1" scrolling="yes" border="1" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="2-Dev-C"><a href="#2-Dev-C" class="headerlink" title="2. Dev-C++"></a>2. Dev-C++</h2><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202241957450.png" srcset="/img/loading2.gif" lazyload alt="Dev-C++"></p><ol><li>下载地址:<a href="https://www.bloodshed.net/">https://www.bloodshed.net/</a><br><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202241958152.png" srcset="/img/loading2.gif" lazyload>  </li><li>文件新建：<br><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202242002567.png" srcset="/img/loading2.gif" lazyload></li></ol><p>编写好代码后<strong>保存</strong>，保存时注意修改后缀名为  <strong>.c</strong></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202242004756.png" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>C语言经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>Dev-C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客同时部署gitee和github</title>
    <link href="/2022/02/21/hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2gitee%E5%92%8Cgithub/"/>
    <url>/2022/02/21/hexo%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2gitee%E5%92%8Cgithub/</url>
    
    <content type="html"><![CDATA[<p>hexo博客同时部署gitee和github，实现两站内容一致</p><blockquote><p>国内github访问速度较慢，gitee可以作为替补方案</p></blockquote><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202211154528.png" srcset="/img/loading2.gif" lazyload></p><p>在搭建自己的Blog请参见<a href="https://liegu0317.top/2021/12/08/LieGu%E3%81%AEBlog-%E6%90%AD%E5%BB%BA%E7%AF%87/">快速搭建简约风格博客</a>、<a href="https://liegu0317.top/2021/12/10/LieGu%E3%81%AEBlog-%E7%BE%8E%E5%8C%96%E7%AF%87/">Blog美化</a></p><p>在<code>_config.yml</code>将<code>deploy</code>下内容作出如下修改</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">deploy:<br>  - type: git<br>    repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LIEGU0317/</span>liegu0317.git<br>    branch: master<br>  - type: git<br>    repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/LIEGU0317/</span>liegu0317.github.io.git<br>    branch: master<br></code></pre></td></tr></table></figure><p>按照这种格式修改，程序会按顺序进行提交，从而实现两处内容同步的效果</p><p>在github中会自动部署，提交后等待即可，而在gitee中需要手动重新部署</p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202212319371.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p> 参考资料<br> <a href="https://hexo.io/zh-cn/docs/">HXEO官方文档</a></p></blockquote><p>我的博客  <a href="liegu0317.top">Github部署</a>       <a href="https://liegu0317.gitee.io/">Gitee部署</a></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>matplotlib.markers|Python点点</title>
    <link href="/2022/02/17/matplotlib-markers-Python%E7%82%B9%E7%82%B9/"/>
    <url>/2022/02/17/matplotlib-markers-Python%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><em>全文摘自：<a href="https://matplotlib.org/stable/api/markers_api.html">matplotlib.markers</a></em></p><div><section id="module-matplotlib.markers"><span id="matplotlib-markers"></span><h1><code class="docutils literal notranslate"><span class="pre">matplotlib.markers</span></code><a class="headerlink" href="#module-matplotlib.markers" title="Permalink to this headline">¶</a></h1><p>Functions to handle markers; used by the marker functionality of<a class="reference internal" href="_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot" title="matplotlib.axes.Axes.plot"><code class="xref py py-obj docutils literal notranslate"><span class="pre">plot</span></code></a>, <a class="reference internal" href="_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter" title="matplotlib.axes.Axes.scatter"><code class="xref py py-obj docutils literal notranslate"><span class="pre">scatter</span></code></a>, and<a class="reference internal" href="_as_gen/matplotlib.axes.Axes.errorbar.html#matplotlib.axes.Axes.errorbar" title="matplotlib.axes.Axes.errorbar"><code class="xref py py-obj docutils literal notranslate"><span class="pre">errorbar</span></code></a>.</p><p>All possible markers are defined here:</p><table class="table"><thead><tr class="row-odd"><th class="head"><p>marker</p></th><th class="head"><p>symbol</p></th><th class="head"><p>description</p></th></tr></thead><tbody><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"."</span></code></p></td><td><p><img alt="m00" src="https://matplotlib.org/stable/_images/m00.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>point</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">","</span></code></p></td><td><p><img alt="m01" src="https://matplotlib.org/stable/_images/m01.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>pixel</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"o"</span></code></p></td><td><p><img alt="m02" src="https://matplotlib.org/stable/_images/m02.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>circle</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"v"</span></code></p></td><td><p><img alt="m03" src="https://matplotlib.org/stable/_images/m03.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>triangle_down</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"^"</span></code></p></td><td><p><img alt="m04" src="https://matplotlib.org/stable/_images/m04.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>triangle_up</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"&lt;"</span></code></p></td><td><p><img alt="m05" src="https://matplotlib.org/stable/_images/m05.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>triangle_left</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"&gt;"</span></code></p></td><td><p><img alt="m06" src="https://matplotlib.org/stable/_images/m06.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>triangle_right</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"1"</span></code></p></td><td><p><img alt="m07" src="https://matplotlib.org/stable/_images/m07.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tri_down</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"2"</span></code></p></td><td><p><img alt="m08" src="https://matplotlib.org/stable/_images/m08.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tri_up</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"3"</span></code></p></td><td><p><img alt="m09" src="https://matplotlib.org/stable/_images/m09.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tri_left</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"4"</span></code></p></td><td><p><img alt="m10" src="https://matplotlib.org/stable/_images/m10.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tri_right</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"8"</span></code></p></td><td><p><img alt="m11" src="https://matplotlib.org/stable/_images/m11.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>octagon</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"s"</span></code></p></td><td><p><img alt="m12" src="https://matplotlib.org/stable/_images/m12.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>square</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"p"</span></code></p></td><td><p><img alt="m13" src="https://matplotlib.org/stable/_images/m13.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>pentagon</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"P"</span></code></p></td><td><p><img alt="m23" src="https://matplotlib.org/stable/_images/m23.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>plus (filled)</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"*"</span></code></p></td><td><p><img alt="m14" src="https://matplotlib.org/stable/_images/m14.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>star</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"h"</span></code></p></td><td><p><img alt="m15" src="https://matplotlib.org/stable/_images/m15.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>hexagon1</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"H"</span></code></p></td><td><p><img alt="m16" src="https://matplotlib.org/stable/_images/m16.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>hexagon2</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"+"</span></code></p></td><td><p><img alt="m17" src="https://matplotlib.org/stable/_images/m17.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>plus</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"x"</span></code></p></td><td><p><img alt="m18" src="https://matplotlib.org/stable/_images/m18.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>x</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"X"</span></code></p></td><td><p><img alt="m24" src="https://matplotlib.org/stable/_images/m24.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>x (filled)</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"D"</span></code></p></td><td><p><img alt="m19" src="https://matplotlib.org/stable/_images/m19.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>diamond</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"d"</span></code></p></td><td><p><img alt="m20" src="https://matplotlib.org/stable/_images/m20.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>thin_diamond</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"|"</span></code></p></td><td><p><img alt="m21" src="https://matplotlib.org/stable/_images/m21.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>vline</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">"_"</span></code></p></td><td><p><img alt="m22" src="https://matplotlib.org/stable/_images/m22.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>hline</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">0</span></code> (<code class="docutils literal notranslate"><span class="pre">TICKLEFT</span></code>)</p></td><td><p><img alt="m25" src="https://matplotlib.org/stable/_images/m25.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tickleft</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">1</span></code> (<code class="docutils literal notranslate"><span class="pre">TICKRIGHT</span></code>)</p></td><td><p><img alt="m26" src="https://matplotlib.org/stable/_images/m26.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tickright</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">2</span></code> (<code class="docutils literal notranslate"><span class="pre">TICKUP</span></code>)</p></td><td><p><img alt="m27" src="https://matplotlib.org/stable/_images/m27.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tickup</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">3</span></code> (<code class="docutils literal notranslate"><span class="pre">TICKDOWN</span></code>)</p></td><td><p><img alt="m28" src="https://matplotlib.org/stable/_images/m28.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>tickdown</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">4</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETLEFT</span></code>)</p></td><td><p><img alt="m29" src="https://matplotlib.org/stable/_images/m29.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretleft</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">5</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETRIGHT</span></code>)</p></td><td><p><img alt="m30" src="https://matplotlib.org/stable/_images/m30.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretright</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">6</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETUP</span></code>)</p></td><td><p><img alt="m31" src="https://matplotlib.org/stable/_images/m31.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretup</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">7</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETDOWN</span></code>)</p></td><td><p><img alt="m32" src="https://matplotlib.org/stable/_images/m32.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretdown</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">8</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETLEFTBASE</span></code>)</p></td><td><p><img alt="m33" src="https://matplotlib.org/stable/_images/m33.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretleft (centered at base)</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">9</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETRIGHTBASE</span></code>)</p></td><td><p><img alt="m34" src="https://matplotlib.org/stable/_images/m34.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretright (centered at base)</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">10</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETUPBASE</span></code>)</p></td><td><p><img alt="m35" src="https://matplotlib.org/stable/_images/m35.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretup (centered at base)</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">11</span></code> (<code class="docutils literal notranslate"><span class="pre">CARETDOWNBASE</span></code>)</p></td><td><p><img alt="m36" src="https://matplotlib.org/stable/_images/m36.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>caretdown (centered at base)</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">"None"</span></code>, <code class="docutils literal notranslate"><span class="pre">"</span> <span class="pre">"</span></code> or <code class="docutils literal notranslate"><span class="pre">""</span></code></p></td><td></td><td><p>nothing</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'$...$'</span></code></p></td><td><p><img alt="m37" src="https://matplotlib.org/stable/_images/m37.png" srcset="/img/loading2.gif" lazyload></p></td><td><p>Render the string using mathtext.E.g <code class="docutils literal notranslate"><span class="pre">"$f$"</span></code> for marker showing theletter <code class="docutils literal notranslate"><span class="pre">f</span></code>.</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">verts</span></code></p></td><td></td><td><p>A list of (x, y) pairs used for Pathvertices. The center of the marker islocated at (0, 0) and the size isnormalized, such that the created pathis encapsulated inside the unit cell.</p></td></tr><tr class="row-even"><td><p>path</p></td><td></td><td><p>A <a class="reference internal" href="path_api.html#matplotlib.path.Path" title="matplotlib.path.Path"><code class="xref py py-obj docutils literal notranslate"><span class="pre">Path</span></code></a> instance.</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">(numsides,</span> <span class="pre">0,</span> <span class="pre">angle)</span></code></p></td><td></td><td><p>A regular polygon with <code class="docutils literal notranslate"><span class="pre">numsides</span></code>sides, rotated by <code class="docutils literal notranslate"><span class="pre">angle</span></code>.</p></td></tr><tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">(numsides,</span> <span class="pre">1,</span> <span class="pre">angle)</span></code></p></td><td></td><td><p>A star-like symbol with <code class="docutils literal notranslate"><span class="pre">numsides</span></code>sides, rotated by <code class="docutils literal notranslate"><span class="pre">angle</span></code>.</p></td></tr><tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">(numsides,</span> <span class="pre">2,</span> <span class="pre">angle)</span></code></p></td><td></td><td><p>An asterisk with <code class="docutils literal notranslate"><span class="pre">numsides</span></code> sides,rotated by <code class="docutils literal notranslate"><span class="pre">angle</span></code>.</p></td></tr></tbody></table><p><code class="docutils literal notranslate"><span class="pre">None</span></code> is the default which means 'nothing', however this table isreferred to from other docs for the valid inputs from marker inputs and inthose cases <code class="docutils literal notranslate"><span class="pre">None</span></code> still means 'default'.</p><p>Note that special symbols can be defined via the<a class="reference internal" href="../tutorials/text/mathtext.html"><span class="doc">STIX math font</span></a>,e.g. <code class="docutils literal notranslate"><span class="pre">"$\u266B$"</span></code>. For an overview over the STIX font symbols refer to the<a class="reference external" href="http://www.stixfonts.org/allGlyphs.html">STIX font table</a>.Also see the <a class="reference internal" href="../gallery/text_labels_and_annotations/stix_fonts_demo.html"><span class="doc">STIX Fonts</span></a>.</p><p>Integer numbers from <code class="docutils literal notranslate"><span class="pre">0</span></code> to <code class="docutils literal notranslate"><span class="pre">11</span></code> create lines and triangles. Those areequally accessible via capitalized variables, like <code class="docutils literal notranslate"><span class="pre">CARETDOWNBASE</span></code>.Hence the following are equivalent:</p><div class="highlight-default notranslate"><div class="highlight"><pre id="codecell0"><span></span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="n">matplotlib</span><span class="o">.</span><span class="n">markers</span><span class="o">.</span><span class="n">CARETDOWNBASE</span><span class="p">)</span></pre>    </button></div></div><p>Examples showing the use of markers:</p><ul class="simple"><li><p><a class="reference internal" href="../gallery/lines_bars_and_markers/marker_reference.html"><span class="doc">Marker reference</span></a></p></li><li><p><a class="reference internal" href="../gallery/lines_bars_and_markers/scatter_star_poly.html"><span class="doc">Marker examples</span></a></p></li></ul><section id="classes"><h2>Classes<a class="headerlink" href="#classes" title="Permalink to this headline">¶</a></h2><table class="longtable table autosummary"><tbody><tr class="row-odd"><td><p><a class="reference internal" href="_as_gen/matplotlib.markers.MarkerStyle.html#matplotlib.markers.MarkerStyle" title="matplotlib.markers.MarkerStyle"><code class="xref py py-obj docutils literal notranslate"><span class="pre">MarkerStyle</span></code></a>([marker,&nbsp;fillstyle])</p></td><td><p>A class representing marker types.</p></td></tr></tbody></table></section></section></div>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冰墩墩代码来了|Trtule</title>
    <link href="/2022/02/09/%E5%86%B0%E5%A2%A9%E5%A2%A9%E4%BB%A3%E7%A0%81%E6%9D%A5%E4%BA%86/"/>
    <url>/2022/02/09/%E5%86%B0%E5%A2%A9%E5%A2%A9%E4%BB%A3%E7%A0%81%E6%9D%A5%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-冰墩墩"><a href="#1-冰墩墩" class="headerlink" title="1. 冰墩墩"></a>1. 冰墩墩</h1><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202090030095.png" srcset="/img/loading2.gif" lazyload alt="冰墩墩"></p><h1 id="2-代码展示"><a href="#2-代码展示" class="headerlink" title="2. 代码展示"></a>2. 代码展示</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#执行 python3 bingdundun.py 可画出一个冰墩墩哦</span><br><br><span class="hljs-keyword">import</span> turtle<br><br><span class="hljs-comment"># 标题</span><br>turtle.title(<span class="hljs-string">&quot;这里冰墩墩，哈哈哈哈哈&quot;</span>)<br><br><span class="hljs-comment"># 速度</span><br>turtle.delay(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 左手</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">177</span>, <span class="hljs-number">112</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;lightgray&quot;</span>)<br>turtle.pensize(<span class="hljs-number">3</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">80</span>)<br>turtle.circle(-<span class="hljs-number">45</span>, <span class="hljs-number">200</span>)<br>turtle.circle(-<span class="hljs-number">300</span>, <span class="hljs-number">23</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 左手内</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">182</span>, <span class="hljs-number">95</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.pensize(<span class="hljs-number">1</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.setheading(<span class="hljs-number">95</span>)<br>turtle.pendown()<br>turtle.circle(-<span class="hljs-number">37</span>, <span class="hljs-number">160</span>)<br>turtle.circle(-<span class="hljs-number">20</span>, <span class="hljs-number">50</span>)<br>turtle.circle(-<span class="hljs-number">200</span>, <span class="hljs-number">30</span>)<br>turtle.end_fill()<br><span class="hljs-comment"># 轮廓</span><br><span class="hljs-comment"># 头顶</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">73</span>, <span class="hljs-number">230</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;lightgray&quot;</span>)<br>turtle.pensize(<span class="hljs-number">3</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">20</span>)<br>turtle.circle(-<span class="hljs-number">250</span>, <span class="hljs-number">35</span>)<br><span class="hljs-comment"># 左耳</span><br>turtle.setheading(<span class="hljs-number">50</span>)<br>turtle.circle(-<span class="hljs-number">42</span>, <span class="hljs-number">180</span>)<br><span class="hljs-comment"># 左侧</span><br>turtle.setheading(-<span class="hljs-number">50</span>)<br>turtle.circle(-<span class="hljs-number">190</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">320</span>, <span class="hljs-number">45</span>)<br><span class="hljs-comment"># 左腿</span><br>turtle.circle(<span class="hljs-number">120</span>, <span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">200</span>, <span class="hljs-number">12</span>)<br>turtle.circle(-<span class="hljs-number">18</span>, <span class="hljs-number">85</span>)<br>turtle.circle(-<span class="hljs-number">180</span>, <span class="hljs-number">23</span>)<br>turtle.circle(-<span class="hljs-number">20</span>, <span class="hljs-number">110</span>)<br>turtle.circle(<span class="hljs-number">15</span>, <span class="hljs-number">115</span>)<br>turtle.circle(<span class="hljs-number">100</span>, <span class="hljs-number">12</span>)<br><span class="hljs-comment"># 右腿</span><br>turtle.circle(<span class="hljs-number">15</span>, <span class="hljs-number">120</span>)<br>turtle.circle(-<span class="hljs-number">15</span>, <span class="hljs-number">110</span>)<br>turtle.circle(-<span class="hljs-number">150</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">15</span>, <span class="hljs-number">70</span>)<br>turtle.circle(-<span class="hljs-number">150</span>, <span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">200</span>, <span class="hljs-number">35</span>)<br>turtle.circle(-<span class="hljs-number">150</span>, <span class="hljs-number">20</span>)<br><span class="hljs-comment"># 右手</span><br>turtle.setheading(-<span class="hljs-number">120</span>)<br>turtle.circle(<span class="hljs-number">50</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">35</span>, <span class="hljs-number">200</span>)<br>turtle.circle(-<span class="hljs-number">300</span>, <span class="hljs-number">23</span>)<br><span class="hljs-comment"># 右侧</span><br>turtle.setheading(<span class="hljs-number">86</span>)<br>turtle.circle(-<span class="hljs-number">300</span>, <span class="hljs-number">26</span>)<br><span class="hljs-comment"># 右耳</span><br>turtle.setheading(<span class="hljs-number">122</span>)<br>turtle.circle(-<span class="hljs-number">53</span>, <span class="hljs-number">160</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 右耳内</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">130</span>, <span class="hljs-number">180</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.pensize(<span class="hljs-number">1</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">120</span>)<br>turtle.circle(-<span class="hljs-number">28</span>, <span class="hljs-number">160</span>)<br>turtle.setheading(<span class="hljs-number">210</span>)<br>turtle.circle(<span class="hljs-number">150</span>, <span class="hljs-number">20</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 左耳内</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">90</span>, <span class="hljs-number">230</span>)<br>turtle.setheading(<span class="hljs-number">40</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.circle(-<span class="hljs-number">30</span>, <span class="hljs-number">170</span>)<br>turtle.setheading(<span class="hljs-number">125</span>)<br>turtle.circle(<span class="hljs-number">150</span>, <span class="hljs-number">23</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 右手内</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">180</span>, -<span class="hljs-number">55</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.setheading(-<span class="hljs-number">120</span>)<br>turtle.pendown()<br>turtle.circle(<span class="hljs-number">50</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">27</span>, <span class="hljs-number">200</span>)<br>turtle.circle(-<span class="hljs-number">300</span>, <span class="hljs-number">20</span>)<br>turtle.setheading(-<span class="hljs-number">90</span>)<br>turtle.circle(<span class="hljs-number">300</span>, <span class="hljs-number">14</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 左腿内</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">108</span>, -<span class="hljs-number">168</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(-<span class="hljs-number">115</span>)<br>turtle.circle(<span class="hljs-number">110</span>, <span class="hljs-number">15</span>)<br>turtle.circle(<span class="hljs-number">200</span>, <span class="hljs-number">10</span>)<br>turtle.circle(-<span class="hljs-number">18</span>, <span class="hljs-number">80</span>)<br>turtle.circle(-<span class="hljs-number">180</span>, <span class="hljs-number">13</span>)<br>turtle.circle(-<span class="hljs-number">20</span>, <span class="hljs-number">90</span>)<br>turtle.circle(<span class="hljs-number">15</span>, <span class="hljs-number">60</span>)<br>turtle.setheading(<span class="hljs-number">42</span>)<br>turtle.circle(-<span class="hljs-number">200</span>, <span class="hljs-number">29</span>)<br>turtle.end_fill()<br><span class="hljs-comment"># 右腿内</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">38</span>, -<span class="hljs-number">210</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(-<span class="hljs-number">155</span>)<br>turtle.circle(<span class="hljs-number">15</span>, <span class="hljs-number">100</span>)<br>turtle.circle(-<span class="hljs-number">10</span>, <span class="hljs-number">110</span>)<br>turtle.circle(-<span class="hljs-number">100</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">15</span>, <span class="hljs-number">65</span>)<br>turtle.circle(-<span class="hljs-number">100</span>, <span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">200</span>, <span class="hljs-number">15</span>)<br>turtle.setheading(-<span class="hljs-number">14</span>)<br>turtle.circle(-<span class="hljs-number">200</span>, <span class="hljs-number">27</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 右眼</span><br><span class="hljs-comment"># 眼圈</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">64</span>, <span class="hljs-number">120</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">40</span>)<br>turtle.circle(-<span class="hljs-number">35</span>, <span class="hljs-number">152</span>)<br>turtle.circle(-<span class="hljs-number">100</span>, <span class="hljs-number">50</span>)<br>turtle.circle(-<span class="hljs-number">35</span>, <span class="hljs-number">130</span>)<br>turtle.circle(-<span class="hljs-number">100</span>, <span class="hljs-number">50</span>)<br>turtle.end_fill()<br><span class="hljs-comment"># 眼珠</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">47</span>, <span class="hljs-number">55</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">25</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">45</span>, <span class="hljs-number">62</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;darkslategray&quot;</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;darkslategray&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">19</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">45</span>, <span class="hljs-number">68</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">10</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">47</span>, <span class="hljs-number">86</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">5</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 左眼</span><br><span class="hljs-comment"># 眼圈</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">51</span>, <span class="hljs-number">82</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">120</span>)<br>turtle.circle(-<span class="hljs-number">32</span>, <span class="hljs-number">152</span>)<br>turtle.circle(-<span class="hljs-number">100</span>, <span class="hljs-number">55</span>)<br>turtle.circle(-<span class="hljs-number">25</span>, <span class="hljs-number">120</span>)<br>turtle.circle(-<span class="hljs-number">120</span>, <span class="hljs-number">45</span>)<br>turtle.end_fill()<br><span class="hljs-comment"># 眼珠</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">79</span>, <span class="hljs-number">60</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">24</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">79</span>, <span class="hljs-number">64</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;darkslategray&quot;</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;darkslategray&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">19</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">79</span>, <span class="hljs-number">70</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">10</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">79</span>, <span class="hljs-number">88</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;white&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">0</span>)<br>turtle.circle(<span class="hljs-number">5</span>, <span class="hljs-number">360</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 鼻子</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">37</span>, <span class="hljs-number">80</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.circle(-<span class="hljs-number">8</span>, <span class="hljs-number">130</span>)<br>turtle.circle(-<span class="hljs-number">22</span>, <span class="hljs-number">100</span>)<br>turtle.circle(-<span class="hljs-number">8</span>, <span class="hljs-number">130</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 嘴</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">15</span>, <span class="hljs-number">48</span>)<br>turtle.setheading(-<span class="hljs-number">36</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.circle(<span class="hljs-number">60</span>, <span class="hljs-number">70</span>)<br>turtle.setheading(-<span class="hljs-number">132</span>)<br>turtle.circle(-<span class="hljs-number">45</span>, <span class="hljs-number">100</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 彩虹圈</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">135</span>, <span class="hljs-number">120</span>)<br>turtle.pensize(<span class="hljs-number">5</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;cyan&quot;</span>)<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">60</span>)<br>turtle.circle(-<span class="hljs-number">165</span>, <span class="hljs-number">150</span>)<br>turtle.circle(-<span class="hljs-number">130</span>, <span class="hljs-number">78</span>)<br>turtle.circle(-<span class="hljs-number">250</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">138</span>, <span class="hljs-number">105</span>)<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">131</span>, <span class="hljs-number">116</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;slateblue&quot;</span>)<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">60</span>)<br>turtle.circle(-<span class="hljs-number">160</span>, <span class="hljs-number">144</span>)<br>turtle.circle(-<span class="hljs-number">120</span>, <span class="hljs-number">78</span>)<br>turtle.circle(-<span class="hljs-number">242</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">135</span>, <span class="hljs-number">105</span>)<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">127</span>, <span class="hljs-number">112</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;orangered&quot;</span>)<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">60</span>)<br>turtle.circle(-<span class="hljs-number">155</span>, <span class="hljs-number">136</span>)<br>turtle.circle(-<span class="hljs-number">116</span>, <span class="hljs-number">86</span>)<br>turtle.circle(-<span class="hljs-number">220</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">134</span>, <span class="hljs-number">103</span>)<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">123</span>, <span class="hljs-number">108</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;gold&quot;</span>)<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">60</span>)<br>turtle.circle(-<span class="hljs-number">150</span>, <span class="hljs-number">136</span>)<br>turtle.circle(-<span class="hljs-number">104</span>, <span class="hljs-number">86</span>)<br>turtle.circle(-<span class="hljs-number">220</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">126</span>, <span class="hljs-number">102</span>)<br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">120</span>, <span class="hljs-number">104</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;greenyellow&quot;</span>)<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">60</span>)<br>turtle.circle(-<span class="hljs-number">145</span>, <span class="hljs-number">136</span>)<br>turtle.circle(-<span class="hljs-number">90</span>, <span class="hljs-number">83</span>)<br>turtle.circle(-<span class="hljs-number">220</span>, <span class="hljs-number">30</span>)<br>turtle.circle(-<span class="hljs-number">120</span>, <span class="hljs-number">100</span>)<br>turtle.penup()<br><br><span class="hljs-comment"># 爱心</span><br>turtle.penup()<br>turtle.goto(<span class="hljs-number">220</span>, <span class="hljs-number">115</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;brown&quot;</span>)<br>turtle.pensize(<span class="hljs-number">1</span>)<br>turtle.fillcolor(<span class="hljs-string">&quot;brown&quot;</span>)<br>turtle.begin_fill()<br>turtle.pendown()<br>turtle.setheading(<span class="hljs-number">36</span>)<br>turtle.circle(-<span class="hljs-number">8</span>, <span class="hljs-number">180</span>)<br>turtle.circle(-<span class="hljs-number">60</span>, <span class="hljs-number">24</span>)<br>turtle.setheading(<span class="hljs-number">110</span>)<br>turtle.circle(-<span class="hljs-number">60</span>, <span class="hljs-number">24</span>)<br>turtle.circle(-<span class="hljs-number">8</span>, <span class="hljs-number">180</span>)<br>turtle.end_fill()<br><br><span class="hljs-comment"># 五环</span><br>turtle.penup()<br>turtle.goto(-<span class="hljs-number">5</span>, -<span class="hljs-number">170</span>)<br>turtle.pendown()<br>turtle.pencolor(<span class="hljs-string">&quot;blue&quot;</span>)<br>turtle.circle(<span class="hljs-number">6</span>)<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">10</span>, -<span class="hljs-number">170</span>)<br>turtle.pendown()<br>turtle.pencolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.circle(<span class="hljs-number">6</span>)<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">25</span>, -<span class="hljs-number">170</span>)<br>turtle.pendown()<br>turtle.pencolor(<span class="hljs-string">&quot;brown&quot;</span>)<br>turtle.circle(<span class="hljs-number">6</span>)<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">2</span>, -<span class="hljs-number">175</span>)<br>turtle.pendown()<br>turtle.pencolor(<span class="hljs-string">&quot;lightgoldenrod&quot;</span>)<br>turtle.circle(<span class="hljs-number">6</span>)<br>turtle.penup()<br>turtle.goto(<span class="hljs-number">16</span>, -<span class="hljs-number">175</span>)<br>turtle.pendown()<br>turtle.pencolor(<span class="hljs-string">&quot;green&quot;</span>)<br>turtle.circle(<span class="hljs-number">6</span>)<br>turtle.penup()<br><br>turtle.pencolor(<span class="hljs-string">&quot;black&quot;</span>)<br>turtle.goto(-<span class="hljs-number">16</span>, -<span class="hljs-number">160</span>)<br>turtle.write(<span class="hljs-string">&quot;BEIJING 2022&quot;</span>, font=(<span class="hljs-string">&#x27;Arial&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;bold italic&#x27;</span>))<br>turtle.hideturtle()<br><br>turtle.done()<br></code></pre></td></tr></table></figure><h1 id="代码原作者"><a href="#代码原作者" class="headerlink" title="代码原作者"></a>代码原作者</h1><p><a href="https://space.bilibili.com/17095888?spm_id_from=333.788.b_765f7570696e666f.2"><strong>Crossin的编程教室</strong></a></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>冰墩墩</tag>
      
      <tag>冬奥会</tag>
      
      <tag>Trtule</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matplotlib Color Example|Python点点</title>
    <link href="/2022/01/22/Matplotlib-Color-Example-Python%E7%82%B9%E7%82%B9/"/>
    <url>/2022/01/22/Matplotlib-Color-Example-Python%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222243641.png" srcset="/img/loading2.gif" lazyload></p><p>Matplotlib颜色参考，使用方式<a href="https://matplotlib.org/stable/index.html">点击此处参见官网</a></p><h1 id="1-颜色代码"><a href="#1-颜色代码" class="headerlink" title="1. 颜色代码"></a>1. 颜色代码</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;aliceblue&#x27;:            &#x27;#F0F8FF&#x27;,<br>&#x27;antiquewhite&#x27;:         &#x27;#FAEBD7&#x27;,<br>&#x27;aqua&#x27;:                 &#x27;#00FFFF&#x27;,<br>&#x27;aquamarine&#x27;:           &#x27;#7FFFD4&#x27;,<br>&#x27;azure&#x27;:                &#x27;#F0FFFF&#x27;,<br>&#x27;beige&#x27;:                &#x27;#F5F5DC&#x27;,<br>&#x27;bisque&#x27;:               &#x27;#FFE4C4&#x27;,<br>&#x27;black&#x27;:                &#x27;#<span class="hljs-number">000000</span>&#x27;,<br>&#x27;blanchedalmond&#x27;:       &#x27;#FFEBCD&#x27;,<br>&#x27;blue&#x27;:                 &#x27;#<span class="hljs-number">0000</span>FF&#x27;,<br>&#x27;blueviolet&#x27;:           &#x27;#8A2BE2&#x27;,<br>&#x27;brown&#x27;:                &#x27;#A52A2A&#x27;,<br>&#x27;burlywood&#x27;:            &#x27;#DEB887&#x27;,<br>&#x27;cadetblue&#x27;:            &#x27;#5F9EA0&#x27;,<br>&#x27;chartreuse&#x27;:           &#x27;#7FFF00&#x27;,<br>&#x27;chocolate&#x27;:            &#x27;#D<span class="hljs-number">2691</span>E&#x27;,<br>&#x27;coral&#x27;:                &#x27;#FF7F50&#x27;,<br>&#x27;cornflowerblue&#x27;:       &#x27;#<span class="hljs-number">6495</span>ED&#x27;,<br>&#x27;cornsilk&#x27;:             &#x27;#FFF8DC&#x27;,<br>&#x27;crimson&#x27;:              &#x27;#DC143C&#x27;,<br>&#x27;cyan&#x27;:                 &#x27;#00FFFF&#x27;,<br>&#x27;darkblue&#x27;:             &#x27;#<span class="hljs-number">0000</span>8B&#x27;,<br>&#x27;darkcyan&#x27;:             &#x27;#008B8B&#x27;,<br>&#x27;darkgoldenrod&#x27;:        &#x27;#B<span class="hljs-number">8860</span>B&#x27;,<br>&#x27;darkgray&#x27;:             &#x27;#A9A9A9&#x27;,<br>&#x27;darkgreen&#x27;:            &#x27;#<span class="hljs-number">006400</span>&#x27;,<br>&#x27;darkkhaki&#x27;:            &#x27;#BDB76B&#x27;,<br>&#x27;darkmagenta&#x27;:          &#x27;#8B008B&#x27;,<br>&#x27;darkolivegreen&#x27;:       &#x27;#556B2F&#x27;,<br>&#x27;darkorange&#x27;:           &#x27;#FF8C00&#x27;,<br>&#x27;darkorchid&#x27;:           &#x27;#<span class="hljs-number">9932</span>CC&#x27;,<br>&#x27;darkred&#x27;:              &#x27;#8B<span class="hljs-number">0000</span>&#x27;,<br>&#x27;darksalmon&#x27;:           &#x27;#E<span class="hljs-number">9967</span>A&#x27;,<br>&#x27;darkseagreen&#x27;:         &#x27;#8FBC8F&#x27;,<br>&#x27;darkslateblue&#x27;:        &#x27;#483D8B&#x27;,<br>&#x27;darkslategray&#x27;:        &#x27;#2F4F4F&#x27;,<br>&#x27;darkturquoise&#x27;:        &#x27;#00CED1&#x27;,<br>&#x27;darkviolet&#x27;:           &#x27;#<span class="hljs-number">9400</span>D3&#x27;,<br>&#x27;deeppink&#x27;:             &#x27;#FF<span class="hljs-number">1493</span>&#x27;,<br>&#x27;deepskyblue&#x27;:          &#x27;#00BFFF&#x27;,<br>&#x27;dimgray&#x27;:              &#x27;#<span class="hljs-number">696969</span>&#x27;,<br>&#x27;dodgerblue&#x27;:           &#x27;#1E90FF&#x27;,<br>&#x27;firebrick&#x27;:            &#x27;#B<span class="hljs-number">2222</span>2&#x27;,<br>&#x27;floralwhite&#x27;:          &#x27;#FFFAF0&#x27;,<br>&#x27;forestgreen&#x27;:          &#x27;#228B22&#x27;,<br>&#x27;fuchsia&#x27;:              &#x27;#FF00FF&#x27;,<br>&#x27;gainsboro&#x27;:            &#x27;#DCDCDC&#x27;,<br>&#x27;ghostwhite&#x27;:           &#x27;#F8F8FF&#x27;,<br>&#x27;gold&#x27;:                 &#x27;#FFD700&#x27;,<br>&#x27;goldenrod&#x27;:            &#x27;#DAA520&#x27;,<br>&#x27;gray&#x27;:                 &#x27;#<span class="hljs-number">808080</span>&#x27;,<br>&#x27;green&#x27;:                &#x27;#<span class="hljs-number">008000</span>&#x27;,<br>&#x27;greenyellow&#x27;:          &#x27;#ADFF2F&#x27;,<br>&#x27;honeydew&#x27;:             &#x27;#F0FFF0&#x27;,<br>&#x27;hotpink&#x27;:              &#x27;#FF69B4&#x27;,<br>&#x27;indianred&#x27;:            &#x27;#CD5C5C&#x27;,<br>&#x27;indigo&#x27;:               &#x27;#4B<span class="hljs-number">0082</span>&#x27;,<br>&#x27;ivory&#x27;:                &#x27;#FFFFF0&#x27;,<br>&#x27;khaki&#x27;:                &#x27;#F0E68C&#x27;,<br>&#x27;lavender&#x27;:             &#x27;#E6E6FA&#x27;,<br>&#x27;lavenderblush&#x27;:        &#x27;#FFF0F5&#x27;,<br>&#x27;lawngreen&#x27;:            &#x27;#7CFC00&#x27;,<br>&#x27;lemonchiffon&#x27;:         &#x27;#FFFACD&#x27;,<br>&#x27;lightblue&#x27;:            &#x27;#ADD8E6&#x27;,<br>&#x27;lightcoral&#x27;:           &#x27;#F<span class="hljs-number">0808</span>0&#x27;,<br>&#x27;lightcyan&#x27;:            &#x27;#E0FFFF&#x27;,<br>&#x27;lightgoldenrodyellow&#x27;: &#x27;#FAFAD2&#x27;,<br>&#x27;lightgreen&#x27;:           &#x27;#90EE90&#x27;,<br>&#x27;lightgray&#x27;:            &#x27;#D3D3D3&#x27;,<br>&#x27;lightpink&#x27;:            &#x27;#FFB6C1&#x27;,<br>&#x27;lightsalmon&#x27;:          &#x27;#FFA07A&#x27;,<br>&#x27;lightseagreen&#x27;:        &#x27;#20B2AA&#x27;,<br>&#x27;lightskyblue&#x27;:         &#x27;#87CEFA&#x27;,<br>&#x27;lightslategray&#x27;:       &#x27;#<span class="hljs-number">778899</span>&#x27;,<br>&#x27;lightsteelblue&#x27;:       &#x27;#B0C4DE&#x27;,<br>&#x27;lightyellow&#x27;:          &#x27;#FFFFE0&#x27;,<br>&#x27;lime&#x27;:                 &#x27;#00FF00&#x27;,<br>&#x27;limegreen&#x27;:            &#x27;#32CD32&#x27;,<br>&#x27;linen&#x27;:                &#x27;#FAF0E6&#x27;,<br>&#x27;magenta&#x27;:              &#x27;#FF00FF&#x27;,<br>&#x27;maroon&#x27;:               &#x27;#<span class="hljs-number">800000</span>&#x27;,<br>&#x27;mediumaquamarine&#x27;:     &#x27;#66CDAA&#x27;,<br>&#x27;mediumblue&#x27;:           &#x27;#<span class="hljs-number">0000</span>CD&#x27;,<br>&#x27;mediumorchid&#x27;:         &#x27;#BA55D3&#x27;,<br>&#x27;mediumpurple&#x27;:         &#x27;#<span class="hljs-number">9370</span>DB&#x27;,<br>&#x27;mediumseagreen&#x27;:       &#x27;#3CB371&#x27;,<br>&#x27;mediumslateblue&#x27;:      &#x27;#7B68EE&#x27;,<br>&#x27;mediumspringgreen&#x27;:    &#x27;#00FA9A&#x27;,<br>&#x27;mediumturquoise&#x27;:      &#x27;#48D1CC&#x27;,<br>&#x27;mediumvioletred&#x27;:      &#x27;#C<span class="hljs-number">7158</span>5&#x27;,<br>&#x27;midnightblue&#x27;:         &#x27;#<span class="hljs-number">191970</span>&#x27;,<br>&#x27;mintcream&#x27;:            &#x27;#F5FFFA&#x27;,<br>&#x27;mistyrose&#x27;:            &#x27;#FFE4E1&#x27;,<br>&#x27;moccasin&#x27;:             &#x27;#FFE4B5&#x27;,<br>&#x27;navajowhite&#x27;:          &#x27;#FFDEAD&#x27;,<br>&#x27;navy&#x27;:                 &#x27;#<span class="hljs-number">000080</span>&#x27;,<br>&#x27;oldlace&#x27;:              &#x27;#FDF5E6&#x27;,<br>&#x27;olive&#x27;:                &#x27;#<span class="hljs-number">808000</span>&#x27;,<br>&#x27;olivedrab&#x27;:            &#x27;#6B8E23&#x27;,<br>&#x27;orange&#x27;:               &#x27;#FFA500&#x27;,<br>&#x27;orangered&#x27;:            &#x27;#FF<span class="hljs-number">4500</span>&#x27;,<br>&#x27;orchid&#x27;:               &#x27;#DA70D6&#x27;,<br>&#x27;palegoldenrod&#x27;:        &#x27;#EEE8AA&#x27;,<br>&#x27;palegreen&#x27;:            &#x27;#98FB98&#x27;,<br>&#x27;paleturquoise&#x27;:        &#x27;#AFEEEE&#x27;,<br>&#x27;palevioletred&#x27;:        &#x27;#DB<span class="hljs-number">7093</span>&#x27;,<br>&#x27;papayawhip&#x27;:           &#x27;#FFEFD5&#x27;,<br>&#x27;peachpuff&#x27;:            &#x27;#FFDAB9&#x27;,<br>&#x27;peru&#x27;:                 &#x27;#CD853F&#x27;,<br>&#x27;pink&#x27;:                 &#x27;#FFC0CB&#x27;,<br>&#x27;plum&#x27;:                 &#x27;#DDA0DD&#x27;,<br>&#x27;powderblue&#x27;:           &#x27;#B0E0E6&#x27;,<br>&#x27;purple&#x27;:               &#x27;#<span class="hljs-number">800080</span>&#x27;,<br>&#x27;red&#x27;:                  &#x27;#FF<span class="hljs-number">0000</span>&#x27;,<br>&#x27;rosybrown&#x27;:            &#x27;#BC8F8F&#x27;,<br>&#x27;royalblue&#x27;:            &#x27;#<span class="hljs-number">4169</span>E1&#x27;,<br>&#x27;saddlebrown&#x27;:          &#x27;#8B<span class="hljs-number">4513</span>&#x27;,<br>&#x27;salmon&#x27;:               &#x27;#FA<span class="hljs-number">8072</span>&#x27;,<br>&#x27;sandybrown&#x27;:           &#x27;#FAA460&#x27;,<br>&#x27;seagreen&#x27;:             &#x27;#2E8B57&#x27;,<br>&#x27;seashell&#x27;:             &#x27;#FFF5EE&#x27;,<br>&#x27;sienna&#x27;:               &#x27;#A<span class="hljs-number">0522</span>D&#x27;,<br>&#x27;silver&#x27;:               &#x27;#C0C0C0&#x27;,<br>&#x27;skyblue&#x27;:              &#x27;#87CEEB&#x27;,<br>&#x27;slateblue&#x27;:            &#x27;#6A5ACD&#x27;,<br>&#x27;slategray&#x27;:            &#x27;#<span class="hljs-number">708090</span>&#x27;,<br>&#x27;snow&#x27;:                 &#x27;#FFFAFA&#x27;,<br>&#x27;springgreen&#x27;:          &#x27;#00FF7F&#x27;,<br>&#x27;steelblue&#x27;:            &#x27;#<span class="hljs-number">4682</span>B4&#x27;,<br>&#x27;tan&#x27;:                  &#x27;#D2B48C&#x27;,<br>&#x27;teal&#x27;:                 &#x27;#<span class="hljs-number">008080</span>&#x27;,<br>&#x27;thistle&#x27;:              &#x27;#D8BFD8&#x27;,<br>&#x27;tomato&#x27;:               &#x27;#FF<span class="hljs-number">6347</span>&#x27;,<br>&#x27;turquoise&#x27;:            &#x27;#40E0D0&#x27;,<br>&#x27;violet&#x27;:               &#x27;#EE82EE&#x27;,<br>&#x27;wheat&#x27;:                &#x27;#F5DEB3&#x27;,<br>&#x27;white&#x27;:                &#x27;#FFFFFF&#x27;,<br>&#x27;whitesmoke&#x27;:           &#x27;#F5F5F5&#x27;,<br>&#x27;yellow&#x27;:               &#x27;#FFFF00&#x27;,<br>&#x27;yellowgreen&#x27;:          &#x27;#9ACD32&#x27;<br></code></pre></td></tr></table></figure><h2 id="以上代码对应颜色"><a href="#以上代码对应颜色" class="headerlink" title="以上代码对应颜色"></a>以上代码对应颜色</h2><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222247339.png" srcset="/img/loading2.gif" lazyload></p><h1 id="2-直接写英文的方式"><a href="#2-直接写英文的方式" class="headerlink" title="2. 直接写英文的方式"></a>2. 直接写英文的方式</h1><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222248130.png" srcset="/img/loading2.gif" lazyload></p><h1 id="3-颜色板-渐变色"><a href="#3-颜色板-渐变色" class="headerlink" title="3. 颜色板-渐变色"></a>3. <a href="https://matplotlib.org/2.0.2/examples/color/colormaps_reference.html">颜色板-渐变色</a></h1><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222250541.png" srcset="/img/loading2.gif" lazyload alt="Perceptually Uniform Sequential colormaps"></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222251097.png" srcset="/img/loading2.gif" lazyload alt="Sequential colormaps"></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222251795.png" srcset="/img/loading2.gif" lazyload alt="Sequential (2) colormaps"></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222251451.png" srcset="/img/loading2.gif" lazyload alt="Diverging colormaps"></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222251528.png" srcset="/img/loading2.gif" lazyload alt="Qualitative colormaps"></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201222251356.png" srcset="/img/loading2.gif" lazyload alt="Miscellaneous colormaps"></p><h2 id="颜色板源代码下载-py"><a href="#颜色板源代码下载-py" class="headerlink" title="颜色板源代码下载.py"></a><a href="https://matplotlib.org/2.0.2/mpl_examples/color/colormaps_reference.py">颜色板源代码下载.py</a></h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://matplotlib.org/stable/index.html">Matplotlib 3.5.1 documentation</a></li><li><a href="https://blog.51cto.com/huangyg/2373953">510TOC-matplotlib颜色，线条，mark点</a></li></ol><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a><a href="https://liegu0317.top/about/">关于我</a></h1>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
      <tag>Color Example</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What Are You Doing ? | bilibili</title>
    <link href="/2022/01/06/%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E6%83%B3%E5%AD%A6%E4%B9%A0,%20%E5%B0%B1%E5%9D%9A%E6%8C%81%E6%8A%8A%E8%BF%99%E4%B8%AA%E8%A7%86%E9%A2%91%E7%9C%8B%E5%AE%8Cbilibili/"/>
    <url>/2022/01/06/%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E6%83%B3%E5%AD%A6%E4%B9%A0,%20%E5%B0%B1%E5%9D%9A%E6%8C%81%E6%8A%8A%E8%BF%99%E4%B8%AA%E8%A7%86%E9%A2%91%E7%9C%8B%E5%AE%8Cbilibili/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202201061959261.png" srcset="/img/loading2.gif" lazyload alt="What Are You Doing ? "></p><iframe src="//player.bilibili.com/player.html?aid=248824623&bvid=BV1fv411n73Q&cid=359525880&page=1" scrolling="no" border="2" frameborder="no" framespacing="2" allowfullscreen="true"> </iframe><p>**转载自b站<a href="https://www.bilibili.com/video/BV1fv411n73Q/">净整没用的</a> **    制作：Benlionel Scott</p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>文章分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
      <tag>bilibili</tag>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python运算符|python点点</title>
    <link href="/2021/12/30/Python%E8%BF%90%E7%AE%97%E7%AC%A6-python%E7%82%B9%E7%82%B9/"/>
    <url>/2021/12/30/Python%E8%BF%90%E7%AE%97%E7%AC%A6-python%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112302058723.png" srcset="/img/loading2.gif" lazyload></p><h1 id="什么是运算符？"><a href="#什么是运算符？" class="headerlink" title="什么是运算符？"></a>什么是运算符？</h1><p>本章节主要说明Python的运算符。举个简单的例子 <strong>4 +5 &#x3D; 9</strong> 。 例子中，<strong>4</strong> 和 <strong>5</strong> 被称为<strong>操作数</strong>，”<strong>+</strong>“ 称为运算符。</p><p>Python支持以下类型运算符：</p><ul><li><p>算术运算符</p></li><li><p>比较（关系）运算符</p></li><li><p>赋值运算符</p></li><li><p>逻辑运算符</p></li><li><p>位运算符</p></li><li><p>成员运算符</p></li><li><p>身份运算符</p></li><li><p>运算符优先级</p></li></ul><hr><h1 id="Python算术运算符-※"><a href="#Python算术运算符-※" class="headerlink" title="Python算术运算符 ※"></a>Python算术运算符 ※</h1><p>以下假设变量： <strong>a&#x3D;10，b&#x3D;20</strong>：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">&#x2F;</td><td align="left">除 - x除以y</td><td align="left">b &#x2F; a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">&#x2F;&#x2F;</td><td align="left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td align="left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 -5</code></td></tr></tbody></table><hr><h1 id="Python比较运算符"><a href="#Python比较运算符" class="headerlink" title="Python比较运算符"></a>Python比较运算符</h1><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a &#x3D;&#x3D; b) 返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a !&#x3D; b) 返回 true.</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td><td align="left">(a &lt;&gt; b) 返回 true。这个运算符类似 !&#x3D; 。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于 - 返回x是否大于等于y。</td><td align="left">(a &gt;&#x3D; b) 返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于 - 返回x是否小于等于y。</td><td align="left">(a &lt;&#x3D; b) 返回 true。</td></tr></tbody></table><p>以下实例演示了Python所有比较运算符的操作：</p><hr><h1 id="Python赋值运算符"><a href="#Python赋值运算符" class="headerlink" title="Python赋值运算符"></a>Python赋值运算符</h1><p>以下假设变量a为10，变量b为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符</td><td align="left">c &#x3D; a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+&#x3D;</td><td align="left">加法赋值运算符</td><td align="left">c +&#x3D; a 等效于 c &#x3D; c + a</td></tr><tr><td align="left">-&#x3D;</td><td align="left">减法赋值运算符</td><td align="left">c -&#x3D; a 等效于 c &#x3D; c - a</td></tr><tr><td align="left">*&#x3D;</td><td align="left">乘法赋值运算符</td><td align="left">c *&#x3D; a 等效于 c &#x3D; c * a</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">除法赋值运算符</td><td align="left">c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td></tr><tr><td align="left">%&#x3D;</td><td align="left">取模赋值运算符</td><td align="left">c %&#x3D; a 等效于 c &#x3D; c % a</td></tr><tr><td align="left">**&#x3D;</td><td align="left">幂赋值运算符</td><td align="left">c **&#x3D; a 等效于 c &#x3D; c ** a</td></tr><tr><td align="left">&#x2F;&#x2F;&#x3D;</td><td align="left">取整除赋值运算符</td><td align="left">c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td></tr></tbody></table><hr><h1 id="Python位运算符"><a href="#Python位运算符" class="headerlink" title="Python位运算符"></a>Python位运算符</h1><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">a</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">1100</span><br><br><span class="hljs-string">b</span> <span class="hljs-string">=</span> <span class="hljs-number">0000 </span><span class="hljs-number">1101</span><br><br><span class="hljs-string">-----------------</span><br><br><span class="hljs-string">a&amp;b</span> <span class="hljs-string">=</span> <span class="hljs-number">0000 </span><span class="hljs-number">1100</span><br><br><span class="hljs-string">a|b</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">1101</span><br><br><span class="hljs-string">a^b</span> <span class="hljs-string">=</span> <span class="hljs-number">0011 </span><span class="hljs-number">0001</span><br><br><span class="hljs-string">~a</span>  <span class="hljs-string">=</span> <span class="hljs-number">1100 </span><span class="hljs-number">0011</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由 <strong>&lt;&lt;</strong> 右边的数字指定了移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，**&gt;&gt;** 右边的数字指定了移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><hr><h1 id="Python逻辑运算符"><a href="#Python逻辑运算符" class="headerlink" title="Python逻辑运算符"></a>Python逻辑运算符</h1><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><hr><h1 id="Python成员运算符"><a href="#Python成员运算符" class="headerlink" title="Python成员运算符"></a>Python成员运算符</h1><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><hr><h1 id="Python身份运算符"><a href="#Python身份运算符" class="headerlink" title="Python身份运算符"></a>Python身份运算符</h1><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) &#x3D;&#x3D; id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 **id(a) !&#x3D; id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html">id()</a> 函数用于获取对象内存地址。</p><hr><h1 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h1><p>以下表格列出了从最高到最低优先级的所有运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* &#x2F; % &#x2F;&#x2F;</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; &#x3D;&#x3D; !&#x3D;</td><td align="left">等于运算符</td></tr><tr><td align="left">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.runoob.com/python/python-operators.html">菜鸟教程 - 运算符</a><br><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jupyter notebook 切换工作目录|Python点点</title>
    <link href="/2021/12/30/jupyter-notebook-%E5%88%87%E6%8D%A2%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/"/>
    <url>/2021/12/30/jupyter-notebook-%E5%88%87%E6%8D%A2%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112300728611.png" srcset="/img/loading2.gif" lazyload></p><h1 id="方法一（CMD）"><a href="#方法一（CMD）" class="headerlink" title="方法一（CMD）"></a>方法一（CMD）</h1><p>打开CMD分别执行以下命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">d:</span>  <br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jupyter notebook</span><br></code></pre></td></tr></table></figure><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112300729342.png" srcset="/img/loading2.gif" lazyload></p><p>此方法可能会报错，原因可能是没有添加换将变量，尝试方法二</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h3 id="在Anaconda-Prompt中执行上述命令即可"><a href="#在Anaconda-Prompt中执行上述命令即可" class="headerlink" title="在Anaconda Prompt中执行上述命令即可"></a>在<strong>Anaconda Prompt</strong>中执行上述命令即可</h3><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>jupyter notebook</tag>
      
      <tag>工作目录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有用的知识|网络协议</title>
    <link href="/2021/12/28/%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/12/28/%E6%9C%89%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="ping（网络诊断工具）"><a href="#ping（网络诊断工具）" class="headerlink" title="ping（网络诊断工具）"></a>ping（网络诊断工具）</h1><p><strong>ping （Packet Internet Groper）</strong> 是一种<a href="https://baike.baidu.com/item/%E5%9B%A0%E7%89%B9%E7%BD%91/114119">因特网</a>包探索器，用于测试网络连接量的程序 。Ping是工作在[ TCP&#x2F;IP](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> TCP%2FIP&#x2F;214077)网络体系结构中<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/16412033">应用层</a>的一个服务命令， 主要是向特定的目的主机发送[ ICMP](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a> ICMP&#x2F;572452)（Internet Control Message Protocol 因特网报文控制协议）<a href="https://baike.baidu.com/item/Echo/35157">Echo</a> 请求报文，测试目的站是否可达及了解其有关状态  。</p><ul><li>在查看<a href="liegu0317.top">域名</a>地址时用到</li></ul><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112282032883.png" srcset="/img/loading2.gif" lazyload alt="查看域名地址"></p><h1 id="HTTP-301"><a href="#HTTP-301" class="headerlink" title="HTTP 301"></a>HTTP 301</h1><p><strong>301 Move Permanently</strong> 是<a href="https://zh.wikipedia.org/wiki/HTTP%E5%8D%8F%E8%AE%AE">HTTP协议</a>中的一个状态码（Status Code）。可以简单地理解为该资源已经被永久改变了位置[<a href="https://zh.wikipedia.org/wiki/HTTP_301#cite_note-1">1]</a>，通常会发送<a href="https://zh.wikipedia.org/wiki/HTTP_Location">HTTP Location</a>来<a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E5%AE%9A%E5%90%91">重定向</a>到正确的新位置。</p><p>返回301状态码进行跳转被<a href="https://zh.wikipedia.org/wiki/Google">Google</a>认为是将网站地址由HTTP迁移到<a href="https://zh.wikipedia.org/wiki/HTTPS">HTTPS</a>的最佳方法。</p><ul><li>将域名绑定现原部署在github博客时遇到</li></ul><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252216395.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>名词理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ping</tag>
      
      <tag>301</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿虚同学的储物间|白嫖软件必备</title>
    <link href="/2021/12/25/%E9%98%BF%E8%99%9A%E7%9A%84%E5%82%A8%E7%89%A9%E9%97%B4-%E6%89%BE%E8%BD%AF%E4%BB%B6%E5%BF%85%E5%A4%87/"/>
    <url>/2021/12/25/%E9%98%BF%E8%99%9A%E7%9A%84%E5%82%A8%E7%89%A9%E9%97%B4-%E6%89%BE%E8%BD%AF%E4%BB%B6%E5%BF%85%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252135104.png" srcset="/img/loading2.gif" lazyload></p><h1 id="本页面引用自“阿虚同学的储物间”，可在此页直接查找所需资源。"><a href="#本页面引用自“阿虚同学的储物间”，可在此页直接查找所需资源。" class="headerlink" title="本页面引用自“阿虚同学的储物间”，可在此页直接查找所需资源。"></a>本页面引用自“阿虚同学的储物间”，可在此页直接查找所需资源。</h1><iframe  height=550width=100% src="https://axutongxue.com/"  frameborder=0  allowfullscreen></iframe><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252145827.jpeg" srcset="/img/loading2.gif" lazyload alt="互联网宝藏挖掘机"></p><p>（<a href="https://axutongxue.com/">点击此处跳转至’阿虚同学的储物间’原地址</a>）</p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112252215128.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>储物间</tag>
      
      <tag>阿虚</tag>
      
      <tag>破解软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成随机数|Python点点</title>
    <link href="/2021/12/24/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0-Python%E7%82%B9%E7%82%B9/"/>
    <url>/2021/12/24/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0-Python%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112222052316.png" srcset="/img/loading2.gif" lazyload  /><h1 id="一、使用random模块生成随机数组"><a href="#一、使用random模块生成随机数组" class="headerlink" title="一、使用random模块生成随机数组"></a><strong>一、使用random模块生成随机数组</strong></h1><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112242105953.jpeg" srcset="/img/loading2.gif" lazyload alt="python 生成随机数模块random 常用方法总结" style="zoom:80%;" /><p>python的random模块中有一些生成随机数字的方法，例如random.randint， random.random, random.uniform, random.randrange,这些函数大同小异，均是在返回指定范围内的一个整数或浮点数，下边简单解释一下这几个函数。</p><h2 id="1、random-randint-low-hight-gt-返回一个位于-low-hight-之间的整数"><a href="#1、random-randint-low-hight-gt-返回一个位于-low-hight-之间的整数" class="headerlink" title="1、random.randint(low, hight) -&gt; 返回一个位于[low,hight]之间的整数"></a>1、random.randint(low, hight) -&gt; 返回一个位于[low,hight]之间的<em>整数</em></h2><p>该函数接受两个参数，这两个参数必须是整数（或者小数位是0的浮点数），并且第一个参数必须不大于第二个参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">random</span>.randint<br><span class="hljs-attribute">import</span> random<br><span class="hljs-attribute">random</span>.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-attribute">6</span><br><span class="hljs-attribute">random</span>.randint(<span class="hljs-number">1</span>.<span class="hljs-number">0</span>, <span class="hljs-number">10</span>.<span class="hljs-number">0</span>)<br><span class="hljs-attribute">1</span><br></code></pre></td></tr></table></figure><h2 id="2、random-random-gt-不接受参数，返回一个-0-0-1-0-之间的浮点数"><a href="#2、random-random-gt-不接受参数，返回一个-0-0-1-0-之间的浮点数" class="headerlink" title="2、random.random() -&gt; 不接受参数，返回一个[0.0, 1.0)之间的浮点数"></a>2、random.random() -&gt; 不接受参数，返回一个[0.0, 1.0)之间的<em>浮点数</em></h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">random</span>.<span class="hljs-built_in">random</span>()<br><span class="hljs-number">0.227730775007011</span><br></code></pre></td></tr></table></figure><h2 id="3、random-uniform-val1-val2-gt-接受两个数字参数，返回两个数字区间的一个浮点数，不要求val1小于等于val2"><a href="#3、random-uniform-val1-val2-gt-接受两个数字参数，返回两个数字区间的一个浮点数，不要求val1小于等于val2" class="headerlink" title="3、random.uniform(val1, val2) -&gt; 接受两个数字参数，返回两个数字区间的一个浮点数，不要求val1小于等于val2"></a>3、random.uniform(val1, val2) -&gt; 接受两个数字参数，返回两个数字区间的一个<em>浮点数</em>，不要求val1小于等于val2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs random.uniform(1,5.0)">random.uniform(9.9, 2)<br>5.189511116007191<br></code></pre></td></tr></table></figure><h2 id="4、random-randrange-start-stop-step-gt-返回以start开始，stop结束，step为步长的列表中的随机整数，同样，三个参数均为整数（或者小数位为0），若start大于stop时-，setp必须为负数-step不能是0"><a href="#4、random-randrange-start-stop-step-gt-返回以start开始，stop结束，step为步长的列表中的随机整数，同样，三个参数均为整数（或者小数位为0），若start大于stop时-，setp必须为负数-step不能是0" class="headerlink" title="4、random.randrange(start, stop, step) -&gt; 返回以start开始，stop结束，step为步长的列表中的随机整数，同样，三个参数均为整数（或者小数位为0），若start大于stop时 ，setp必须为负数.step不能是0."></a>4、random.randrange(start, stop, step) -&gt; 返回以start开始，stop结束，step为步长的列表中的随机<em>整数</em>，同样，三个参数均为<em>整数（或者小数位为0）</em>，若start大于stop时 ，setp必须为负数.step不能是0.</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">random</span>.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)  #返回[<span class="hljs-number">1</span>,<span class="hljs-number">100</span>]之间的奇数<br><span class="hljs-attribute">random</span>.ranrange(<span class="hljs-number">100</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>)  #返回[<span class="hljs-number">100</span>,<span class="hljs-number">1</span>]之间的偶数<br><span class="hljs-attribute">2</span><br></code></pre></td></tr></table></figure><h2 id="5、生成随机数组"><a href="#5、生成随机数组" class="headerlink" title="5、生成随机数组"></a>5、生成随机数组</h2><p>下边我们用random.randint来生成一个随机数组</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import <span class="hljs-built_in">random</span><br>def random_int_list(<span class="hljs-built_in">start</span>, <span class="hljs-built_in">stop</span>, <span class="hljs-built_in">length</span>):<br>    <span class="hljs-built_in">start</span>, <span class="hljs-built_in">stop</span> = (int(<span class="hljs-built_in">start</span>), int(<span class="hljs-built_in">stop</span>)) <span class="hljs-keyword">if</span> <span class="hljs-built_in">start</span> &lt;= <span class="hljs-built_in">stop</span> <span class="hljs-keyword">else</span> (int(<span class="hljs-built_in">stop</span>), int(<span class="hljs-built_in">start</span>))<br>    <span class="hljs-built_in">length</span> = int(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">length</span>)) <span class="hljs-keyword">if</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    random_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">length</span>):<br>        random_list.append(<span class="hljs-built_in">random</span>.randint(<span class="hljs-built_in">start</span>, <span class="hljs-built_in">stop</span>))<br>    <span class="hljs-literal">return</span> random_list<br></code></pre></td></tr></table></figure><p>接下来我们就可以用这个函数来生成一个随机的整数序列了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">random_int_list</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<br><span class="hljs-attribute">random_int_list</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<span class="hljs-meta"></span><br><span class="hljs-meta">[54, 13, 6, 89, 87, 39, 60, 2, 63, 61]</span><br></code></pre></td></tr></table></figure><h1 id="二、使用numpy-random模块来生成随机数组"><a href="#二、使用numpy-random模块来生成随机数组" class="headerlink" title="二、使用numpy.random模块来生成随机数组"></a><strong>二、使用numpy.random模块来生成随机数组</strong></h1><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112242135274.svg" srcset="/img/loading2.gif" lazyload alt="NumPy_logo_2020"></p><h2 id="1、np-random-rand-用于生成-0-0-1-0-之间的随机浮点数，-当没有参数时，返回一个随机浮点数，当有一个参数时，返回该参数长度大小的一维随机浮点数数组，参数建议是整数型，因为现有新版的numpy不再支持非整形参数。"><a href="#1、np-random-rand-用于生成-0-0-1-0-之间的随机浮点数，-当没有参数时，返回一个随机浮点数，当有一个参数时，返回该参数长度大小的一维随机浮点数数组，参数建议是整数型，因为现有新版的numpy不再支持非整形参数。" class="headerlink" title="1、np.random.rand 用于生成[0.0, 1.0)之间的随机浮点数， 当没有参数时，返回一个随机浮点数，当有一个参数时，返回该参数长度大小的一维随机浮点数数组，参数建议是整数型，因为现有新版的numpy不再支持非整形参数。"></a>1、np.random.rand 用于生成[0.0, 1.0)之间的随机<em>浮点数</em>， 当没有参数时，返回一个随机浮点数，当有一个参数时，返回该参数长度大小的一维随机<em>浮点数数组</em>，参数建议是<em>整数型</em>，因为现有新版的numpy不再支持非整形参数。</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">import</span> numpy as np<br><span class="hljs-attribute">np</span>.random.rand(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">array</span>([ <span class="hljs-number">0</span>.<span class="hljs-number">56911206</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">99777291</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">18943144</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">19387287</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">75090637</span>,<br><span class="hljs-attribute">0</span>.<span class="hljs-number">18692814</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">69804514</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">48808425</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">79440667</span>,  <span class="hljs-number">0</span>.<span class="hljs-number">66959075</span>])<br></code></pre></td></tr></table></figure><p>当然该函数还可以用于生成多维数组，这里不做详述。</p><h2 id="2、np-random-randn该函数返回一个样本，具有标准正态分布。"><a href="#2、np-random-randn该函数返回一个样本，具有标准正态分布。" class="headerlink" title="2、np.random.randn该函数返回一个样本，具有标准正态分布。"></a>2、np.random.randn该函数返回一个样本，具有标准正态分布。</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">np.random.randn(<span class="hljs-number">10</span>)<br>np.random.randn(<span class="hljs-number">10</span>)<br>array([-<span class="hljs-number">1.6765704</span> ,  <span class="hljs-number">0.66361856</span>,  <span class="hljs-number">0.04029481</span>,  <span class="hljs-number">1.19965741</span>, -<span class="hljs-number">0.57514593</span>,<br>-<span class="hljs-number">0.79603968</span>,  <span class="hljs-number">1.52261545</span>, -<span class="hljs-number">2.17401814</span>,  <span class="hljs-number">0.86671727</span>, -<span class="hljs-number">1.17945975</span>])<br></code></pre></td></tr></table></figure><h2 id="3、np-random-randint-low-high-size-返回随机的整数，位于半开区间-low-high-。"><a href="#3、np-random-randint-low-high-size-返回随机的整数，位于半开区间-low-high-。" class="headerlink" title="3、np.random.randint(low[, high, size]) 返回随机的整数，位于半开区间 [low, high)。"></a>3、np.random.randint(low[, high, size]) 返回随机的整数，位于半开区间 [low, high)。</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">np</span>.random.randint(<span class="hljs-number">10</span>,size=<span class="hljs-number">10</span>)<br><span class="hljs-attribute">np</span>.random.randint(<span class="hljs-number">10</span>,size=<span class="hljs-number">10</span>)<br><span class="hljs-attribute">array</span>([<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br></code></pre></td></tr></table></figure><h2 id="4、random-integers-low-high-size-返回随机的整数，位于闭区间-low-high-。"><a href="#4、random-integers-low-high-size-返回随机的整数，位于闭区间-low-high-。" class="headerlink" title="4、random_integers(low[, high, size]) 返回随机的整数，位于闭区间 [low, high]。"></a>4、random_integers(low[, high, size]) 返回随机的整数，位于闭区间 [low, high]。</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">np</span>.<span class="hljs-built_in">random</span>.random_integers(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">np</span>.<span class="hljs-built_in">random</span>.random_integers(<span class="hljs-number">5</span>)<br><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="5、np-random-shuffle-x-类似洗牌，打乱顺序；np-random-permutation-x-返回一个随机排列"><a href="#5、np-random-shuffle-x-类似洗牌，打乱顺序；np-random-permutation-x-返回一个随机排列" class="headerlink" title="5、np.random.shuffle(x) 类似洗牌，打乱顺序；np.random.permutation(x)返回一个随机排列"></a>5、np.random.shuffle(x) 类似洗牌，打乱顺序；np.random.permutation(x)返回一个随机排列</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> = np.arange(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">arr</span> = np.arange(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">np</span>.random.shuffle(arr)<br><span class="hljs-attribute">arr</span><span class="hljs-meta"></span><br><span class="hljs-meta">[1 7 5 2 9 4 3 6 0 8]</span><br><br><span class="hljs-attribute">np</span>.random.permutation(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://blog.csdn.net/Scarlett_ma/article/details/79173632">python numpy.random生成随机数组</a></li></ul><ul><li><a href="https://blog.csdn.net/healthy_coder/article/details/50502643">python生成随机数组</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>随机数</tag>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>type(), dtype(), astype()的区别|Python点点</title>
    <link href="/2021/12/22/type(),%20dtype(),%20astype()%E7%9A%84%E5%8C%BA%E5%88%ABPython/"/>
    <url>/2021/12/22/type(),%20dtype(),%20astype()%E7%9A%84%E5%8C%BA%E5%88%ABPython/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112222052135.png" srcset="/img/loading2.gif" lazyload></p><table><thead><tr><th>函数</th><th align="left">说明</th></tr></thead><tbody><tr><td>type()</td><td align="left">返回数据结构类型（list、dict、numpy.ndarray 等）</td></tr><tr><td>dtype()</td><td align="left">返回数据元素的数据类型（int、float等）<br />备注：1）由于 list、dict 等可以包含不同的数据类型，因此不可调用dtype()函数<br />2）np.array 中要求所有元素属于同一数据类型，因此可调用dtype()函数</td></tr><tr><td>astype()</td><td align="left">改变np.array中所有数据元素的数据类型。<br />备注：能用dtype() 才能用 astype()</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Python点点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>type</tag>
      
      <tag>dtype</tag>
      
      <tag>astype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节byte(B) 位bit(b)|存储计量单位</title>
    <link href="/2021/12/22/%E5%AD%97%E8%8A%82byte-%E4%BD%8Dbit-%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/"/>
    <url>/2021/12/22/%E5%AD%97%E8%8A%82byte-%E4%BD%8Dbit-%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112221307572.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p>计算机存储单位一般用B，KB、MB、GB、TB、PB、EB、ZB、YB、BB来表示</p></blockquote><h1 id="字"><a href="#字" class="headerlink" title="字"></a>字</h1><p>word</p><p>一个字的<code>字长</code>为16<br>一个字节的<code>字长</code>是8</p><h1 id="字节-byte-B"><a href="#字节-byte-B" class="headerlink" title="字节 byte(B)"></a>字节 byte(B)</h1><p>8个二进制位为一个字节(B)，最常用的单位。</p><h1 id="位-bit-b"><a href="#位-bit-b" class="headerlink" title="位 bit(b)"></a>位 bit(b)</h1><p>Binary Digits,又称比特，存放一位二进制数，即 0 或 1，最小的存储单位。</p><h1 id="兆-M"><a href="#兆-M" class="headerlink" title="兆 M"></a>兆 M</h1><p>“兆”为百万级数量单位。</p><h1 id="字长"><a href="#字长" class="headerlink" title="字长"></a>字长</h1><blockquote><p> 字长是CPU的主要技术指标之一，指的是CPU一次能并行处理的<code>二进制位数</code>，字长总是8的整数倍，通常PC机的字长为16位（早期），32位，64位。</p></blockquote><h1 id="等量转换关系"><a href="#等量转换关系" class="headerlink" title="等量转换关系"></a>等量转换关系</h1><blockquote><p>1KB (Kilobyte 千字节)&#x3D;1024B，<br>1MB (Megabyte 兆字节 简称“兆”)&#x3D;1024KB，<br>1GB (Gigabyte 吉字节 又称“千兆”)&#x3D;1024MB，<br>1TB (Trillionbyte 万亿字节 太字节)&#x3D;1024GB，其中1024&#x3D;2^10 ( 2 的10次方)，<br>1PB（Petabyte 千万亿字节 拍字节）&#x3D;1024TB，<br>1EB（Exabyte 百亿亿字节 艾字节）&#x3D;1024PB，<br>1ZB (Zettabyte 十万亿亿字节 泽字节)&#x3D; 1024 EB,<br>1YB (Jottabyte 一亿亿亿字节 尧字节)&#x3D; 1024 ZB,<br>1BB (Brontobyte 一千亿亿亿字节)&#x3D; 1024 YB.</p></blockquote><blockquote><p>bps 是 bits per second 的简称。一般数据机及网络通讯的传输速率都是以「bps」为单位。如56Kbps、100.0Mbps 等等。<br>Bps即是Byte per second 的简称。而电脑一般都以Bps 显示速度，如1Mbps 大约等同 128 KBps。</p></blockquote><h1 id="进制单位全称及译音"><a href="#进制单位全称及译音" class="headerlink" title="进制单位全称及译音"></a>进制单位全称及译音</h1><p>yotta, [尧]它, Y. 10^21, zetta, [泽]它, Z. 10^18, exa, [艾]可萨, E. 10^15, peta, [拍]它, P. 10^12, tera, [太]拉, T. 10^9, giga, [吉]咖, G. 10^6, mega, [兆]，M. 10^3</p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>名词理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>存储计量单位</tag>
      
      <tag>byte</tag>
      
      <tag>bit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杂文分享|Sudlim Typora</title>
    <link href="/2021/12/21/sublime-gitee-picgo/"/>
    <url>/2021/12/21/sublime-gitee-picgo/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文引用内容均来自维基百科或对应官方文档，内容链接可能需外网访问，请自行解决。</p></blockquote><h1 id="Sublime-安装-破解-汉化-详细教程"><a href="#Sublime-安装-破解-汉化-详细教程" class="headerlink" title="Sublime 安装 破解 汉化 详细教程"></a><a href="https://zhuanlan.zhihu.com/p/161691837">Sublime 安装 破解 汉化 详细教程</a></h1><blockquote><p><strong>Sublime Text</strong>是一套<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0">跨平台</a>的<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E7%B7%A8%E8%BC%AF%E5%99%A8">文本编辑器</a>，支持基于<a href="https://zh.wikipedia.org/wiki/Python">Python</a>的插件。Sublime Text是<a href="https://zh.wikipedia.org/wiki/%E5%B0%88%E6%9C%89%E8%BB%9F%E9%AB%94">专有软件</a>，可透过包（Package）扩展。大多数的包使用自由软件授权发布，并由社群建置维护。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/161691837"><img src="https://pica.zhimg.com/v2-20a8aa04657e88d889e19b89f2b4a3e8_1440w.jpg?source=172ae18b" srcset="/img/loading2.gif" lazyload alt="知乎"></a></p><hr><h1 id="Typora-Gitee-PicGo-实现-云-markdown笔记"><a href="#Typora-Gitee-PicGo-实现-云-markdown笔记" class="headerlink" title="Typora + Gitee + PicGo 实现 云 markdown笔记"></a><a href="https://blog.csdn.net/weixin_44491927/article/details/106528795?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163995835616780264055594%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163995835616780264055594&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-106528795.first_rank_v2_pc_rank_v29&utm_term=gieet%E5%9B%BE%E5%BA%8A&spm=1018.2226.3001.4187">Typora + Gitee + PicGo 实现 云 markdown笔记</a></h1><blockquote><p><strong>Typora</strong>是一款由Abner Lee开发的轻量级<a href="https://zh.wikipedia.org/wiki/Markdown">Markdown</a><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8">编辑器</a>，适用于<a href="https://zh.wikipedia.org/wiki/OS_X">OS X</a>、<a href="https://zh.wikipedia.org/wiki/Windows">Windows</a>和<a href="https://zh.wikipedia.org/wiki/Linux">Linux</a>三种<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>。与其他Markdown编辑器不同的是，Typora没有采用<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>和预览双栏显示的方式，而是采用<a href="https://zh.wikipedia.org/wiki/%E6%89%80%E8%A7%81%E5%8D%B3%E6%89%80%E5%BE%97">所见即所得</a>的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式[<a href="https://zh.wikipedia.org/zh-cn/Typora#cite_note-1">1]</a>。</p></blockquote><p><strong>Typora所有<a href="https://typora.io/windows/dev_release.html">历史版本</a></strong></p><blockquote><p><strong>Gitee</strong>（码云）是开源中国于2013年推出的基于<a href="https://zh.wikipedia.org/wiki/Git">Git</a>的代码托管和协作开发平台，提供中国本土化的<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">代码托管</a>服务。截止 2020 年 5 月，Gitee 已经有 500 万名注册用户和 1000 万个代码仓库，是中国境内规模最大的代码托管平台。[<a href="https://zh.wikipedia.org/wiki/Gitee#cite_note-1">1]</a></p></blockquote><blockquote><p><strong>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</strong></p></blockquote><p><a href="https://liegu0317.github.io/2021/12/08/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112202009770.png" srcset="/img/loading2.gif" lazyload alt="Typora"></a></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>文章分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Gitee</tag>
      
      <tag>PicGo</tag>
      
      <tag>Sublime</tag>
      
      <tag>Typora</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑色五叶草|看到100集了</title>
    <link href="/2021/12/19/%E9%BB%91%E8%89%B2%E4%BA%94%E5%8F%B6%E8%8D%89-%E7%9C%8B%E5%88%B0100%E9%9B%86%E4%BA%86/"/>
    <url>/2021/12/19/%E9%BB%91%E8%89%B2%E4%BA%94%E5%8F%B6%E8%8D%89-%E7%9C%8B%E5%88%B0100%E9%9B%86%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/19/BCd25IiUGg8LTwF.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p>2021-12-19 <a href="https://baike.baidu.com/item/%E9%BB%91%E8%89%B2%E4%BA%94%E5%8F%B6%E8%8D%89/19921969#viewPageContent"> ブラッククローバー </a> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Studio Pierrot改编的电视动画作品">[1]</span></a></sup> 100集</p></blockquote><blockquote><p>最棒的两人<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="主要人物：阿斯塔 、  由诺·格林贝利奥尔">[2]</span></a></sup>  |  一定会成为最强的两人</p></blockquote><h1 id="动漫简介"><a href="#动漫简介" class="headerlink" title="动漫简介"></a>动漫简介</h1><p><img src="https://bkimg.cdn.bcebos.com/pic/9213b07eca8065387cd87d1e9bdda144ad348289?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto" srcset="/img/loading2.gif" lazyload alt="ブラッククローバー "></p><blockquote><p>人类曾一度面临被魔神赶尽杀绝的危机，有一名魔道士却在绝境之中力挽狂澜。他被称作“魔法帝”，并成为了传说。而在某个魔法代表一切的世界，生来无法使用魔法的少年亚斯塔为了证明自己的能力、也为了实践与朋友的约定，而朝着魔道士的巅峰“魔法帝”进发！</p></blockquote><h1 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h1><p>这大概是我第一次看了这么久的日漫，这部来自2017年的动漫没有现在某些国产动漫的精良画质和高能特效，但这不影响我去喜欢<a href="http://ysjdm8.com/acg/3836/">他</a>。<br>厌烦某些动画有着华丽特效而内容却空洞无脑。<br>这是一部热血番，贯穿始终的是梦想，它不是虚无的，而是正在实现的。<br>无数激励的话语也在其中，虽然我厌倦了心灵鸡汤，但是<a href="http://ysjdm8.com/acg/3836/">他</a>仍吸引着我。</p><p><img src="https://s2.loli.net/2021/12/19/Bo51xJLX9qI7yhO.jpg" srcset="/img/loading2.gif" lazyload></p><p><img src="https://images7.alphacoders.com/959/thumb-1920-959228.jpg" srcset="/img/loading2.gif" lazyload></p><blockquote><p>动画开播初期，<a href="https://baike.baidu.com/item/%E9%9B%86%E8%8B%B1%E7%A4%BE/577964?fr=aladdin">集英社</a>高桥编辑谈到:“人气高的漫画以<a href="https://baike.baidu.com/item/%E5%91%A8%E5%88%8A%E5%B0%91%E5%B9%B4JUMP/8627718?fromtitle=jump&fromid=9830239">JUMP</a>为首的几乎所有的编辑都打算让作品映像化。因为说不定可以像<a href="https://baike.baidu.com/item/%E4%B8%80%E6%8B%B3%E8%B6%85%E4%BA%BA/1966105">一拳超人</a>、<a href="https://baike.baidu.com/item/Tokyo%20Ghoul/22470868">东京食尸鬼</a>那样把作品的优点传达给更多人，这样海外原作的人气也能得到提高。集英社想把黑色五叶草培养成下一个火影忍者（高桥氏）”。  </p></blockquote><p>—<section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Studio Pierrot改编的电视动画作品<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>主要人物：阿斯塔 、  由诺·格林贝利奥尔<br><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>特殊的日子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志</tag>
      
      <tag>日漫</tag>
      
      <tag>黑色五叶草</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV-python安装|计算机视觉库</title>
    <link href="/2021/12/19/OpenCV/"/>
    <url>/2021/12/19/OpenCV/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/18/OkWFomyTA6qN3jS.png" srcset="/img/loading2.gif" lazyload></p><h1 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h1><blockquote><p>OpenCV的全称是Open Source Computer Vision Library，是一个跨平台的计算机视觉库。OpenCV是由英特尔公司发起并参与开发，以BSD许可证授权发行，可以在商业和研究领域中免费使用。OpenCV可用于开发实时的图像处理、计算机视觉以及模式识别程序。该程序库也可以使用英特尔公司的IPP进行加速处理。</p></blockquote><h1 id="安装简述"><a href="#安装简述" class="headerlink" title="安装简述"></a>安装简述</h1><p><strong>建议配合<code>Anaconda</code>配置Python开发环境</strong></p><p>简单的说一下<code>OpenCV-Python</code>在<code>Windows</code>环境下的安装</p><p><em>在<code>3.4.2</code>版本后部分（sift,surf）算法申请了专利，后续的开源版本部分功能不方便应用</em></p><blockquote><p>下面两个版本各取所需</p></blockquote><h2 id="使用pip进行安装最新版"><a href="#使用pip进行安装最新版" class="headerlink" title="使用pip进行安装最新版"></a>使用pip进行安装最新版</h2><p>打开<code>Anaconda</code>的<code>Anaconda Prompt</code></p><p><img src="https://s2.loli.net/2021/12/18/bZPUsmv7pSRjMfn.png" srcset="/img/loading2.gif" lazyload></p><p>运行命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn<span class="hljs-regexp">/simple/</span> opencv-python<br><br>pip install -i https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn<span class="hljs-regexp">/simple/</span> opencv-contrib-python<br></code></pre></td></tr></table></figure><p>来安装<code>OpenCV-Python</code>最新版</p><blockquote><p>因为OpenCV官方镜像源在国外，速度极慢（在我的网络环境仅有几十KB），因此这里是使用的<code>清华大学开源软件镜像站</code></p></blockquote><h2 id="OpenCV-Python装3-4-1-15版本（最后一个含有sift-surf的版本）"><a href="#OpenCV-Python装3-4-1-15版本（最后一个含有sift-surf的版本）" class="headerlink" title="OpenCV-Python装3.4.1.15版本（最后一个含有sift,surf的版本）"></a>OpenCV-Python装3.4.1.15版本（最后一个含有sift,surf的版本）</h2><p>Anaconda要装Anaconda3 5.2.0，对应python3.6版本</p><p>依旧推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学开源软件镜像站-anaconda&#x2F;archive</a></p><p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202112202350676.png" srcset="/img/loading2.gif" lazyload alt="image-20211220235037549"></p><p>安装OpenCV-python</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pip</span> install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-python==<span class="hljs-number">3.4.1.15</span><br>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-contrib-python==<span class="hljs-number">3.4.1.15</span><br></code></pre></td></tr></table></figure><p>若失效，不存在的请自行更换镜像源 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="常见国内镜像源          http://pypi.douban.com/simple/ 豆瓣         http://mirrors.aliyun.com/pypi/simple/ 阿里         http://pypi.hustunique.com/simple/ 华中理工大学         http://pypi.sdutlinux.org/simple/ 山东理工大学         http://pypi.mirrors.ustc.edu.cn/simple/ 中国科学技术大学">[1]</span></a></sup></p><p>注</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">-i <span class="hljs-keyword">https</span>://pypi.tuna.tsinghua.edu.cn/simple <span class="hljs-comment">--使用源</span><br><br>-contrib- <span class="hljs-comment">--添加模块</span><br></code></pre></td></tr></table></figure><h2 id="查看已安装opencv版本"><a href="#查看已安装opencv版本" class="headerlink" title="查看已安装opencv版本"></a>查看已安装opencv版本</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">python</span>  <br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">cv2.<span class="hljs-emphasis">__version__</span><br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://zh.wikipedia.org/zh-cn/OpenCV">opencv-维基百科</a></li></ul><p><img src="https://s2.loli.net/2021/12/19/9OxY3cKsAdXRjNb.png" srcset="/img/loading2.gif" lazyload></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>常见国内镜像源<br>        <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a> 豆瓣<br>        <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> 阿里<br>        <a href="http://pypi.hustunique.com/simple/">http://pypi.hustunique.com/simple/</a> 华中理工大学<br>        <a href="http://pypi.sdutlinux.org/simple/">http://pypi.sdutlinux.org/simple/</a> 山东理工大学<br>        <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a> 中国科学技术大学<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV-Python</tag>
      
      <tag>pip</tag>
      
      <tag>contrib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SM.MS图床配合PicGo|Bloge插入图片</title>
    <link href="/2021/12/18/SM-MS%E5%9B%BE%E5%BA%8A%E9%85%8D%E5%90%88PicGo-Bloge%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2021/12/18/SM-MS%E5%9B%BE%E5%BA%8A%E9%85%8D%E5%90%88PicGo-Bloge%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/18/EfDlXdrJ641RCSB.png" srcset="/img/loading2.gif" lazyload></p><h1 id="应用概述"><a href="#应用概述" class="headerlink" title="应用概述"></a>应用概述</h1><blockquote><p>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</p></blockquote><p>PicGo 本体支持如下图床：</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS</code> v4\v5 版本 v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2 </code>v2.3.0-beta.0 </li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur </code>v1.6.0</li></ul><h1 id="分享原因"><a href="#分享原因" class="headerlink" title="分享原因"></a>分享原因</h1><blockquote><p>在此之前一直没找到适合写Blog的图床，因此一直在使用CSDN的图片链接</p></blockquote><blockquote><p>有了PicGo，在post中加入图片就变得很方便</p></blockquote><blockquote><p>我现在在用的是<a href="https://sm.ms/about">SM.MS图床</a>，免费的5GB空间对我来说压力不大</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><blockquote><p>参见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html">官方文档</a></p></blockquote><h2 id="SM-MS图床配合PicGo"><a href="#SM-MS图床配合PicGo" class="headerlink" title="SM.MS图床配合PicGo"></a>SM.MS图床配合PicGo</h2><p>配置项及说明：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>  <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;&quot;</span> <span class="hljs-regexp">//</span> 通过SMMS后台获取的api token值<br>&#125;<br></code></pre></td></tr></table></figure><p>注册并登录<a href="https://sm.ms/home/apitoken">smms</a>后台获取token值。</p><p><img src="https://cdn.jsdelivr.net/gh/Molunerfinn/test/picgo/20200307182127.png" srcset="/img/loading2.gif" lazyload></p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p>点击此处下载<a href="https://github.com/Molunerfinn/PicGo/releases">应用</a></p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows 用户请下载最新版本的 <code>exe</code> 文件。</p><p>还可以使用 <a href="https://scoop.sh/">Scoop</a> 来安装 PicGo:<code> scoop bucket</code> &amp; <code>helbing https://github.com/helbing/scoop-bucket &amp; scoop install picgo</code>。</p><p>还可以使用 <a href="https://chocolatey.org/">Chocolatey</a> 来安装 PicGo: <code>choco install picgo</code>。</p><h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><p>macOS 用户请下载最新版本的 <code>dmg</code> 文件。</p><p>还可以使用 <a href="https://brew.sh/">Homebrew </a>来安装 PicGo: <code>brew install picgo --cask</code>。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux 用户请下载 <code>AppImage</code> 文件。</p><blockquote><p>如果你是 Arch 类的 Linux 用户，可以直接通过 yay -S picgo-appimage 来安装 PicGo （若是没有则先安装 yay ，是 aur 仓库助手）。</p></blockquote><h1 id="应用截图"><a href="#应用截图" class="headerlink" title="应用截图"></a>应用截图</h1><p>  <img src="https://s2.loli.net/2021/12/18/XgwW3yN6HvAO5V9.png" srcset="/img/loading2.gif" lazyload></p><p>  <img src="https://user-images.githubusercontent.com/12621342/34242310-b5056510-e655-11e7-8568-60ffd4f71910.gif" srcset="/img/loading2.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>好物分享</category>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图床</tag>
      
      <tag>PicGo</tag>
      
      <tag>SM.MS</tag>
      
      <tag>Bloge插入图片</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微软Bing在中国内地暂时停用|解决方案</title>
    <link href="/2021/12/17/%E5%BE%AE%E8%BD%AFBing%E5%9C%A8%E4%B8%AD%E5%9B%BD%E5%86%85%E5%9C%B0%E5%81%9C%E7%94%A830%E5%A4%A9/"/>
    <url>/2021/12/17/%E5%BE%AE%E8%BD%AFBing%E5%9C%A8%E4%B8%AD%E5%9B%BD%E5%86%85%E5%9C%B0%E5%81%9C%E7%94%A830%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/LIEGU0317/img/raw/master/Blogimg/202202111931968.png" srcset="/img/loading2.gif" lazyload></p><blockquote><p>Microsoft’s Bing suspends auto suggest function in China at government’s behest<br>应中国政府的要求，微软的必应暂停了在中国的自动提示功能  </p></blockquote><blockquote><p><code>2021-12-20 已恢复正常使用</code></p></blockquote><h2 id="微软Bing在中国内地暂时停用"><a href="#微软Bing在中国内地暂时停用" class="headerlink" title="微软Bing在中国内地暂时停用"></a>微软Bing在中国内地暂时停用</h2><p>关于今天早上我发现Bing搜索无法使用了这件事  </p><p>当时我就很纳闷，<a href="https://www.bing.com/">Microsoft</a>这么大的公司也会出现问题？</p><p>脑子里第一个想到的词就是之前在<a href="https://www.douyin.com/">抖音</a>上听过的<a href="https://baike.baidu.com/item/%E5%AE%95%E6%9C%BA">宕机</a> <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="口语里面我们简单的把停掉机器叫做down机，转换为汉字是`“宕机”`，但很多人都叫做`“当机”`，虽然不规范但却流行。">[1]</span></a></sup>  </p><p>因为所知尚少只能想到这个，也是蛮遗憾的一件事</p><hr><p>因为Microsoft Edge默认Bing搜索引擎，导致有的小伙伴还以为浏览器出问题了。其实并不是啊，给浏览器换个搜索引擎就好了。</p><p>Microsoft Edge地址栏输入<code>edge://settings/searchEngines</code></p><p>切换为百度等即可</p><h2 id="Microsoft的官方公告"><a href="#Microsoft的官方公告" class="headerlink" title="Microsoft的官方公告"></a>Microsoft的官方公告</h2><p><img src="https://www.jkmeng.cn/wp-content/uploads/2021/12/bing%E6%90%9C%E7%B4%A2%E4%B8%AD%E5%9B%BD%E5%85%B3%E9%97%AD30%E5%A4%A9%E9%80%9A%E7%9F%A5.png" srcset="/img/loading2.gif" lazyload alt="Microsoft Bing"></p><blockquote><p>译文：  </p><blockquote><p>根据中国法律，必应中国已被相关政府机构要求在中国大陆暂停搜索 <del>汽车</del> <code>自动建议</code><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="这里原文为`auto suggestion`,在这里我觉得翻译为`“自动建议”`比较合适,而不是`“汽车建议”`。">[2]</span></a></sup>功能30天。必应是一个全球性的搜索平台，将一如既往地尊重法治和用户获取信息的权利，并在适用的法律下帮助用户尽可能地找到信息。</p></blockquote></blockquote><p>必应上周五在其中文搜索网站上表示:</p><blockquote><p>“必应是一个全球搜索平台，并将继续致力于尊重法治和用户获取信息的权利”</p></blockquote><h2 id="短期建议"><a href="#短期建议" class="headerlink" title="短期建议"></a>短期建议</h2><p>如果是重度bing搜索用户，可以使用bing国际版。</p><h5 id="bing中国备用：https-www4-bing-com"><a href="#bing中国备用：https-www4-bing-com" class="headerlink" title="bing中国备用：https://www4.bing.com/"></a>bing中国备用：<a href="https://www4.bing.com/">https://www4.bing.com/</a></h5><h5 id="bing国际版​网址：https-global-bing-com"><a href="#bing国际版​网址：https-global-bing-com" class="headerlink" title="bing国际版​网址：https://global.bing.com/"></a>bing国际版​网址：<a href="https://global.bing.com/">https://global.bing.com/</a></h5><blockquote><p>期待您在的评论区留言</p></blockquote><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>口语里面我们简单的把停掉机器叫做down机，转换为汉字是<code>“宕机”</code>，但很多人都叫做<code>“当机”</code>，虽然不规范但却流行。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>这里原文为<code>auto suggestion</code>,在这里我觉得翻译为<code>“自动建议”</code>比较合适,而不是<code>“汽车建议”</code>。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>news</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Microsoft Bing</tag>
      
      <tag>Microsoft Edge</tag>
      
      <tag>“搜索自动建议”</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解环境变量|意义、作用</title>
    <link href="/2021/12/14/%E7%90%86%E8%A7%A3%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E6%84%8F%E4%B9%89%E3%80%81%E4%BD%9C%E7%94%A8/"/>
    <url>/2021/12/14/%E7%90%86%E8%A7%A3%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-%E6%84%8F%E4%B9%89%E3%80%81%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/3f24a5bf4f2f44f5a2bd21270ed5d257.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>今天在安装 <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> 的时候，在安装的最后有一个将 &#x2F;bin 添加至 PATH 环境变量的选项，于是想详细了解下，虽然之前就遇到过，但并没有详细了解。</p><h1 id="1-什么是环境变量"><a href="#1-什么是环境变量" class="headerlink" title="1.什么是环境变量"></a>1.什么是环境变量</h1><p>先来看看百度百科和维基百科的说明</p><h2 id="百度百科这样说："><a href="#百度百科这样说：" class="headerlink" title="百度百科这样说："></a>百度百科这样说：</h2><p><a href="https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a>（environment variables）一般是指在操作系统中用来指定操作系统运行环境的一些参数，如：临时文件夹位置和系统文件夹位置等。</p><hr><h2 id="维基百科这样说"><a href="#维基百科这样说" class="headerlink" title="维基百科这样说"></a>维基百科这样说</h2><p><a href="https://zh.wikipedia.org/zh-cn/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a>是一个动态命名的值，可以影响计算机上进程的行为方式。例如一个正在运行的进程可以查询TEMP环境变量的值，以发现一个合适的位置来存储临时文件，或者查询HOME或USERPROFILE变量，以找到运行该进程的用户所拥有的目录结构。</p><hr><p>这两个解释已经可以说时很明确了，但我第一次看也会有点蒙</p><h1 id="2-为什么需要环境变量（意义）"><a href="#2-为什么需要环境变量（意义）" class="headerlink" title="2.为什么需要环境变量（意义）"></a>2.为什么需要环境变量（意义）</h1><p>环境变量可以更加方便的记住每个需要的位置，比如临时文件夹位置和系统文件夹位置等。</p><h2 id="举一个简单但不严谨的例子"><a href="#举一个简单但不严谨的例子" class="headerlink" title="举一个简单但不严谨的例子"></a>举一个简单但不严谨的例子</h2><p>就好像我们电脑上安装了很多应用程序，我们并没有完全记住他的安装位设置，却可以轻易地运行，这归功于快捷方式。快捷方式指向了我们需要的文件，当我们把所有快捷方式集中弄到一起，这样我们仅需要记住集中位置，而不是每个应用程序的位置。可以极大地提高工作效率。</p><p><img src="https://img-blog.csdnimg.cn/69d9bc27249d4320b78ae66b29605d38.png" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/98083fbdb0904a6ca5744db1df928566.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><hr><h1 id="3-环境变量的作用"><a href="#3-环境变量的作用" class="headerlink" title="3.环境变量的作用"></a>3.环境变量的作用</h1><h2 id="百度百科："><a href="#百度百科：" class="headerlink" title="百度百科："></a>百度百科：</h2><p>环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息。例如Windows和DOS操作系统中的path环境变量，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径去找。用户通过设置环境变量，来更好的运行进程。</p><h2 id="维基百科："><a href="#维基百科：" class="headerlink" title="维基百科："></a>维基百科：</h2><p>在所有 UNIX 和 类Unix系统中, 每个进程都有其各自的环境变量设置。 缺省情况下, 当一个进程被创建时， 除了创建过程中的明确更改外，它继承了其父进程的绝大部分环境设置。 在API层级上, 使用fork和exec函数进行变量设置。或利用bash shell文件, 使用特殊的命令调用来改变环境变量：通过Env 间接替代或者使用ENVIRONMENT_VARIABLE&#x3D;VALUE <command> 标识. 所有的UNIX操作系统 以及DOS 和Microsoft Windows 都是用环境变量，但是它们使用不同的环境变量名称。我们可以通过运行程序来访问环境变量的值。</p><hr><p>自己去寻找一些有权威的词条文库，是解决问题的一个重要途径</p><p>官方文档同样是非常好的参考文件</p><hr><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p><a href="https://baike.baidu.com/item/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">百度百科-环境变量</a></p><p><a href="https://zh.wikipedia.org/zh-cn/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">维基百科-环境变量</a></p><h2 id="我のCSDN"><a href="#我のCSDN" class="headerlink" title="我のCSDN"></a>我のCSDN</h2><p><a href="https://blog.csdn.net/liegu0317?spm=1001.2014.3001.5343">有时间的话，一起学习吧!</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>名词理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量</tag>
      
      <tag>environment variables</tag>
      
      <tag>名词理解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12.13国家公祭日 | 致敬英雄</title>
    <link href="/2021/12/13/12-13%E5%9B%BD%E5%AE%B6%E5%85%AC%E7%A5%AD%E6%97%A5-%E8%87%B4%E6%95%AC%E8%8B%B1%E9%9B%84/"/>
    <url>/2021/12/13/12-13%E5%9B%BD%E5%AE%B6%E5%85%AC%E7%A5%AD%E6%97%A5-%E8%87%B4%E6%95%AC%E8%8B%B1%E9%9B%84/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic2.zhimg.com/v2-b89d685c9514ccf1500dbe3738fd8b21_r.jpg" srcset="/img/loading2.gif" lazyload></p><p>12.13<a href="https://baike.baidu.com/item/%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%B1%A0%E6%9D%80%E6%AD%BB%E9%9A%BE%E8%80%85%E5%9B%BD%E5%AE%B6%E5%85%AC%E7%A5%AD%E6%97%A5">中国政府设立的纪念日</a></p><p>请留一分钟，为南京大屠杀死难者默哀</p><iframe src="//player.bilibili.com/player.html?aid=507289505&bvid=BV1Jg411w7yY&cid=459938924&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
    <categories>
      
      <category>特殊的日子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>国家公祭日</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署Error:Spawn failed 解决方式</title>
    <link href="/2021/12/12/Hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99Spawn-failed-%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/12/12/Hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99Spawn-failed-%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Hexo部署出现一下错误err: Error: Spawn failed解决方式</p><hr><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">进入站点根目录<br><br>删除git提交内容文件夹<br>rm -rf <span class="hljs-string">.deploy_git/</span><br><br>执行<br>git config <span class="hljs-params">--global</span> core.autocrlf <span class="hljs-literal">false</span><br><br>最后<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>修改 _config.yml 文件，将配置地址http方式切换成ssh方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">进入站点根目录<br><br>删除git提交内容文件夹<br>vim _config<span class="hljs-selector-class">.yml</span><br><br>修改<br>deploy:<br><br>type: git<br><br>repository: https:<span class="hljs-comment">//github.com/Uninfo/blog.github.io.git </span><br>-&gt; git@github<span class="hljs-selector-class">.com</span>:Uninfo/blog<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span><br><br>branch: master<br><br>最后<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">进入站点根目录<br><br>进入depoly文件夹<br><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git/</span><br><br>强制推送<br>git push -f<br></code></pre></td></tr></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/liegu0317/article/details/121886380?spm=1001.2014.3001.5501">Hexo部署Error:Spawn failed 解决方式</a></p><h2 id="我的CSDN文章"><a href="#我的CSDN文章" class="headerlink" title="我的CSDN文章"></a>我的CSDN文章</h2><p><a href="https://blog.csdn.net/liegu0317/article/details/121886380?spm=1001.2014.3001.5501">hexo部署报错Spawn failed原因及解决方法</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/12/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99Spawn-failed-%E5%8E%9F%E5%9B%A0/"/>
    <url>/2021/12/12/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99Spawn-failed-%E5%8E%9F%E5%9B%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>正常编写发布hexo博客</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d<br></code></pre></td></tr></table></figure><p>部署修改，遇到名为Spawn failed报错。然后无脑尝试了二次执行，依然报错如下</p><p><img src="https://img-blog.csdnimg.cn/699e938641aa48509efb10ae92384e3a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2.问题原因"></a>2.问题原因</h1><p>询问学长以及在网上通过简单的查询之后发现问题出在.deploy_git文件夹，这是由hexo框架渲染生成的一个Git仓库,hexo d命令就是将其push到github。</p><p>这是解决后的截图，更新时间全部为一样的</p><p><img src="https://img-blog.csdnimg.cn/b4efcdff7ed342aa8717f244e5a80b78.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>这是github liegu0317.github.io截图</p><p><img src="https://img-blog.csdnimg.cn/6c1d68b51ad84b6bba33cf40098d0fb4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容，多余本地提交之类的导致了报错。</p><p>总之是本地文件的问题，</p><p>于是运行了如下解决方法。</p><h1 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3.解决办法"></a>3.解决办法</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">进入站点根目录<br><span class="hljs-keyword">cd</span> E:<span class="hljs-string">/hexo</span><br><br>删除git提交内容文件夹<br>rm -rf <span class="hljs-string">.deploy_git/</span><br><br>执行<br>git config <span class="hljs-params">--global</span> core.autocrlf <span class="hljs-literal">false</span><br><br>最后<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>还有些回滚的方法，真的麻烦，但也有那样做的好处，各取所需吧。<br>其他方法可参见我的上一篇文章：‘Hexo部署Error:Spawn failed 解决方式’</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p><a href="https://blog.csdn.net/liegu0317/article/details/121886380?spm=1001.2014.3001.5501">Hexo部署Error:Spawn failed 解决方式</a></p><h2 id="我的CSDN文章"><a href="#我的CSDN文章" class="headerlink" title="我的CSDN文章"></a>我的CSDN文章</h2><p><a href="https://blog.csdn.net/liegu0317/article/details/121886380?spm=1001.2014.3001.5501">hexo部署报错Spawn failed原因及解决方法</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LieGuのBlog_美化篇-Theme DIY</title>
    <link href="/2021/12/10/LieGu%E3%81%AEBlog-%E7%BE%8E%E5%8C%96%E7%AF%87/"/>
    <url>/2021/12/10/LieGu%E3%81%AEBlog-%E7%BE%8E%E5%8C%96%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>hexo作为一个快速、简洁高速的博客框架,拥有众多用户,也因此theme也非常丰富</p><p>直接在GitHub上搜索 <a href="https://github.com/search?q=hexo+theme">hexo theme</a>就可以找到许多好看的主题 </p><p>这里我使用的是名叫  <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>  的主题，他和其他使用量比较大的theme一样其  <a href="https://hexo.fluid-dev.com/docs">官方文档</a>  是相当丰富</p><hr><h2 id="1-主题安装"><a href="#1-主题安装" class="headerlink" title="1.主题安装"></a>1.<a href="https://hexo.fluid-dev.com/docs/start/#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">主题安装</a></h2><p>Hexo 5.0.0 版本以上，通过 npm 直接安装，进入博客目录执行命令：</p><p><code>npm install --save hexo-theme-fluid</code></p><p>然后在博客目录下创建 _config.fluid.yml，将主题的 _config.yml 内容复制过去</p><p><a href="https://hexo.fluid-dev.com/docs/start/#%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">点击查阅官方文档</a></p><p>补充: 可以在博客根目录右击 Git Bash Here 利用<code>hexo -v</code>查看hexo 版本</p><p><img src="https://img-blog.csdnimg.cn/b3e0a004680242fcbdea9a9936e854c5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_17,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><hr><h2 id="2-theme-DIY"><a href="#2-theme-DIY" class="headerlink" title="2.theme DIY"></a>2.theme DIY</h2><p>2.整理门面</p><p>包括：页头和首页</p><p><a href="https://liegu0317.github.io/"><img src="https://img-blog.csdnimg.cn/e26e0d76d39c4241bfb733222c511878.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></a></p><p>打开博客目录下_config.fluid.yml文件</p><p>这里我用的是sublime,也可以用 记事本 或 VS Code 等打开编辑都是可以的</p><p>ctrl+F 进入搜索 页头</p><p><img src="https://img-blog.csdnimg.cn/6f53f93046a14a3a84bafa903ef84a11.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p> 顺路开启了导航栏毛玻璃特效</p><p><img src="https://img-blog.csdnimg.cn/f87975b0077144d7b02c7b329dd35c3c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_19,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p> 首页</p><p><img src="https://img-blog.csdnimg.cn/f293047f97f0415b92a3f33608eca7fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>根据喜好做出修改</p><p>这里的相对路径就是 相对于.\themes\fluid\source的路径</p><p>注意：在文件里编写路径是反斜线  &#x2F;  或双斜线  \ \</p><p>学会这个后我还修改了post的封面，美观了许多</p><p><img src="https://img-blog.csdnimg.cn/7f0fa088cf144260a517f6cbbe734110.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/a591ec62f7ce48a28f59fd4f98e66d9d.png" srcset="/img/loading2.gif" lazyload></p><p> 在编写文章时丰富下文章信息可以使文章更有序</p><p>2.2修改About Page</p><p>ctrl+F 进入搜索 about page</p><p><img src="https://img-blog.csdnimg.cn/1294927b313c46deb117cb5b347a7ae8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>把需要的内容做出修改即可   图片内容可供参考</p><p>这个主题提供了许多图标可供使用</p><p><img src="https://img-blog.csdnimg.cn/a2ac999a602443059823bf68ca901aaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p><a href="https://hexo.fluid-dev.com/docs/icon/">点击查看</a></p><p>根据图标名称（图标下第一行）下面的 代号（图标下第二行）填入到 icons后面的class中，即可完成修改</p><p>在这里我增加了友链页</p><p>这是我修改后的效果</p><p><a href="https://liegu0317.github.io/about"><img src="https://img-blog.csdnimg.cn/92971de32f6e4fa3b646d895c9fd455d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></a></p><p><a href="https://liegu0317.github.io/links"><img src="https://img-blog.csdnimg.cn/bbb0aef4d60441c49f08a016a4efd81c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></a></p><p>个人认为还蛮不错的 </p><p>建议先在本地查看无误后在部署到远端</p><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><h2 id="最后执行命令部署到远端"><a href="#最后执行命令部署到远端" class="headerlink" title="最后执行命令部署到远端"></a>最后执行命令部署到远端</h2><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>end…</p><hr><h2 id="我的CSDN文章→hexo-Blog-美化篇-1"><a href="#我的CSDN文章→hexo-Blog-美化篇-1" class="headerlink" title="我的CSDN文章→hexo Blog 美化篇_1"></a>我的CSDN文章→<a href="https://blog.csdn.net/liegu0317/article/details/121866375">hexo Blog 美化篇_1</a></h2><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Fluid配置指南</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>hexo</tag>
      
      <tag>Blog美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LieGuのBlog_搭建篇-快速搭建简约风格博客</title>
    <link href="/2021/12/08/LieGu%E3%81%AEBlog-%E6%90%AD%E5%BB%BA%E7%AF%87/"/>
    <url>/2021/12/08/LieGu%E3%81%AEBlog-%E6%90%AD%E5%BB%BA%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>这里我用的是 <a href="https://hexo.io/zh-cn/index.html">hexo</a> 框架 远端部署到 <a href="https://github.com/">github</a></p><h1 id="1-下载安装Git"><a href="#1-下载安装Git" class="headerlink" title="1.下载安装Git"></a>1.下载安装Git</h1><p><a href="https://git-scm.com/">Git官网下载界面</a><br><img src="https://img-blog.csdnimg.cn/d47ea00990424a1ab10f59fb41874dba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="安装界面"></p><p>我这里已经装过了，就不演示了</p><p>注意勾选：Use Git from the Windows Command Prompt</p><p>其他遵循 默认的就是符合大众的，所以一路next就好了</p><h1 id="2-下载安装node-js"><a href="#2-下载安装node-js" class="headerlink" title="2.下载安装node.js"></a>2.下载安装node.js</h1><p><a href="http://nodejs.cn/download/">Node.js官网下载界面</a><br><img src="https://img-blog.csdnimg.cn/5f72cf63dccc436caaa09d0107535bab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="Node.js官网下载界面"><br>选择LTS版本下载就好</p><p>  安装一路 next</p><h1 id="3-npm安装hexo"><a href="#3-npm安装hexo" class="headerlink" title="3.npm安装hexo"></a>3.npm安装hexo</h1><h2 id="3-1任意位置-推荐新建-E-x2F-Blog"><a href="#3-1任意位置-推荐新建-E-x2F-Blog" class="headerlink" title="3.1任意位置  推荐新建 E:&#x2F;Blog"></a>3.1任意位置  推荐新建 E:&#x2F;Blog</h2><p>鼠标右击  Git Bush Here</p><p>若在1.2步骤中勾选了 Use Git from the Windows Command Prompt 则 点击在终端中打开可以实现相同的操作</p><p><img src="https://img-blog.csdnimg.cn/eb359ffff1cc4530a5684bfb7d2eba6d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><h2 id="3-2因为npm包管理器镜像源在国内比较慢"><a href="#3-2因为npm包管理器镜像源在国内比较慢" class="headerlink" title="3.2因为npm包管理器镜像源在国内比较慢"></a>3.2因为npm包管理器镜像源在国内比较慢</h2><p>所以在这里换为淘宝镜像源</p><p>继续在上步窗口运行代码，忽略warn就好</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><img src="https://img-blog.csdnimg.cn/f81147eb66384e8ca521c71241994992.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="忽略warn"></p><h2 id="3-3-输入cnpm-install-g-hexo-cli回车-x2F-复制后在下图空白（黑）右击-paste"><a href="#3-3-输入cnpm-install-g-hexo-cli回车-x2F-复制后在下图空白（黑）右击-paste" class="headerlink" title="3.3 输入cnpm install -g hexo-cli回车  &#x2F;  复制后在下图空白（黑）右击 paste"></a>3.3 输入cnpm install -g hexo-cli回车  &#x2F;  复制后在下图空白（黑）右击 paste</h2><p><code>cnpm install -g hexo-cli</code><br> 运行后：成功演示</p><p><img src="https://img-blog.csdnimg.cn/e6733180d5f34ac98eb36aae58dd520e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="成功演示"></p><p> 进行都这  搭建环境就完整了</p><h1 id="4-生成博客"><a href="#4-生成博客" class="headerlink" title="4.生成博客"></a>4.生成博客</h1><p>相当简单啊，一段代码就好了   </p><p>这里先搭建起来，所有都使用默认，后期可以更换或自己编辑具体内容的</p><p><code>hexo init</code></p><p><img src="https://img-blog.csdnimg.cn/5406bc7435cd4367a84c5f6603273d6b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="hexo init"><br>然后运行hexo s 启动博客本地查看效果</p><p><img src="https://img-blog.csdnimg.cn/cb15953cea55418a9f2ac40c9025a8dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="hexo s"></p><p> 直接在浏览器打开这个网址就行</p><p> <code>http://localhost:4000</code></p><p><img src="https://img-blog.csdnimg.cn/0f5ec7b0bc014b1f91730585ab8f8d47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="默认theme"></p><p>这里使用的时默认的theme，后面可以更换</p><p> 新建博客文章</p><p><code>hexo new &quot;我的第一篇博客文章&quot;</code><br>然后就可以 进入这个文件夹的 &#x2F;source&#x2F;*里面找到“我的第一篇博客文章”</p><p><img src="https://img-blog.csdnimg.cn/9670f1393c324149854f31f3f39bcbc4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload alt="我的第一篇博客文章"></p><p>可以使用sublime，VS Code或markdown等编辑。</p><p> 编辑后保存</p><h1 id="5-部署到Github"><a href="#5-部署到Github" class="headerlink" title="5.部署到Github"></a>5.部署到Github</h1><p> 在 <a href="https://github.com/LIEGU0317">GitHub</a> 创建仓库</p><p>注册登录账号后，在任何页面的右上角，使用 + 下拉菜单选择New repository（新建仓库）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/93f3fe27cd8bc9824d3f56692754c762.png" srcset="/img/loading2.gif" lazyload></p><p><img src="https://img-blog.csdnimg.cn/c41a138dd5fc4be081b0c268ee779d6f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_13,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>注意这里名字必须是name.github.io</p><p>图中的liegu0317是我的Github昵称</p><p> 描述随便写</p><p>然后  Create repository </p><p>复制库地址</p><p><img src="https://img-blog.csdnimg.cn/cc868874836c475db37582c984dbd4ea.jpg?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>返回命令行</p><p>去安装hexo-deployer-git自动部署发布工具</p><p><code>cnpm install --save hexo-deployer-git</code></p><p>编辑E:&#x2F;bolg&#x2F;_config.ylm </p><p><img src="https://img-blog.csdnimg.cn/33f4524f85fc435aa6a0b38078f40c69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p> 最底部</p><p><img src="https://img-blog.csdnimg.cn/0dbe3cf961a54621a87f590f69fd45e7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>修改为</p><p> <img src="https://img-blog.csdnimg.cn/b58dee1885d74fff98c2400fba9273d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">type: git<br>repo: https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/liegu0317/</span>liegu0317.github.io.git<br>branch: master<br></code></pre></td></tr></table></figure><p>注意将<code>liegu0317</code>更换为你的GitHub用户名</p><h2 id="0-然后，部署到远端"><a href="#0-然后，部署到远端" class="headerlink" title="0. 然后，部署到远端"></a>0. 然后，部署到远端</h2><p>在 E:&#x2F;bloge文件夹内 右击选择 Git Bush Here</p><p> <img src="https://img-blog.csdnimg.cn/7a1188a2ab32426ba3d6e7e266ae91c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54ix5ZCD6LGG55qu,size_12,color_FFFFFF,t_70,g_se,x_16" srcset="/img/loading2.gif" lazyload></p><p>让Git知道你是谁</p><p><code>git config --global user.name &quot;liegu0317&quot;</code><br><code>git config --global user.email &quot;liegu0317@qq.com&quot;</code></p><h2 id="1-先清除缓存文件db-jios-和以生成的静态文件public"><a href="#1-先清除缓存文件db-jios-和以生成的静态文件public" class="headerlink" title="1. 先清除缓存文件db.jios 和以生成的静态文件public"></a>1. 先清除缓存文件db.jios 和以生成的静态文件public</h2><p><code>hexo clean</code></p><ul><li>网站显示异常时可以执行这条命令</li></ul><h2 id="2-生成网站静态文件到默认设置的public文件夹"><a href="#2-生成网站静态文件到默认设置的public文件夹" class="headerlink" title="2. 生成网站静态文件到默认设置的public文件夹"></a>2. 生成网站静态文件到默认设置的public文件夹</h2><p><code>hexo g</code></p><ul><li>便于查看网站生成的静态文件或者手动部署网站；</li><li>如果使用自动部署，不需要先执行该命令；</li><li>hexo g 是 hexo generate 的缩写，命令效果一致。</li></ul><h2 id="3-自动生成网站静态文件，并部署到设定的仓库。"><a href="#3-自动生成网站静态文件，并部署到设定的仓库。" class="headerlink" title="3. 自动生成网站静态文件，并部署到设定的仓库。"></a>3. 自动生成网站静态文件，并部署到设定的仓库。</h2><p><code>hexo d</code></p><ul><li>hexo d 是 hexo deploy 的缩写，命令效果一致</li></ul><blockquote><p>第一次部署会要求输入账号（GitHub用户名）和密码或<a href="https://github.com/settings/tokens">Token</a></p></blockquote><h2 id="4-部署到远端也可以直接运行这个命令"><a href="#4-部署到远端也可以直接运行这个命令" class="headerlink" title="4. 部署到远端也可以直接运行这个命令"></a>4. 部署到远端也可以直接运行这个命令</h2><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>其中<code>&amp;&amp;</code>是成功后执行的意思</p><p>实际效果与原理与1-3相同</p><h2 id="5-直接访问仓库名，就可以看见搭建部署完成"><a href="#5-直接访问仓库名，就可以看见搭建部署完成" class="headerlink" title="5. 直接访问仓库名，就可以看见搭建部署完成"></a>5. 直接访问仓库名，就可以看见搭建部署完成</h2><h2 id="6-Hexo-好看的主题推荐-附安装教程"><a href="#6-Hexo-好看的主题推荐-附安装教程" class="headerlink" title="6. Hexo 好看的主题推荐(附安装教程)"></a>6. <a href="https://blog.csdn.net/zgd826237710/article/details/99671027">Hexo 好看的主题推荐(附安装教程)</a></h2><hr><h2 id="我の博客"><a href="#我の博客" class="headerlink" title="我の博客"></a>我の博客</h2><p><a href="https://liegu0317.github.io/">有时间的话，一起学习吧!</a>←Blog</p><p>我的CSDN文章→<a href="https://blog.csdn.net/liegu0317/article/details/121798595?spm=1001.2014.3001.5501">【hexo】+【github】搭建bloge 一路畅通 无坑版</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>hexo</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog Post | Test Post</title>
    <link href="/2021/12/08/My%20First%20Blog%20Post/"/>
    <url>/2021/12/08/My%20First%20Blog%20Post/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-hexo下Markdown语法-GFM"><a href="#第一章-hexo下Markdown语法-GFM" class="headerlink" title="第一章 hexo下Markdown语法(GFM)"></a>第一章 hexo下Markdown语法(GFM)</h1><h2 id="第一篇博客测试用"><a href="#第一篇博客测试用" class="headerlink" title="第一篇博客测试用"></a>第一篇博客测试用</h2><h2 id="1-语法精明阐述"><a href="#1-语法精明阐述" class="headerlink" title="1. 语法精明阐述"></a>1. 语法精明阐述</h2><ol><li>分段  <code>两个回车</code></li><li>换行  <code>两个空格</code> + <code>回车</code></li><li>标题   <code># ~ ######，#</code>号的个数表示几级标题，即表示一级标题到六级标题</li><li>强调   <code>**文字**</code> ， <code>__文字__</code> ， <code>_文字_</code> ， <code>*文字*</code> ， <code> </code><del>文字</del></li><li>引用  <code>&gt;</code> 注意后面紧跟个空格</li><li>表格 <code>-</code> 和 <code>|</code> 分割行和列 ，<code> :</code> 控制对其方式</li><li>代码块 <code>四个空格</code> 开头或， 使用 <code>```</code>代码内容<code>```</code></li><li>链接 <code>[文字](链接地址)</code>  </li><li>图片 <code>![图片说明](图片地址)</code> ，地址可以是本地路劲，也可以是网络地址</li><li>列表 <code>* </code>， <code>+ </code>， <code>- </code>， <code>1. </code>，选其中之一，注意后面紧跟个空格</li></ol><hr><h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 欢迎使用Markdown编辑器写博客    <span class="hljs-comment">//一级标题 对应 &lt;h1&gt; &lt;/h1&gt;</span><br>## 标题输入                     <span class="hljs-comment">//二级标题 对应 &lt;h2&gt; &lt;/h2&gt;</span><br>### 三级标题                    <span class="hljs-comment">//三级标题 对应 &lt;h3&gt; &lt;/h3&gt;</span><br>#### 四级标题                   <span class="hljs-comment">//四级标题 对应 &lt;h4&gt; &lt;/h4&gt;</span><br>##### 五级标题                  <span class="hljs-comment">//五级标题 对应 &lt;h5&gt; &lt;/h5&gt;</span><br>###### 六级标题                 <span class="hljs-comment">//六级标题 对应 &lt;h6&gt; &lt;/h6&gt;</span><br>####### 七级标题                <span class="hljs-comment">//抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）  </span><br></code></pre></td></tr></table></figure><blockquote><p>记得星号最后有空格</p></blockquote><hr><h2 id="3-内容强调"><a href="#3-内容强调" class="headerlink" title="3. 内容强调"></a>3. 内容强调</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">字体 <span class="hljs-strong">**加粗**</span> 显示<br>字体 <span class="hljs-emphasis">*斜体*</span> 显示<br>字体 <span class="hljs-strong">**<span class="hljs-emphasis">*加粗并斜体*</span>**</span> 显示<br></code></pre></td></tr></table></figure><blockquote><p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <em><strong>加粗并斜体</strong></em> 显示</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">字体 <span class="hljs-symbol">__</span>加粗<span class="hljs-symbol">__</span> 显示<br>字体 <span class="hljs-symbol">_</span>斜体<span class="hljs-symbol">_</span> 显示<br>字体 ___加粗并斜体___ 显示<br>组合 *<span class="hljs-symbol">__</span>加粗并斜体<span class="hljs-symbol">__</span>* 显示<br></code></pre></td></tr></table></figure><blockquote><p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <em><strong>加粗并斜体</strong></em> 显示<br>组合 <em><strong>加粗并斜体</strong></em> 显示</p></blockquote><hr><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h2><p><code>这样来 ~~删除一段文本~~</code></p><blockquote><p>这样来 <del>删除一段文本</del></p></blockquote><hr><h2 id="5-高亮"><a href="#5-高亮" class="headerlink" title="5. 高亮"></a>5. 高亮</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">使用<span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>\`<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>来强调字符    <br>//想打出 ` (反引号)需要转义的，加<span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>标签强调  <br>比如<span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>`突出背景色`<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>来显示强调效果<br></code></pre></td></tr></table></figure><blockquote><p>使用<code>`</code>来强调字符<br>想打出  ` (反引号)需要转义的，加<code>&lt;code&gt;&lt;/code&gt;</code>标签强调<br>比如<code><code>突出背景色</code></code>来显示强调效果</p></blockquote><hr><h2 id="6-引用显示"><a href="#6-引用显示" class="headerlink" title="6. 引用显示"></a>6. 引用显示</h2><p>引用过程中任然支持<code>Markdown</code>语法！  </p><h3 id="1-标准使用"><a href="#1-标准使用" class="headerlink" title="1. 标准使用"></a>1. 标准使用</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">每行开始都使用 <span class="hljs-string">&#x27;&gt;&#x27;</span>；</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">引用**开始**；</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">引用**换行**；</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">引用**结束**。</span><br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">还在引用中！</span><br><br>两个回车结束引用！<br></code></pre></td></tr></table></figure><blockquote><p>每行开始都使用 ‘&gt;’；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>。</p></blockquote><blockquote><p>还在引用中！</p></blockquote><p><code>两个回车</code>结束引用！</p><h3 id="2-省略使用"><a href="#2-省略使用" class="headerlink" title="2. 省略使用"></a>2. 省略使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 仅第一行加应用；</span><br>引用<span class="hljs-strong">**开始**</span>；<br>引用<span class="hljs-strong">**换行**</span>；<br>引用<span class="hljs-strong">**结束**</span>；<br><br>两个回车结束引用,不在引用范围内了！<br></code></pre></td></tr></table></figure><blockquote><p>仅第一行加应用；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>：<br>引用<strong>结束</strong>；</p></blockquote><p><code>两个回车</code>结束引用,不在引用范围内了！</p><h3 id="3-嵌套使用"><a href="#3-嵌套使用" class="headerlink" title="3. 嵌套使用"></a>3. 嵌套使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">动物</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; 水生动物</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; 陆生动物</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 猴子</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 人</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt; 程序猿</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt; 攻城狮</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记</span><br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; 两栖类动物</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 大鳄鱼</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">唐老鸭</span><br><br>两个回车结束引用,不在引用范围内了！<br></code></pre></td></tr></table></figure><blockquote><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记</p></blockquote></blockquote></blockquote></blockquote><blockquote><blockquote><p>两栖类动物</p><blockquote><p>大鳄鱼</p></blockquote></blockquote></blockquote><blockquote><p>唐老鸭</p></blockquote><p><code>两个回车</code>结束引用,不在引用范围内了！</p><hr><h2 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h2><blockquote><p>表格语法：</p></blockquote><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">列1   |<span class="hljs-string"> 列2 </span>|<span class="hljs-string"> 列3 </span><br><span class="hljs-string">----- </span>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> ---- </span><br><span class="hljs-string">第1行 </span>|<span class="hljs-string"> 12  </span>|<span class="hljs-string"> 13  </span><br><span class="hljs-string">第2行 </span>|<span class="hljs-string"> 22  </span>|<span class="hljs-string"> 23  </span><br><span class="hljs-string">第3行 </span>|<span class="hljs-string"> 32  </span>|<span class="hljs-string"> 33  </span><br></code></pre></td></tr></table></figure><table><thead><tr><th>列1</th><th>列2</th><th>列3</th></tr></thead><tbody><tr><td>第1行</td><td>12</td><td>13</td></tr><tr><td>第2行</td><td>22</td><td>23</td></tr><tr><td>第3行</td><td>32</td><td>33</td></tr></tbody></table><p>可以使用<code>冒号</code>来定义对齐方式：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐    </span>|<span class="hljs-string">  右对齐 </span>|<span class="hljs-string"> 居中 </span>|<br>|<span class="hljs-string"> :-------- </span>|<span class="hljs-string"> -------:</span>|<span class="hljs-string"> :--: </span>|<br>|<span class="hljs-string"> Computer  </span>|<span class="hljs-string"> 5000 元 </span>|<span class="hljs-string">  1台 </span>|<br>|<span class="hljs-string"> Phone     </span>|<span class="hljs-string"> 1999 元 </span>|<span class="hljs-string">  1部 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">5000 元</td><td align="center">1台</td></tr><tr><td align="left">Phone</td><td align="right">1999 元</td><td align="center">1部</td></tr></tbody></table><hr><h2 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8. 代码块"></a>8. 代码块</h2><p>代码块语法遵循标准<code> markdown</code> 代码，使用<code>```</code> 开始 ，<code>```</code> 结束 例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">```<br>Python<br><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Hello World! </span><br><span class="hljs-string">```</span><br></code></pre></td></tr></table></figure><blockquote><p>以上代码框及代码输入内容  </p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h3><blockquote><p>如何在代码块中打出 <code>```</code><br>实际上是使用 4个<code> 包含 3个</code> 就可以了，想表示更多，最外层+1就好了。</p></blockquote><p><code>````</code>  </p><p><code>```</code><br><code>```</code></p><p><code>````</code></p><hr><h2 id="9-链接插入"><a href="#9-链接插入" class="headerlink" title="9. 链接插入"></a>9. 链接插入</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[我的Blog]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//liegu0317.github.io/)</span><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://liegu0317.github.io/">我的Blog</a></p></blockquote><hr><h2 id="10-图片插入"><a href="#10-图片插入" class="headerlink" title="10. 图片插入"></a>10. 图片插入</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![face](https:<span class="hljs-regexp">//</span>liegu0317.github.io<span class="hljs-regexp">/img/</span>logo.png)<br></code></pre></td></tr></table></figure><p><img src="https://liegu0317.github.io/img/face.png" srcset="/img/loading2.gif" lazyload alt="face"></p><hr><h2 id="11-列表"><a href="#11-列表" class="headerlink" title="11.  列表"></a>11.  列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h3><figure class="highlight plaintext"><figcaption><span>列表展示</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs *">* 列表展示<br>     * 列表展示<br>+ 列表展示<br>+ 列表展示<br>     + 列表展示<br>- 列表展示<br>- 列表展示<br>     - 列表展示<br></code></pre></td></tr></table></figure><ul><li>列表展示</li><li>列表展示<ul><li>列表展示</li></ul></li></ul><ul><li>列表展示</li><li>列表展示<ul><li>列表展示</li></ul></li></ul><ul><li>列表展示</li><li>列表展示<ul><li>列表展示</li></ul></li></ul><h3 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1. 有序列表"></a>1. 有序列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 这种方式不用手动设置序号，自动生成列表序列">1. **我是一级序列** <br>1. **我是一级序列** <br>1. **我是一级序列** <br>     1. *我是二级序列* <br>     1. *我是二级序列* <br>     1. *我是二级序列* <br>1. **我是一级序列** <br>1. **我是一级序列** <br>     1. *我是二级序列* <br>     1. *我是二级序列* <br>          1. 三级序列 <br></code></pre></td></tr></table></figure><p>  这种方式不用手动设置序号，自动生成列表序列</p><ol><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li><li><em>我是二级序列</em></li></ol></li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> <ol><li>三级序列</li></ol></li></ol></li></ol><hr><h2 id="12-链接自动检测"><a href="#12-链接自动检测" class="headerlink" title="12. 链接自动检测"></a>12. 链接自动检测</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">我的Blog:https:<span class="hljs-regexp">//</span>liegu0317.github.io<br></code></pre></td></tr></table></figure><blockquote><p>我的Blog:<a href="https://liegu0317.github.io/">https://liegu0317.github.io/</a></p></blockquote><hr><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><blockquote><p>感觉还可以，算是搭建起来了<br>接下来就是细节与应用了（2021.12.8）</p></blockquote><blockquote><p>评论区已开启，来撒野吧（2021.12.）</p></blockquote><blockquote><p>评论收到回复时，邮箱提醒已开启<br>可以及时收到他人的回复了（2022.2.3）</p></blockquote><p><a target="_blank" href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&email=GnZzf31vKikrLVprazR5dXc" style="text-decoration:none;"><img src="http://rescdn.qqmail.com/zh_CN/htmledition/images/function/qm_open/ico_mailme_21.png" srcset="/img/loading2.gif" lazyload/></a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/weixin_52034760/article/details/121047628?spm=1001.2014.3001.5501">【Hexo】+【Github】搭建blog</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><p><a href="https://blog.csdn.net/zhuzhuyule/article/details/58347687">Hexo下的Markdown语法(GFM)写博客</a></p><p><a href="https://docs.github.com/cn/github/writing-on-github">github wrting</a></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
      <category>Blog进化之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>hexo</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
